/*
  NudeNet
  author: <https://github.com/vladmandic>'
*/

var aP=Object.create;var iw=Object.defineProperty;var lP=Object.getOwnPropertyDescriptor;var uP=Object.getOwnPropertyNames;var cP=Object.getPrototypeOf,pP=Object.prototype.hasOwnProperty;var go=(r,t)=>()=>(t||r((t={exports:{}}).exports,t),t.exports),qt=(r,t)=>{for(var e in t)iw(r,e,{get:t[e],enumerable:!0})},mP=(r,t,e,o)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of uP(t))!pP.call(r,n)&&n!==e&&iw(r,n,{get:()=>t[n],enumerable:!(o=lP(t,n))||o.enumerable});return r};var sm=(r,t,e)=>(e=r!=null?aP(cP(r)):{},mP(t||!r||!r.__esModule?iw(e,"default",{value:r,enumerable:!0}):e,r));var TN=go((_Z,vN)=>{vN.exports=Ce;var Io=null;try{Io=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch{}function Ce(r,t,e){this.low=r|0,this.high=t|0,this.unsigned=!!e}Ce.prototype.__isLong__;Object.defineProperty(Ce.prototype,"__isLong__",{value:!0});function oo(r){return(r&&r.__isLong__)===!0}Ce.isLong=oo;var dN={},gN={};function cl(r,t){var e,o,n;return t?(r>>>=0,(n=0<=r&&r<256)&&(o=gN[r],o)?o:(e=Se(r,(r|0)<0?-1:0,!0),n&&(gN[r]=e),e)):(r|=0,(n=-128<=r&&r<128)&&(o=dN[r],o)?o:(e=Se(r,r<0?-1:0,!1),n&&(dN[r]=e),e))}Ce.fromInt=cl;function ko(r,t){if(isNaN(r))return t?ul:Eo;if(t){if(r<0)return ul;if(r>=wN)return NN}else{if(r<=-yN)return ro;if(r+1>=yN)return SN}return r<0?ko(-r,t).neg():Se(r%yc|0,r/yc|0,t)}Ce.fromNumber=ko;function Se(r,t,e){return new Ce(r,t,e)}Ce.fromBits=Se;var Gh=Math.pow;function ww(r,t,e){if(r.length===0)throw Error("empty string");if(r==="NaN"||r==="Infinity"||r==="+Infinity"||r==="-Infinity")return Eo;if(typeof t=="number"?(e=t,t=!1):t=!!t,e=e||10,e<2||36<e)throw RangeError("radix");var o;if((o=r.indexOf("-"))>0)throw Error("interior hyphen");if(o===0)return ww(r.substring(1),t,e).neg();for(var n=ko(Gh(e,8)),s=Eo,i=0;i<r.length;i+=8){var a=Math.min(8,r.length-i),l=parseInt(r.substring(i,i+a),e);if(a<8){var u=ko(Gh(e,a));s=s.mul(u).add(ko(l))}else s=s.mul(n),s=s.add(ko(l))}return s.unsigned=t,s}Ce.fromString=ww;function Zo(r,t){return typeof r=="number"?ko(r,t):typeof r=="string"?ww(r,t):Se(r.low,r.high,typeof t=="boolean"?t:r.unsigned)}Ce.fromValue=Zo;var xN=1<<16,OP=1<<24,yc=xN*xN,wN=yc*yc,yN=wN/2,bN=cl(OP),Eo=cl(0);Ce.ZERO=Eo;var ul=cl(0,!0);Ce.UZERO=ul;var xc=cl(1);Ce.ONE=xc;var CN=cl(1,!0);Ce.UONE=CN;var bw=cl(-1);Ce.NEG_ONE=bw;var SN=Se(-1,2147483647,!1);Ce.MAX_VALUE=SN;var NN=Se(-1,-1,!0);Ce.MAX_UNSIGNED_VALUE=NN;var ro=Se(0,-2147483648,!1);Ce.MIN_VALUE=ro;var ut=Ce.prototype;ut.toInt=function(){return this.unsigned?this.low>>>0:this.low};ut.toNumber=function(){return this.unsigned?(this.high>>>0)*yc+(this.low>>>0):this.high*yc+(this.low>>>0)};ut.toString=function(t){if(t=t||10,t<2||36<t)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative())if(this.eq(ro)){var e=ko(t),o=this.div(e),n=o.mul(e).sub(this);return o.toString(t)+n.toInt().toString(t)}else return"-"+this.neg().toString(t);for(var s=ko(Gh(t,6),this.unsigned),i=this,a="";;){var l=i.div(s),u=i.sub(l.mul(s)).toInt()>>>0,c=u.toString(t);if(i=l,i.isZero())return c+a;for(;c.length<6;)c="0"+c;a=""+c+a}};ut.getHighBits=function(){return this.high};ut.getHighBitsUnsigned=function(){return this.high>>>0};ut.getLowBits=function(){return this.low};ut.getLowBitsUnsigned=function(){return this.low>>>0};ut.getNumBitsAbs=function(){if(this.isNegative())return this.eq(ro)?64:this.neg().getNumBitsAbs();for(var t=this.high!=0?this.high:this.low,e=31;e>0&&!(t&1<<e);e--);return this.high!=0?e+33:e+1};ut.isZero=function(){return this.high===0&&this.low===0};ut.eqz=ut.isZero;ut.isNegative=function(){return!this.unsigned&&this.high<0};ut.isPositive=function(){return this.unsigned||this.high>=0};ut.isOdd=function(){return(this.low&1)===1};ut.isEven=function(){return(this.low&1)===0};ut.equals=function(t){return oo(t)||(t=Zo(t)),this.unsigned!==t.unsigned&&this.high>>>31===1&&t.high>>>31===1?!1:this.high===t.high&&this.low===t.low};ut.eq=ut.equals;ut.notEquals=function(t){return!this.eq(t)};ut.neq=ut.notEquals;ut.ne=ut.notEquals;ut.lessThan=function(t){return this.comp(t)<0};ut.lt=ut.lessThan;ut.lessThanOrEqual=function(t){return this.comp(t)<=0};ut.lte=ut.lessThanOrEqual;ut.le=ut.lessThanOrEqual;ut.greaterThan=function(t){return this.comp(t)>0};ut.gt=ut.greaterThan;ut.greaterThanOrEqual=function(t){return this.comp(t)>=0};ut.gte=ut.greaterThanOrEqual;ut.ge=ut.greaterThanOrEqual;ut.compare=function(t){if(oo(t)||(t=Zo(t)),this.eq(t))return 0;var e=this.isNegative(),o=t.isNegative();return e&&!o?-1:!e&&o?1:this.unsigned?t.high>>>0>this.high>>>0||t.high===this.high&&t.low>>>0>this.low>>>0?-1:1:this.sub(t).isNegative()?-1:1};ut.comp=ut.compare;ut.negate=function(){return!this.unsigned&&this.eq(ro)?ro:this.not().add(xc)};ut.neg=ut.negate;ut.add=function(t){oo(t)||(t=Zo(t));var e=this.high>>>16,o=this.high&65535,n=this.low>>>16,s=this.low&65535,i=t.high>>>16,a=t.high&65535,l=t.low>>>16,u=t.low&65535,c=0,p=0,m=0,f=0;return f+=s+u,m+=f>>>16,f&=65535,m+=n+l,p+=m>>>16,m&=65535,p+=o+a,c+=p>>>16,p&=65535,c+=e+i,c&=65535,Se(m<<16|f,c<<16|p,this.unsigned)};ut.subtract=function(t){return oo(t)||(t=Zo(t)),this.add(t.neg())};ut.sub=ut.subtract;ut.multiply=function(t){if(this.isZero())return Eo;if(oo(t)||(t=Zo(t)),Io){var e=Io.mul(this.low,this.high,t.low,t.high);return Se(e,Io.get_high(),this.unsigned)}if(t.isZero())return Eo;if(this.eq(ro))return t.isOdd()?ro:Eo;if(t.eq(ro))return this.isOdd()?ro:Eo;if(this.isNegative())return t.isNegative()?this.neg().mul(t.neg()):this.neg().mul(t).neg();if(t.isNegative())return this.mul(t.neg()).neg();if(this.lt(bN)&&t.lt(bN))return ko(this.toNumber()*t.toNumber(),this.unsigned);var o=this.high>>>16,n=this.high&65535,s=this.low>>>16,i=this.low&65535,a=t.high>>>16,l=t.high&65535,u=t.low>>>16,c=t.low&65535,p=0,m=0,f=0,h=0;return h+=i*c,f+=h>>>16,h&=65535,f+=s*c,m+=f>>>16,f&=65535,f+=i*u,m+=f>>>16,f&=65535,m+=n*c,p+=m>>>16,m&=65535,m+=s*u,p+=m>>>16,m&=65535,m+=i*l,p+=m>>>16,m&=65535,p+=o*c+n*u+s*l+i*a,p&=65535,Se(f<<16|h,p<<16|m,this.unsigned)};ut.mul=ut.multiply;ut.divide=function(t){if(oo(t)||(t=Zo(t)),t.isZero())throw Error("division by zero");if(Io){if(!this.unsigned&&this.high===-2147483648&&t.low===-1&&t.high===-1)return this;var e=(this.unsigned?Io.div_u:Io.div_s)(this.low,this.high,t.low,t.high);return Se(e,Io.get_high(),this.unsigned)}if(this.isZero())return this.unsigned?ul:Eo;var o,n,s;if(this.unsigned){if(t.unsigned||(t=t.toUnsigned()),t.gt(this))return ul;if(t.gt(this.shru(1)))return CN;s=ul}else{if(this.eq(ro)){if(t.eq(xc)||t.eq(bw))return ro;if(t.eq(ro))return xc;var i=this.shr(1);return o=i.div(t).shl(1),o.eq(Eo)?t.isNegative()?xc:bw:(n=this.sub(t.mul(o)),s=o.add(n.div(t)),s)}else if(t.eq(ro))return this.unsigned?ul:Eo;if(this.isNegative())return t.isNegative()?this.neg().div(t.neg()):this.neg().div(t).neg();if(t.isNegative())return this.div(t.neg()).neg();s=Eo}for(n=this;n.gte(t);){o=Math.max(1,Math.floor(n.toNumber()/t.toNumber()));for(var a=Math.ceil(Math.log(o)/Math.LN2),l=a<=48?1:Gh(2,a-48),u=ko(o),c=u.mul(t);c.isNegative()||c.gt(n);)o-=l,u=ko(o,this.unsigned),c=u.mul(t);u.isZero()&&(u=xc),s=s.add(u),n=n.sub(c)}return s};ut.div=ut.divide;ut.modulo=function(t){if(oo(t)||(t=Zo(t)),Io){var e=(this.unsigned?Io.rem_u:Io.rem_s)(this.low,this.high,t.low,t.high);return Se(e,Io.get_high(),this.unsigned)}return this.sub(this.div(t).mul(t))};ut.mod=ut.modulo;ut.rem=ut.modulo;ut.not=function(){return Se(~this.low,~this.high,this.unsigned)};ut.and=function(t){return oo(t)||(t=Zo(t)),Se(this.low&t.low,this.high&t.high,this.unsigned)};ut.or=function(t){return oo(t)||(t=Zo(t)),Se(this.low|t.low,this.high|t.high,this.unsigned)};ut.xor=function(t){return oo(t)||(t=Zo(t)),Se(this.low^t.low,this.high^t.high,this.unsigned)};ut.shiftLeft=function(t){return oo(t)&&(t=t.toInt()),(t&=63)===0?this:t<32?Se(this.low<<t,this.high<<t|this.low>>>32-t,this.unsigned):Se(0,this.low<<t-32,this.unsigned)};ut.shl=ut.shiftLeft;ut.shiftRight=function(t){return oo(t)&&(t=t.toInt()),(t&=63)===0?this:t<32?Se(this.low>>>t|this.high<<32-t,this.high>>t,this.unsigned):Se(this.high>>t-32,this.high>=0?0:-1,this.unsigned)};ut.shr=ut.shiftRight;ut.shiftRightUnsigned=function(t){if(oo(t)&&(t=t.toInt()),t&=63,t===0)return this;var e=this.high;if(t<32){var o=this.low;return Se(o>>>t|e<<32-t,e>>>t,this.unsigned)}else return t===32?Se(e,0,this.unsigned):Se(e>>>t-32,0,this.unsigned)};ut.shru=ut.shiftRightUnsigned;ut.shr_u=ut.shiftRightUnsigned;ut.toSigned=function(){return this.unsigned?Se(this.low,this.high,!1):this};ut.toUnsigned=function(){return this.unsigned?this:Se(this.low,this.high,!0)};ut.toBytes=function(t){return t?this.toBytesLE():this.toBytesBE()};ut.toBytesLE=function(){var t=this.high,e=this.low;return[e&255,e>>>8&255,e>>>16&255,e>>>24,t&255,t>>>8&255,t>>>16&255,t>>>24]};ut.toBytesBE=function(){var t=this.high,e=this.low;return[t>>>24,t>>>16&255,t>>>8&255,t&255,e>>>24,e>>>16&255,e>>>8&255,e&255]};Ce.fromBytes=function(t,e,o){return o?Ce.fromBytesLE(t,e):Ce.fromBytesBE(t,e)};Ce.fromBytesLE=function(t,e){return new Ce(t[0]|t[1]<<8|t[2]<<16|t[3]<<24,t[4]|t[5]<<8|t[6]<<16|t[7]<<24,e)};Ce.fromBytesBE=function(t,e){return new Ce(t[4]<<24|t[5]<<16|t[6]<<8|t[7],t[0]<<24|t[1]<<16|t[2]<<8|t[3],e)}});var sv=go(()=>{});var iv=go(()=>{});var Mv=go((zv,Qw)=>{(function(r,t,e){function o(a){var l=this,u=i();l.next=function(){var c=2091639*l.s0+l.c*23283064365386963e-26;return l.s0=l.s1,l.s1=l.s2,l.s2=c-(l.c=c|0)},l.c=1,l.s0=u(" "),l.s1=u(" "),l.s2=u(" "),l.s0-=u(a),l.s0<0&&(l.s0+=1),l.s1-=u(a),l.s1<0&&(l.s1+=1),l.s2-=u(a),l.s2<0&&(l.s2+=1),u=null}function n(a,l){return l.c=a.c,l.s0=a.s0,l.s1=a.s1,l.s2=a.s2,l}function s(a,l){var u=new o(a),c=l&&l.state,p=u.next;return p.int32=function(){return u.next()*4294967296|0},p.double=function(){return p()+(p()*2097152|0)*11102230246251565e-32},p.quick=p,c&&(typeof c=="object"&&n(c,u),p.state=function(){return n(u,{})}),p}function i(){var a=4022871197,l=function(u){u=String(u);for(var c=0;c<u.length;c++){a+=u.charCodeAt(c);var p=.02519603282416938*a;a=p>>>0,p-=a,p*=a,a=p>>>0,p-=a,a+=p*4294967296}return(a>>>0)*23283064365386963e-26};return l}t&&t.exports?t.exports=s:e&&e.amd?e(function(){return s}):this.alea=s})(zv,typeof Qw=="object"&&Qw,typeof define=="function"&&define)});var Vv=go((Bv,t0)=>{(function(r,t,e){function o(i){var a=this,l="";a.x=0,a.y=0,a.z=0,a.w=0,a.next=function(){var c=a.x^a.x<<11;return a.x=a.y,a.y=a.z,a.z=a.w,a.w^=a.w>>>19^c^c>>>8},i===(i|0)?a.x=i:l+=i;for(var u=0;u<l.length+64;u++)a.x^=l.charCodeAt(u)|0,a.next()}function n(i,a){return a.x=i.x,a.y=i.y,a.z=i.z,a.w=i.w,a}function s(i,a){var l=new o(i),u=a&&a.state,c=function(){return(l.next()>>>0)/4294967296};return c.double=function(){do var p=l.next()>>>11,m=(l.next()>>>0)/4294967296,f=(p+m)/(1<<21);while(f===0);return f},c.int32=l.next,c.quick=c,u&&(typeof u=="object"&&n(u,l),c.state=function(){return n(l,{})}),c}t&&t.exports?t.exports=s:e&&e.amd?e(function(){return s}):this.xor128=s})(Bv,typeof t0=="object"&&t0,typeof define=="function"&&define)});var Wv=go((Gv,e0)=>{(function(r,t,e){function o(i){var a=this,l="";a.next=function(){var c=a.x^a.x>>>2;return a.x=a.y,a.y=a.z,a.z=a.w,a.w=a.v,(a.d=a.d+362437|0)+(a.v=a.v^a.v<<4^(c^c<<1))|0},a.x=0,a.y=0,a.z=0,a.w=0,a.v=0,i===(i|0)?a.x=i:l+=i;for(var u=0;u<l.length+64;u++)a.x^=l.charCodeAt(u)|0,u==l.length&&(a.d=a.x<<10^a.x>>>4),a.next()}function n(i,a){return a.x=i.x,a.y=i.y,a.z=i.z,a.w=i.w,a.v=i.v,a.d=i.d,a}function s(i,a){var l=new o(i),u=a&&a.state,c=function(){return(l.next()>>>0)/4294967296};return c.double=function(){do var p=l.next()>>>11,m=(l.next()>>>0)/4294967296,f=(p+m)/(1<<21);while(f===0);return f},c.int32=l.next,c.quick=c,u&&(typeof u=="object"&&n(u,l),c.state=function(){return n(l,{})}),c}t&&t.exports?t.exports=s:e&&e.amd?e(function(){return s}):this.xorwow=s})(Gv,typeof e0=="object"&&e0,typeof define=="function"&&define)});var Hv=go((Uv,r0)=>{(function(r,t,e){function o(i){var a=this;a.next=function(){var u=a.x,c=a.i,p,m,f;return p=u[c],p^=p>>>7,m=p^p<<24,p=u[c+1&7],m^=p^p>>>10,p=u[c+3&7],m^=p^p>>>3,p=u[c+4&7],m^=p^p<<7,p=u[c+7&7],p=p^p<<13,m^=p^p<<9,u[c]=m,a.i=c+1&7,m};function l(u,c){var p,m,f=[];if(c===(c|0))m=f[0]=c;else for(c=""+c,p=0;p<c.length;++p)f[p&7]=f[p&7]<<15^c.charCodeAt(p)+f[p+1&7]<<13;for(;f.length<8;)f.push(0);for(p=0;p<8&&f[p]===0;++p);for(p==8?m=f[7]=-1:m=f[p],u.x=f,u.i=0,p=256;p>0;--p)u.next()}l(a,i)}function n(i,a){return a.x=i.x.slice(),a.i=i.i,a}function s(i,a){i==null&&(i=+new Date);var l=new o(i),u=a&&a.state,c=function(){return(l.next()>>>0)/4294967296};return c.double=function(){do var p=l.next()>>>11,m=(l.next()>>>0)/4294967296,f=(p+m)/(1<<21);while(f===0);return f},c.int32=l.next,c.quick=c,u&&(u.x&&n(u,l),c.state=function(){return n(l,{})}),c}t&&t.exports?t.exports=s:e&&e.amd?e(function(){return s}):this.xorshift7=s})(Uv,typeof r0=="object"&&r0,typeof define=="function"&&define)});var qv=go((Kv,o0)=>{(function(r,t,e){function o(i){var a=this;a.next=function(){var u=a.w,c=a.X,p=a.i,m,f;return a.w=u=u+1640531527|0,f=c[p+34&127],m=c[p=p+1&127],f^=f<<13,m^=m<<17,f^=f>>>15,m^=m>>>12,f=c[p]=f^m,a.i=p,f+(u^u>>>16)|0};function l(u,c){var p,m,f,h,g,d=[],x=128;for(c===(c|0)?(m=c,c=null):(c=c+"\0",m=0,x=Math.max(x,c.length)),f=0,h=-32;h<x;++h)c&&(m^=c.charCodeAt((h+32)%c.length)),h===0&&(g=m),m^=m<<10,m^=m>>>15,m^=m<<4,m^=m>>>13,h>=0&&(g=g+1640531527|0,p=d[h&127]^=m+g,f=p==0?f+1:0);for(f>=128&&(d[(c&&c.length||0)&127]=-1),f=127,h=4*128;h>0;--h)m=d[f+34&127],p=d[f=f+1&127],m^=m<<13,p^=p<<17,m^=m>>>15,p^=p>>>12,d[f]=m^p;u.w=g,u.X=d,u.i=f}l(a,i)}function n(i,a){return a.i=i.i,a.w=i.w,a.X=i.X.slice(),a}function s(i,a){i==null&&(i=+new Date);var l=new o(i),u=a&&a.state,c=function(){return(l.next()>>>0)/4294967296};return c.double=function(){do var p=l.next()>>>11,m=(l.next()>>>0)/4294967296,f=(p+m)/(1<<21);while(f===0);return f},c.int32=l.next,c.quick=c,u&&(u.X&&n(u,l),c.state=function(){return n(l,{})}),c}t&&t.exports?t.exports=s:e&&e.amd?e(function(){return s}):this.xor4096=s})(Kv,typeof o0=="object"&&o0,typeof define=="function"&&define)});var Xv=go((jv,n0)=>{(function(r,t,e){function o(i){var a=this,l="";a.next=function(){var c=a.b,p=a.c,m=a.d,f=a.a;return c=c<<25^c>>>7^p,p=p-m|0,m=m<<24^m>>>8^f,f=f-c|0,a.b=c=c<<20^c>>>12^p,a.c=p=p-m|0,a.d=m<<16^p>>>16^f,a.a=f-c|0},a.a=0,a.b=0,a.c=-1640531527,a.d=1367130551,i===Math.floor(i)?(a.a=i/4294967296|0,a.b=i|0):l+=i;for(var u=0;u<l.length+20;u++)a.b^=l.charCodeAt(u)|0,a.next()}function n(i,a){return a.a=i.a,a.b=i.b,a.c=i.c,a.d=i.d,a}function s(i,a){var l=new o(i),u=a&&a.state,c=function(){return(l.next()>>>0)/4294967296};return c.double=function(){do var p=l.next()>>>11,m=(l.next()>>>0)/4294967296,f=(p+m)/(1<<21);while(f===0);return f},c.int32=l.next,c.quick=c,u&&(typeof u=="object"&&n(u,l),c.state=function(){return n(l,{})}),c}t&&t.exports?t.exports=s:e&&e.amd?e(function(){return s}):this.tychei=s})(jv,typeof n0=="object"&&n0,typeof define=="function"&&define)});var Yv=go(()=>{});var Jv=go((Zv,Hd)=>{(function(r,t,e){var o=256,n=6,s=52,i="random",a=e.pow(o,n),l=e.pow(2,s),u=l*2,c=o-1,p;function m(S,w,T){var $=[];w=w==!0?{entropy:!0}:w||{};var R=d(g(w.entropy?[S,b(t)]:S??x(),3),$),F=new f($),O=function(){for(var P=F.g(n),B=a,V=0;P<l;)P=(P+V)*o,B*=o,V=F.g(1);for(;P>=u;)P/=2,B/=2,V>>>=1;return(P+V)/B};return O.int32=function(){return F.g(4)|0},O.quick=function(){return F.g(4)/4294967296},O.double=O,d(b(F.S),t),(w.pass||T||function(P,B,V,G){return G&&(G.S&&h(G,F),P.state=function(){return h(F,{})}),V?(e[i]=P,B):P})(O,R,"global"in w?w.global:this==e,w.state)}function f(S){var w,T=S.length,$=this,R=0,F=$.i=$.j=0,O=$.S=[];for(T||(S=[T++]);R<o;)O[R]=R++;for(R=0;R<o;R++)O[R]=O[F=c&F+S[R%T]+(w=O[R])],O[F]=w;($.g=function(P){for(var B,V=0,G=$.i,H=$.j,W=$.S;P--;)B=W[G=c&G+1],V=V*o+W[c&(W[G]=W[H=c&H+B])+(W[H]=B)];return $.i=G,$.j=H,V})(o)}function h(S,w){return w.i=S.i,w.j=S.j,w.S=S.S.slice(),w}function g(S,w){var T=[],$=typeof S,R;if(w&&$=="object")for(R in S)try{T.push(g(S[R],w-1))}catch{}return T.length?T:$=="string"?S:S+"\0"}function d(S,w){for(var T=S+"",$,R=0;R<T.length;)w[c&R]=c&($^=w[c&R]*19)+T.charCodeAt(R++);return b(w)}function x(){try{var S;return p&&(S=p.randomBytes)?S=S(o):(S=new Uint8Array(o),(r.crypto||r.msCrypto).getRandomValues(S)),b(S)}catch{var w=r.navigator,T=w&&w.plugins;return[+new Date,r,T,r.screen,b(t)]}}function b(S){return String.fromCharCode.apply(0,S)}if(d(e.random(),t),typeof Hd=="object"&&Hd.exports){Hd.exports=m;try{p=Yv()}catch{}}else typeof define=="function"&&define.amd?define(function(){return m}):e["seed"+i]=m})(typeof self<"u"?self:Zv,[],Math)});var Tm=go((pmt,Qv)=>{var eB=Mv(),rB=Vv(),oB=Wv(),nB=Hv(),sB=qv(),iB=Xv(),vl=Jv();vl.alea=eB;vl.xor128=rB;vl.xorwow=oB;vl.xorshift7=nB;vl.xor4096=sB;vl.tychei=iB;Qv.exports=vl});var XE=go(()=>{});var qa=class{constructor(t,e){this.backend=t,this.dataMover=e,this.data=new WeakMap,this.dataIdsCount=0}get(t){return this.data.has(t)||this.dataMover.moveData(this.backend,t),this.data.get(t)}set(t,e){this.dataIdsCount++,this.data.set(t,e)}has(t){return this.data.has(t)}delete(t){return this.dataIdsCount--,this.data.delete(t)}numDataIds(){return this.dataIdsCount}},jn=class{refCount(t){return to("refCount")}incRef(t){return to("incRef")}timerAvailable(){return!0}time(t){return to("time")}read(t){return to("read")}readSync(t){return to("readSync")}readToGPU(t,e){return to("readToGPU")}numDataIds(){return to("numDataIds")}disposeData(t,e){return to("disposeData")}write(t,e,o){return to("write")}move(t,e,o,n,s){return to("move")}createTensorFromGPUData(t,e,o){return to("createTensorFromGPUData")}memory(){return to("memory")}floatPrecision(){return to("floatPrecision")}epsilon(){return this.floatPrecision()===32?1e-7:1e-4}dispose(){return to("dispose")}};function to(r){throw new Error(`'${r}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function nN(r){let t=r.length,e=0;for(;t>0;)e=Math.random()*t|0,t--,Ph(r,t,e)}function fP(r,t){if(r.length!==t.length)throw new Error(`Array sizes must match to be shuffled together First array length was ${r.length}Second array length was ${t.length}`);let e=r.length,o=0;for(;e>0;)o=Math.random()*e|0,e--,Ph(r,e,o),Ph(t,e,o)}function au(r,t,e){return Math.max(r,Math.min(t,e))}function hP(r){return r%2===0?r:r+1}function Ph(r,t,e){let o=r[t];r[t]=r[e],r[e]=o}function dP(r){let t=0;for(let e=0;e<r.length;e++)t+=r[e];return t}function gP(r,t){let e=Math.random();return t*e+(1-e)*r}function xP(r,t){let e=0;for(let o=0;o<r.length;o++){let n=Number(r[o])-Number(t[o]);e+=n*n}return e}function E(r,t){if(!r)throw new Error(typeof t=="string"?t:t())}function Te(r,t,e=""){E(eo(r,t),()=>e+` Shapes ${r} and ${t} must match`)}function xo(r){E(r!=null,()=>"The input to the tensor constructor must be a non-null value.")}function Pt(r){if(r.length===0)return 1;let t=r[0];for(let e=1;e<r.length;e++)t*=r[e];return t}function yP(r){return r.length===0}function aw(r,t){if(r===t)return!0;if(r==null||t==null||r.length!==t.length)return!1;for(let e=0;e<r.length;e++)if(r[e]!==null&&t[e]!==null&&r[e]!==t[e])return!1;return!0}function eo(r,t){if(r===t)return!0;if(r==null||t==null||r.length!==t.length)return!1;for(let e=0;e<r.length;e++)if(r[e]!==t[e])return!1;return!0}function Xn(r){return r%1===0}function bP(r){if(Math.tanh!=null)return Math.tanh(r);if(r===1/0)return 1;if(r===-1/0)return-1;{let t=Math.exp(2*r);return(t-1)/(t+1)}}function wP(r){let t=Math.ceil(Math.sqrt(r));return[t,Math.ceil(r/t)]}function CP(r){let t=new Uint32Array(r);for(let e=0;e<r;++e)t[e]=e;return nN(t),t}function Xa(r,t){return t<=r.length?r:r+" ".repeat(t-r.length)}function SP(r,t=n=>0,e,o){return new Promise((n,s)=>{let i=0,a=()=>{if(r()){n();return}i++;let l=t(i);if(e!=null&&i>=e){s();return}o!=null?o(a,l):setTimeout(a,l)};a()})}function NP(r,t){let e=1,o=-1;for(let s=0;s<r.length;++s)if(r[s]>=0)e*=r[s];else if(r[s]===-1){if(o!==-1)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${o} and dim ${s}`);o=s}else if(r[s]<0)throw Error(`Shapes can not be < 0. Found ${r[s]} at dim ${s}`);if(o===-1){if(t>0&&t!==e)throw Error(`Size(${t}) must match the product of shape ${r}`);return r}if(e===0)throw Error(`Cannot infer the missing size in [${r}] when there are 0 elements`);if(t%e!==0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${e}`);let n=r.slice();return n[o]=t/e,n}function Me(r,t){let e=t.length;return r=r==null?t.map((o,n)=>n):[].concat(r),E(r.every(o=>o>=-e&&o<e),()=>`All values in axis param must be in range [-${e}, ${e}) but got axis ${r}`),E(r.every(o=>Xn(o)),()=>`All values in axis param must be integers but got axis ${r}`),r.map(o=>o<0?e+o:o)}function lw(r,t){let e=[],o=[],n=t!=null&&Array.isArray(t)&&t.length===0,s=t==null||n?null:Me(t,r).sort(),i=0;for(let a=0;a<r.length;++a){if(s!=null){if(s[i]===a&&r[a]!==1)throw new Error(`Can't squeeze axis ${a} since its dim '${r[a]}' is not 1`);(s[i]==null||s[i]>a)&&r[a]===1&&(e.push(r[a]),o.push(a)),s[i]<=a&&i++}r[a]!==1&&(e.push(r[a]),o.push(a))}return{newShape:e,keptDims:o}}function uw(r,t){return zh(r,t)}function zh(r,t){let e=null;if(r==null||r==="float32")e=new Float32Array(t);else if(r==="int32")e=new Int32Array(t);else if(r==="bool")e=new Uint8Array(t);else if(r==="string")e=new Array(t);else throw new Error(`Unknown data type ${r}`);return e}function cw(r,t){for(let e=0;e<r.length;e++){let o=r[e];if(isNaN(o)||!isFinite(o))throw Error(`A tensor of type ${t} being uploaded contains ${o}.`)}}function pw(r){return r==="bool"||r==="complex64"||r==="float32"||r==="int32"||r==="string"}function vP(r,t){return!(t==="complex64"||t==="float32"&&r!=="complex64"||t==="int32"&&r!=="float32"&&r!=="complex64"||t==="bool"&&r==="bool")}function lu(r){if(r==="float32"||r==="int32")return 4;if(r==="complex64")return 8;if(r==="bool")return 1;throw new Error(`Unknown dtype ${r}`)}function mw(r){if(r==null)return 0;let t=0;return r.forEach(e=>t+=e.length),t}function uu(r){return typeof r=="string"||r instanceof String}function sN(r){return typeof r=="boolean"}function iN(r){return typeof r=="number"}function di(r){return Array.isArray(r)?di(r[0]):r instanceof Float32Array?"float32":r instanceof Int32Array||r instanceof Uint8Array||r instanceof Uint8ClampedArray?"int32":iN(r)?"float32":uu(r)?"string":sN(r)?"bool":"float32"}function cu(r){return!!(r&&r.constructor&&r.call&&r.apply)}function pu(r,t){for(let e=t;e<r;++e)if(r%e===0)return e;return r}function gn(r){let t=r.length;if(t<2)return[];let e=new Array(t-1);e[t-2]=r[t-1];for(let o=t-3;o>=0;--o)e[o]=e[o+1]*r[o+1];return e}function aN(r,t,e,o=!1){let n=new Array;if(t.length===1){let s=t[0]*(o?2:1);for(let i=0;i<s;i++)n[i]=e[r+i]}else{let s=t[0],i=t.slice(1),a=i.reduce((l,u)=>l*u)*(o?2:1);for(let l=0;l<s;l++)n[l]=aN(r+l*a,i,e,o)}return n}function ja(r,t,e=!1){if(r.length===0)return t[0];let o=r.reduce((n,s)=>n*s)*(e?2:1);if(o===0)return[];if(o!==t.length)throw new Error(`[${r}] does not match the input size ${t.length}${e?" for a complex tensor":""}.`);return aN(0,r,t,e)}function TP(r,t){if(Array.isArray(r))return r;if(t==="float32")return r instanceof Float32Array?r:new Float32Array(r);if(t==="int32")return r instanceof Int32Array?r:new Int32Array(r);if(t==="bool"||t==="string")return Uint8Array.from(new Int32Array(r));throw new Error(`Unknown dtype ${t}`)}function im(r,t){let e=mu(r,t);for(let o=0;o<e.length;o++)e[o]=1;return e}function mu(r,t){if(t==null||t==="float32"||t==="complex64")return new Float32Array(r);if(t==="int32")return new Int32Array(r);if(t==="bool")return new Uint8Array(r);throw new Error(`Unknown data type ${t}`)}function IP(r,t){let e=r.reduce((o,n)=>o*n,1);if(t==null||t==="float32")return ja(r,new Float32Array(e));if(t==="int32")return ja(r,new Int32Array(e));if(t==="bool")return ja(r,new Uint8Array(e));throw new Error(`Unknown data type ${t}`)}function he(r){r.forEach(t=>{E(Number.isInteger(t)&&t>=0,()=>`Tensor must have a shape comprised of positive integers but got shape [${r}].`)})}function kP(r,t,e){if(t===0)return 0;if(t===1)return r[0];let o=r[r.length-1];for(let n=0;n<r.length-1;++n)o+=e[n]*r[n];return o}function EP(r,t,e){if(t===0)return[];if(t===1)return[r];let o=new Array(t);for(let n=0;n<o.length-1;++n)o[n]=Math.floor(r/e[n]),r-=o[n]*e[n];return o[o.length-1]=r,o}function Ya(r){return r&&r.then&&typeof r.then=="function"}var lN="tfjsflags",am=class{constructor(t){this.global=t,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=AP,this.populateURLFlags()}setPlatform(t,e){this.platform!=null&&(z().getBool("IS_TEST")||z().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${t}.`)),this.platformName=t,this.platform=e}registerFlag(t,e,o){if(this.flagRegistry[t]={evaluationFn:e,setHook:o},this.urlFlags[t]!=null){let n=this.urlFlags[t];z().getBool("IS_TEST")||z().getBool("PROD")||console.warn(`Setting feature override from URL ${t}: ${n}.`),this.set(t,n)}}async getAsync(t){return t in this.flags?this.flags[t]:(this.flags[t]=await this.evaluateFlag(t),this.flags[t])}get(t){if(t in this.flags)return this.flags[t];let e=this.evaluateFlag(t);if(Ya(e))throw new Error(`Flag ${t} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[t]=e,this.flags[t]}getNumber(t){return this.get(t)}getBool(t){return this.get(t)}getString(t){return this.get(t)}getFlags(){return this.flags}get features(){return this.flags}set(t,e){if(this.flagRegistry[t]==null)throw new Error(`Cannot set flag ${t} as it has not been registered.`);this.flags[t]=e,this.flagRegistry[t].setHook!=null&&this.flagRegistry[t].setHook(e)}evaluateFlag(t){if(this.flagRegistry[t]==null)throw new Error(`Cannot evaluate flag '${t}': no evaluation function found.`);return this.flagRegistry[t].evaluationFn()}setFlags(t){this.flags=Object.assign({},t)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(typeof this.global>"u"||typeof this.global.location>"u"||typeof this.global.location.search>"u")return;let t=this.getQueryParams(this.global.location.search);lN in t&&t[lN].split(",").forEach(o=>{let[n,s]=o.split(":");this.urlFlags[n]=RP(n,s)})}};function AP(r){let t={};return r.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(e,...o)=>(DP(t,o[0],o[1]),o.join("="))),t}function DP(r,t,e){r[decodeURIComponent(t)]=decodeURIComponent(e||"")}function RP(r,t){let e=t.toLowerCase();return e==="true"||e==="false"?e==="true":`${+e}`===e?+e:t}function z(){return fw}var fw=null;function uN(r){fw=r}var hw;function dw(){if(hw==null){let r;if(typeof window<"u")r=window;else if(typeof global<"u")r=global;else if(typeof process<"u")r=process;else if(typeof self<"u")r=self;else throw new Error("Could not find a global object");hw=r}return hw}function FP(){let r=dw();return r._tfGlobals==null&&(r._tfGlobals=new Map),r._tfGlobals}function lm(r,t){let e=FP();if(e.has(r))return e.get(r);{let o=t();return e.set(r,o),e.get(r)}}var gi="Abs",Yn="Acos",Zn="Acosh",Yo="Add",xi="AddN",fu="All",hu="Any",yi="ArgMax",bi="ArgMin",Jn="Asin",Qn="Asinh",ts="Atan",es="Atanh",rs="Atan2",wi="AvgPool",du="AvgPoolGrad",Ci="AvgPool3D",gu="AvgPool3DGrad",Si="BatchMatMul",Ni="BatchToSpaceND",xu="Bincount",um="BitwiseAnd",cN="BroadcastTo",yu="BroadcastArgs",xn="Cast",os="Ceil",ns="ClipByValue",bu="Complex",vi="ComplexAbs",Ti="Concat",Ii="Conv2D",wu="Conv2DBackpropFilter",ki="Conv2DBackpropInput",Ei="Conv3D",Cu="Conv3DBackpropFilterV2",Su="Conv3DBackpropInputV2",ss="Cos",is="Cosh",Nu="Cumprod",$i="Cumsum",vu="CropAndResize",Tu="DenseBincount",Iu="DepthToSpace",Ai="DepthwiseConv2dNative",ku="DepthwiseConv2dNativeBackpropFilter",Eu="DepthwiseConv2dNativeBackpropInput",$u="Diag",Di="Dilation2D",cm="Dilation2DBackpropInput",pm="Dilation2DBackpropFilter",as="RealDiv",Au="Einsum",ls="Elu",Du="EluGrad",us="Erf",Za="Equal",cs="Exp",Ri="ExpandDims",ps="Expm1",Ru="FFT",Fu="Fill",_u="FlipLeftRight",ms="Floor",fs="FloorDiv",Fi="FusedBatchNorm",_i="GatherV2",Ou="GatherNd",Ja="Greater",hs="GreaterEqual",yn="Identity",Lu="IFFT",Pu="Imag",ds="IsFinite",gs="IsInf",xs="IsNan",Oi="LeakyRelu",Qa="Less",tl="LessEqual",zu="LinSpace",ys="Log",bs="Log1p",el="LogicalAnd",rl="LogicalNot",ol="LogicalOr";var pN="LogSoftmax";var Li="LRN",Mu="LRNGrad";var Pi="Max",ws="Maximum",zi="MaxPool",Bu="MaxPoolGrad",Mi="MaxPool3D",Vu="MaxPool3DGrad",Gu="MaxPoolWithArgmax",Bi="Mean",Vi="Min",Cs="Minimum",Gi="MirrorPad",Ss="Mod",Wu="Multinomial",Ns="Multiply",Wi="Neg",nl="NotEqual",Uu="NonMaxSuppressionV3",Hu="NonMaxSuppressionV4",Ku="NonMaxSuppressionV5",Ui="OnesLike",Hi="OneHot",Ki="Pack",qi="PadV2";var vs="Pow",ji="Prelu",Xi="Prod",qu="RaggedGather",ju="RaggedRange",Xu="RaggedTensorToTensor",Yu="Range",Zu="Real",Ts="Reciprocal",Is="Relu",Yi="Reshape",Zi="ResizeNearestNeighbor",Ju="ResizeNearestNeighborGrad",Ji="ResizeBilinear",Qu="ResizeBilinearGrad",ks="Relu6",Qi="Reverse",Es="Round",$s="Rsqrt",tc="ScatterNd",ec="TensorScatterUpdate",rc="SearchSorted",ta="Select",As="Selu",ea="Slice",Ds="Sin",Rs="Sinh",Fs="Sign",_s="Sigmoid",Os="Softplus",Ls="Sqrt",ra="Sum",oa="SpaceToBatchND",na="SplitV",sa="Softmax",oc="SparseFillEmptyRows",nc="SparseReshape",sc="SparseSegmentMean",ic="SparseSegmentSum",ac="SparseToDense",Ps="SquaredDifference",lc="Square",sl="StaticRegexReplace",uc="StridedSlice",cc="StringNGrams",pc="StringSplit",mc="StringToHashBucketFast",zs="Sub",Ms="Tan",Bs="Tanh",bn="Tile",fc="TopK",hc="Transform",wn="Transpose",dc="Unique",ia="Unpack",aa="UnsortedSegmentSum";var la="ZerosLike",Vs="Step",mm="FromPixels",gc="RotateWithOffset",il="_FusedMatMul",al="FusedConv2D",ll="FusedDepthwiseConv2D";function Cn(...r){z().getBool("IS_TEST")||z().getBool("PROD")||console.warn(...r)}function _P(...r){z().getBool("IS_TEST")||z().getBool("PROD")||console.log(...r)}var Mh=lm("kernelRegistry",()=>new Map),gw=lm("gradRegistry",()=>new Map);function fm(r,t){let e=hN(r,t);return Mh.get(e)}function xw(r){return gw.get(r)}function yw(r){let t=Mh.entries(),e=[];for(;;){let{done:o,value:n}=t.next();if(o)break;let[s,i]=n,[a]=s.split("_");a===r&&e.push(i)}return e}function Bh(r){let{kernelName:t,backendName:e}=r,o=hN(t,e);Mh.has(o)&&Cn(`The kernel '${t}' for backend '${e}' is already registered`),Mh.set(o,r)}function fN(r){let{kernelName:t}=r;gw.has(t)&&z().getBool("DEBUG")&&Cn(`Overriding the gradient for '${t}'`),gw.set(t,r)}function hN(r,t){return`${t}_${r}`}var y={};qt(y,{arraysEqual:()=>eo,arraysEqualWithNull:()=>aw,assert:()=>E,assertNonNegativeIntegerDimensions:()=>he,assertNonNull:()=>xo,assertShapesMatch:()=>Te,bytesFromStringArray:()=>mw,bytesPerElement:()=>lu,checkConversionForErrors:()=>cw,clamp:()=>au,computeStrides:()=>gn,convertBackendValuesAndArrayBuffer:()=>TP,createScalarValue:()=>VP,createShuffledIndices:()=>CP,decodeString:()=>Cc,distSquared:()=>xP,encodeString:()=>wc,fetch:()=>WP,fingerPrint64:()=>BP,flatten:()=>ca,getArrayFromDType:()=>zh,getTypedArrayFromDType:()=>uw,hasEncodingLoss:()=>vP,hexToLong:()=>hm,indexToLoc:()=>EP,inferDtype:()=>di,inferFromImplicitShape:()=>NP,isBoolean:()=>sN,isFunction:()=>cu,isInt:()=>Xn,isNumber:()=>iN,isPromise:()=>Ya,isScalarShape:()=>yP,isString:()=>uu,isTypedArray:()=>wr,isValidDtype:()=>pw,locToIndex:()=>kP,makeOnesTypedArray:()=>im,makeZerosNestedTypedArray:()=>IP,makeZerosTypedArray:()=>mu,nearestDivisor:()=>pu,nearestLargerEven:()=>hP,now:()=>fl,parseAxisParam:()=>Me,randUniform:()=>gP,repeatedTry:()=>SP,rightPad:()=>Xa,shuffle:()=>nN,shuffleCombo:()=>fP,sizeFromShape:()=>Pt,sizeToSquarishShape:()=>wP,squeezeShape:()=>lw,sum:()=>dP,swap:()=>Ph,tanh:()=>bP,toNestedArray:()=>ja,toTypedArray:()=>bc});function Vh(r){return r instanceof Float32Array||r instanceof Int32Array||r instanceof Uint8Array||r instanceof Uint8ClampedArray}var Sw=sm(TN());var ml=Sw.default||Sw;function hm(r){return ml.fromString(r,!0,16)}var kN=hm("c3a5c85c97cb3127"),pl=hm("b492b66fbe98f273"),kr=hm("9ae16a3b2f90404f");function Cw(r){return r.xor(r.shru(47))}function EN(r,t,e){let o=r.slice(t,t+e);return ml.fromBytes(Array.from(o),!0,!0)}function de(r,t){return EN(r,t,8)}function IN(r,t){return EN(r,t,4)}function rr(r,t){return t===0?r:r.shru(t).or(r.shl(64-t))}function ua(r,t,e=hm("9ddfea08eb382d69")){let o=r.xor(t).mul(e);o=o.xor(o.shru(47));let n=t.xor(o).mul(e);return n=n.xor(n.shru(47)),n=n.mul(e),n}function LP(r,t,e,o,n,s){n=n.add(r),s=rr(s.add(n).add(o),21);let i=n;return n=n.add(t),n=n.add(e),s=s.add(rr(n,44)),[n.add(o),s.add(i)]}function Wh(r,t,e,o){return LP(de(r,t),de(r,t+8),de(r,t+16),de(r,t+24),e,o)}function PP(r,t=r.length){if(t>=8){let e=kr.add(t*2),o=de(r,0).add(kr),n=de(r,t-8),s=rr(n,37).mul(e).add(o),i=rr(o,25).add(n).mul(e);return ua(s,i,e)}if(t>=4){let e=kr.add(t*2),o=IN(r,0);return ua(o.shl(3).add(t),IN(r,t-4),e)}if(t>0){let e=r[0],o=r[t>>1],n=r[t-1],s=e+(o<<8),i=t+(n<<2);return Cw(kr.mul(s).xor(kN.mul(i))).mul(kr)}return kr}function zP(r,t=r.length){let e=kr.add(t*2),o=de(r,0).mul(pl),n=de(r,8),s=de(r,t-8).mul(e),i=de(r,t-16).mul(kr);return ua(rr(o.add(n),43).add(rr(s,30)).add(i),o.add(rr(n.add(kr),18)).add(s),e)}function MP(r,t=r.length){let e=kr.add(t*2),o=de(r,0).mul(kr),n=de(r,8),s=de(r,t-8).mul(e),i=de(r,t-16).mul(kr),a=rr(o.add(n),43).add(rr(s,30)).add(i),l=ua(a,o.add(rr(n.add(kr),18)).add(s),e),u=de(r,16).mul(e),c=de(r,24),p=a.add(de(r,t-32)).mul(e),m=l.add(de(r,t-24)).mul(e);return ua(rr(u.add(c),43).add(rr(p,30)).add(m),u.add(rr(c.add(o),18)).add(p),e)}function BP(r,t=r.length){let e=ml.fromNumber(81,!0);if(t<=32)return t<=16?PP(r,t):zP(r,t);if(t<=64)return MP(r,t);let o=e,n=e.mul(pl).add(113),s=Cw(n.mul(kr).add(113)).mul(kr),i=[ml.UZERO,ml.UZERO],a=[ml.UZERO,ml.UZERO];o=o.mul(kr).add(de(r,0));let l=0,u=(t-1>>6)*64,c=u+(t-1&63)-63;do o=rr(o.add(n).add(i[0]).add(de(r,l+8)),37).mul(pl),n=rr(n.add(i[1]).add(de(r,l+48)),42).mul(pl),o=o.xor(a[1]),n=n.add(i[0]).add(de(r,l+40)),s=rr(s.add(a[0]),33).mul(pl),i=Wh(r,l,i[1].mul(pl),o.add(a[0])),a=Wh(r,l+32,s.add(a[1]),n.add(de(r,l+16))),[s,o]=[o,s],l+=64;while(l!==u);let p=pl.add(s.and(255).shl(1));return l=c,a[0]=a[0].add(t-1&63),i[0]=i[0].add(a[0]),a[0]=a[0].add(i[0]),o=rr(o.add(n).add(i[0]).add(de(r,l+8)),37).mul(p),n=rr(n.add(i[1]).add(de(r,l+48)),42).mul(p),o=o.xor(a[1].mul(9)),n=n.add(i[0].mul(9).add(de(r,l+40))),s=rr(s.add(a[0]),33).mul(p),i=Wh(r,l,i[1].mul(p),o.add(a[0])),a=Wh(r,l+32,s.add(a[1]),n.add(de(r,l+16))),[s,o]=[o,s],ua(ua(i[0],a[0],p).add(Cw(n).mul(kN)).add(s),ua(i[1],a[1],p).add(o),p)}function VP(r,t){return t==="string"?wc(r):bc([r],t)}function GP(r,t){return r instanceof Float32Array&&t==="float32"||r instanceof Int32Array&&t==="int32"||r instanceof Uint8Array&&t==="bool"}function bc(r,t){if(t==="string")throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(r)&&(r=ca(r)),z().getBool("DEBUG")&&cw(r,t),GP(r,t))return r;if(t==null||t==="float32"||t==="complex64")return new Float32Array(r);if(t==="int32")return new Int32Array(r);if(t==="bool"){let e=new Uint8Array(r.length);for(let o=0;o<e.length;++o)Math.round(r[o])!==0&&(e[o]=1);return e}else throw new Error(`Unknown data type ${t}`)}function fl(){return z().platform.now()}function WP(r,t){return z().platform.fetch(r,t)}function wc(r,t="utf-8"){return t=t||"utf-8",z().platform.encode(r,t)}function Cc(r,t="utf-8"){return t=t||"utf-8",z().platform.decode(r,t)}function wr(r){return z().platform.isTypedArray!=null?z().platform.isTypedArray(r):Vh(r)}function ca(r,t=[],e=!1){if(t==null&&(t=[]),typeof r=="boolean"||typeof r=="number"||typeof r=="string"||Ya(r)||r==null||wr(r)&&e)t.push(r);else if(Array.isArray(r)||wr(r))for(let o=0;o<r.length;++o)ca(r[o],t,e);else{let o=-1;for(let n of Object.keys(r))/^([1-9]+[0-9]*|0)$/.test(n)&&(o=Math.max(o,Number(n)));for(let n=0;n<=o;n++)ca(r[n],t,e)}return t}var Uh=class{constructor(t,e){this.backendTimer=t,this.logger=e,e==null&&(this.logger=new Nw)}profileKernel(t,e,o){let n,s=()=>{n=o()},i,a=fl();if(this.backendTimer.timerAvailable())i=this.backendTimer.time(s);else{s();for(let u of n)u.dataSync();i=Promise.resolve({kernelMs:fl()-a})}if(z().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let u=0;u<n.length;u++){let c=n[u];c.data().then(p=>{UP(p,c.dtype,t)})}return{kernelName:t,outputs:n,inputs:e,timeMs:i.then(u=>u.kernelMs),extraInfo:i.then(u=>u.getExtraProfileInfo!=null?u.getExtraProfileInfo():"")}}logKernelProfile(t){let{kernelName:e,outputs:o,timeMs:n,inputs:s,extraInfo:i}=t;o.forEach(a=>{Promise.all([a.data(),n,i]).then(l=>{this.logger.logKernelProfile(e,a,l[0],l[1],s,l[2])})})}};function UP(r,t,e){if(t!=="float32")return!1;for(let o=0;o<r.length;o++){let n=r[o];if(isNaN(n)||!isFinite(n))return console.warn(`Found ${n} in the result of '${e}'`),!0}return!1}var Nw=class{logKernelProfile(t,e,o,n,s,i){let a=typeof n=="number"?Xa(`${n}ms`,9):n.error,l=Xa(t,25),u=e.rank,c=e.size,p=Xa(e.shape.toString(),14),m="";for(let f in s){let h=s[f];if(h!=null){let g=h.shape||e.shape,d=g.length;m+=`${f}: ${d}D ${d>0?g:""} `}}console.log(`%c${l}	%c${a}	%c${u}D ${p}	%c${c}	%c${m}	%c${i}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}};function $N(r,t,e){let o={},n={};for(let l=0;l<t.length;l++)o[t[l].id]=!0;for(let l=0;l<r.length;l++){let u=r[l],c=u.inputs;for(let p in c){let m=c[p],f=!1;for(let h=0;h<t.length;h++)if(o[m.id]){u.outputs.forEach(g=>o[g.id]=!0),f=!0,n[u.id]=!0;break}if(f)break}}let s={};s[e.id]=!0;let i={};for(let l=r.length-1;l>=0;l--){let u=r[l],c=u.inputs;for(let p=0;p<u.outputs.length;p++)if(s[u.outputs[p].id]){for(let m in c)s[c[m].id]=!0,i[u.id]=!0;break}}let a=[];for(let l=0;l<r.length;l++){let u=r[l];if(n[u.id]&&i[u.id]){let c={};for(let m in u.inputs){let f=u.inputs[m];o[f.id]&&(c[m]=f)}let p=Object.assign({},u);p.inputs=c,p.outputs=u.outputs,a.push(p)}}return a}function AN(r,t,e,o){for(let n=t.length-1;n>=0;n--){let s=t[n],i=[];if(s.outputs.forEach(l=>{let u=r[l.id];u!=null?i.push(u):i.push(null)}),s.gradient==null)throw new Error(`Cannot compute gradient: gradient function not found for ${s.kernelName}.`);let a=s.gradient(i);for(let l in s.inputs){if(!(l in a))throw new Error(`Cannot backprop through input ${l}. Available gradients found: ${Object.keys(a)}.`);let u=e(()=>a[l]());if(u.dtype!=="float32")throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input ${l} must have 'float32' dtype, but has '${u.dtype}'`);let c=s.inputs[l];if(!eo(u.shape,c.shape))throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input '${l}' has shape '${u.shape}', which does not match the shape of the input '${c.shape}'`);if(r[c.id]==null)r[c.id]=u;else{let p=r[c.id];r[c.id]=o(p,u),p.dispose()}}}}var DN=20,dm=3,vw=7;function RN(r,t,e,o){let n=gn(t),s=HP(r,t,e,n),i=t.length,a=Hh(r,t,e,n,s),l=["Tensor"];return o&&(l.push(`  dtype: ${e}`),l.push(`  rank: ${i}`),l.push(`  shape: [${t}]`),l.push("  values:")),l.push(a.map(u=>"    "+u).join(`
`)),l.join(`
`)}function HP(r,t,e,o){let n=Pt(t),s=o[o.length-1],i=new Array(s).fill(0),a=t.length,l=e==="complex64"?xm(r):r;if(a>1)for(let u=0;u<n/s;u++){let c=u*s;for(let p=0;p<s;p++)i[p]=Math.max(i[p],gm(l[c+p],0,e).length)}return i}function gm(r,t,e){let o;return Array.isArray(r)?o=`${parseFloat(r[0].toFixed(vw))} + ${parseFloat(r[1].toFixed(vw))}j`:uu(r)?o=`'${r}'`:e==="bool"?o=FN(r):o=parseFloat(r.toFixed(vw)).toString(),Xa(o,t)}function FN(r){return r===0?"false":"true"}function Hh(r,t,e,o,n,s=!0){let i=e==="complex64"?2:1,a=t[0],l=t.length;if(l===0){if(e==="complex64"){let g=xm(r);return[gm(g[0],0,e)]}return e==="bool"?[FN(r[0])]:[r[0].toString()]}if(l===1){if(a>DN){let d=dm*i,x=Array.from(r.slice(0,d)),b=Array.from(r.slice((a-dm)*i,a*i));return e==="complex64"&&(x=xm(x),b=xm(b)),["["+x.map((S,w)=>gm(S,n[w],e)).join(", ")+", ..., "+b.map((S,w)=>gm(S,n[a-dm+w],e)).join(", ")+"]"]}return["["+(e==="complex64"?xm(r):Array.from(r)).map((d,x)=>gm(d,n[x],e)).join(", ")+"]"]}let u=t.slice(1),c=o.slice(1),p=o[0]*i,m=[];if(a>DN){for(let g=0;g<dm;g++){let d=g*p,x=d+p;m.push(...Hh(r.slice(d,x),u,e,c,n,!1))}m.push("...");for(let g=a-dm;g<a;g++){let d=g*p,x=d+p;m.push(...Hh(r.slice(d,x),u,e,c,n,g===a-1))}}else for(let g=0;g<a;g++){let d=g*p,x=d+p;m.push(...Hh(r.slice(d,x),u,e,c,n,g===a-1))}let f=l===2?",":"";m[0]="["+(a>0?m[0]+f:"");for(let g=1;g<m.length-1;g++)m[g]=" "+m[g]+f;let h=`,
`;for(let g=2;g<l;g++)h+=`
`;return m[m.length-1]=" "+m[m.length-1]+"]"+(s?"":h),m}function xm(r){let t=[];for(let e=0;e<r.length;e+=2)t.push([r[e],r[e+1]]);return t}var Wt=class{constructor(t,e,o){if(this.dtype=e,this.shape=t.slice(),this.size=Pt(t),o!=null){let n=o.length;E(n===this.size,()=>`Length of values '${n}' does not match the size inferred by the shape '${this.size}'.`)}if(e==="complex64")throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=o||zh(e,this.size),this.strides=gn(t)}set(t,...e){e.length===0&&(e=[0]),E(e.length===this.rank,()=>`The number of provided coordinates (${e.length}) must match the rank (${this.rank})`);let o=this.locToIndex(e);this.values[o]=t}get(...t){t.length===0&&(t=[0]);let e=0;for(let n of t){if(n<0||n>=this.shape[e]){let s=`Requested out of range element at ${t}.   Buffer shape=${this.shape}`;throw new Error(s)}e++}let o=t[t.length-1];for(let n=0;n<t.length-1;++n)o+=this.strides[n]*t[n];return this.values[o]}locToIndex(t){if(this.rank===0)return 0;if(this.rank===1)return t[0];let e=t[t.length-1];for(let o=0;o<t.length-1;++o)e+=this.strides[o]*t[o];return e}indexToLoc(t){if(this.rank===0)return[];if(this.rank===1)return[t];let e=new Array(this.shape.length);for(let o=0;o<e.length-1;++o)e[o]=Math.floor(t/this.strides[o]),t-=e[o]*this.strides[o];return e[e.length-1]=t,e}get rank(){return this.shape.length}toTensor(){return Jo().makeTensor(this.values,this.shape,this.dtype)}},Jo=null,Sc=null,KP=null;function _N(r){Jo=r}function ON(r){Sc=r}function LN(r){KP=r}var At=class{constructor(t,e,o,n){this.kept=!1,this.isDisposedInternal=!1,this.shape=t.slice(),this.dtype=e||"float32",this.size=Pt(t),this.strides=gn(t),this.dataId=o,this.id=n,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){let t=await this.data();return Sc.buffer(this.shape,this.dtype,t)}bufferSync(){return Sc.buffer(this.shape,this.dtype,this.dataSync())}async array(){let t=await this.data();return ja(this.shape,t,this.dtype==="complex64")}arraySync(){return ja(this.shape,this.dataSync(),this.dtype==="complex64")}async data(){this.throwIfDisposed();let t=Jo().read(this.dataId);if(this.dtype==="string"){let e=await t;try{return e.map(o=>Cc(o))}catch{throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return t}dataToGPU(t){return this.throwIfDisposed(),Jo().readToGPU(this.dataId,t)}dataSync(){this.throwIfDisposed();let t=Jo().readSync(this.dataId);if(this.dtype==="string")try{return t.map(e=>Cc(e))}catch{throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return t}async bytes(){this.throwIfDisposed();let t=await Jo().read(this.dataId);return this.dtype==="string"?t:new Uint8Array(t.buffer)}dispose(){this.isDisposed||(Jo().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(t=!1){return Sc.print(this,t)}clone(){return this.throwIfDisposed(),Sc.clone(this)}toString(t=!1){let e=this.dataSync();return RN(e,this.shape,this.dtype,t)}cast(t){return this.throwIfDisposed(),Sc.cast(this,t)}variable(t=!0,e,o){return this.throwIfDisposed(),Jo().makeVariable(this,t,e,o)}};Object.defineProperty(At,Symbol.hasInstance,{value:r=>!!r&&r.data!=null&&r.dataSync!=null&&r.throwIfDisposed!=null});function _(){return lm("Tensor",()=>At)}_();var Gs=class extends At{constructor(t,e,o,n){super(t.shape,t.dtype,t.dataId,n),this.trainable=e,this.name=o}assign(t){if(t.dtype!==this.dtype)throw new Error(`dtype of the new value (${t.dtype}) and previous value (${this.dtype}) must match`);if(!eo(t.shape,this.shape))throw new Error(`shape of the new value (${t.shape}) and previous value (${this.shape}) must match`);Jo().disposeTensor(this),this.dataId=t.dataId,Jo().incRef(this,null)}dispose(){Jo().disposeVariable(this),this.isDisposedInternal=!0}};Object.defineProperty(Gs,Symbol.hasInstance,{value:r=>r instanceof At&&r.assign!=null&&r.assign instanceof Function});var $o={};qt($o,{assertTypesMatch:()=>Aw,getTensorsInContainer:()=>ym,isTensorInList:()=>jP,makeTypesMatch:()=>_t});var Tw;(function(r){r.R0="R0",r.R1="R1",r.R2="R2",r.R3="R3",r.R4="R4",r.R5="R5",r.R6="R6"})(Tw||(Tw={}));var Iw;(function(r){r.float32="float32",r.int32="int32",r.bool="int32",r.complex64="complex64"})(Iw||(Iw={}));var kw;(function(r){r.float32="float32",r.int32="int32",r.bool="bool",r.complex64="complex64"})(kw||(kw={}));var Ew;(function(r){r.float32="float32",r.int32="float32",r.bool="float32",r.complex64="complex64"})(Ew||(Ew={}));var $w;(function(r){r.float32="complex64",r.int32="complex64",r.bool="complex64",r.complex64="complex64"})($w||($w={}));var qP={float32:Ew,int32:Iw,bool:kw,complex64:$w};function Le(r,t){if(r==="string"||t==="string"){if(r==="string"&&t==="string")return"string";throw new Error(`Can not upcast ${r} with ${t}`)}return qP[r][t]}function hl(r){return Le(r,"int32")}function Kh(r){return r!=null&&typeof r=="object"&&"texture"in r&&r.texture instanceof WebGLTexture}function qh(r){return typeof GPUBuffer<"u"&&r!=null&&typeof r=="object"&&"buffer"in r&&r.buffer instanceof GPUBuffer}function _t(r,t){if(r.dtype===t.dtype)return[r,t];let e=Le(r.dtype,t.dtype);return[r.cast(e),t.cast(e)]}function Aw(r,t){E(r.dtype===t.dtype,()=>`The dtypes of the first(${r.dtype}) and second(${t.dtype}) input must match`)}function jP(r,t){return t.some(e=>e.id===r.id)}function ym(r){let t=[];return PN(r,t,new Set),t}function PN(r,t,e){if(r==null)return;if(r instanceof At){t.push(r);return}if(!XP(r))return;let o=r;for(let n in o){let s=o[n];e.has(s)||(e.add(s),PN(s,t,e))}}function XP(r){return Array.isArray(r)||typeof r=="object"}function Dw(r){return r.kernelName!=null}var jh=class{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map(t=>t.name)))}}}dispose(){for(let t in this.registeredVariables)this.registeredVariables[t].dispose()}},pa=class{constructor(t){this.ENV=t,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new jh}async ready(){if(this.pendingBackendInit!=null)return this.pendingBackendInit.then(()=>{});if(this.backendInstance!=null)return;let t=this.getSortedBackends();for(let e=0;e<t.length;e++){let o=t[e];if(await this.initializeBackend(o).success){await this.setBackend(o);return}}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(this.pendingBackendInit!=null)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(this.backendInstance==null){let{name:t,asyncInit:e}=this.initializeBackendsAndReturnBest();if(e)throw new Error(`The highest priority backend '${t}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(t)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(t){if(!(t in this.registry))if(t in this.registryFactory){let{asyncInit:e}=this.initializeBackend(t);if(e)return null}else return null;return this.registry[t]}findBackendFactory(t){return t in this.registryFactory?this.registryFactory[t].factory:null}registerBackend(t,e,o=1){return t in this.registryFactory?(Cn(`${t} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[t]={factory:e,priority:o},!0)}async setBackend(t){if(this.registryFactory[t]==null)throw new Error(`Backend name '${t}' not found in registry`);if(this.backendName=t,this.registry[t]==null){this.backendInstance=null;let{success:e,asyncInit:o}=this.initializeBackend(t);if(!(o?await e:e))return!1}return this.backendInstance=this.registry[t],this.setupRegisteredKernels(),this.profiler=new Uh(this.backendInstance),!0}setupRegisteredKernels(){yw(this.backendName).forEach(e=>{e.setupFunc!=null&&e.setupFunc(this.backendInstance)})}disposeRegisteredKernels(t){yw(t).forEach(o=>{o.disposeFunc!=null&&o.disposeFunc(this.registry[t])})}initializeBackend(t){let e=this.registryFactory[t];if(e==null)throw new Error(`Cannot initialize backend ${t}, no registration found.`);try{let o=e.factory();if(o&&!(o instanceof jn)&&typeof o.then=="function"){let n=++this.pendingBackendInitId,s=o.then(i=>n<this.pendingBackendInitId?!1:(this.registry[t]=i,this.pendingBackendInit=null,!0)).catch(i=>(n<this.pendingBackendInitId||(this.pendingBackendInit=null,Cn(`Initialization of backend ${t} failed`),Cn(i.stack||i.message)),!1));return this.pendingBackendInit=s,{success:s,asyncInit:!0}}else return this.registry[t]=o,{success:!0,asyncInit:!1}}catch(o){return Cn(`Initialization of backend ${t} failed`),Cn(o.stack||o.message),{success:!1,asyncInit:!1}}}removeBackend(t){if(!(t in this.registryFactory))throw new Error(`${t} backend not found in registry`);this.backendName===t&&this.pendingBackendInit!=null&&this.pendingBackendInitId++,t in this.registry&&(this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t]),delete this.registryFactory[t],this.backendName===t&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(Object.keys(this.registryFactory).length===0)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((t,e)=>this.registryFactory[e].priority-this.registryFactory[t].priority)}initializeBackendsAndReturnBest(){let t=this.getSortedBackends();for(let e=0;e<t.length;e++){let o=t[e],{success:n,asyncInit:s}=this.initializeBackend(o);if(s||n)return{name:o,asyncInit:s}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(t,e){let o=this.state.tensorInfo.get(e),n=o.backend,s=this.readSync(e),i=n.refCount(e);n.disposeData(e,!0),o.backend=t,t.move(e,s,o.shape,o.dtype,i),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(t,e){let o=null;if(e==null){if(typeof t!="function")throw new Error("Please provide a function to tidy()");e=t}else{if(typeof t!="string"&&!(t instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if(typeof e!="function")throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");o=t}let n;return this.scopedRun(()=>this.startScope(o),()=>this.endScope(n),()=>(n=e(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n))}scopedRun(t,e,o){t();try{let n=o();return e(),n}catch(n){throw e(),n}}nextTensorId(){return pa.nextTensorId++}nextVariableId(){return pa.nextVariableId++}clone(t){let e=k.runKernel(yn,{x:t}),o={x:t},n=i=>({x:()=>{let a="float32",l={x:i},u={dtype:a};return k.runKernel(xn,l,u)}}),s=[];return this.addTapeNode(this.state.activeScope.name,o,[e],n,s,{}),e}runKernel(t,e,o){if(this.backendName==null&&this.backend,!(fm(t,this.backendName)!=null))throw new Error(`Kernel '${t}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:t,inputs:e,attrs:o})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(t,e,o){let n=this.backend.numDataIds(),s=0;o.forEach(l=>{s+=l.dtype==="complex64"?3:1});let i=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],a=n-e-s-i;if(a>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${a} data ids) after running '${t}'`)}runKernelFunc(t){let e,o=[],n=this.isTapeOn(),s=this.state.numBytes,i=this.state.numTensors;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);let a;this.backendName==null&&this.backend;let l,u=Dw(t)?t.kernelName:this.state.activeScope!=null?this.state.activeScope.name:"";if(Dw(t)){let{kernelName:h,inputs:g,attrs:d}=t;this.backendName==null&&this.backend;let x=fm(h,this.backendName);E(x!=null,()=>`Cannot find registered kernel '${h}' for backend '${this.backendName}'`),a=()=>{let b=this.backend.numDataIds();l=x.kernelFunc({inputs:g,attrs:d,backend:this.backend});let S=Array.isArray(l)?l:[l];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(h,b,S);let w=S.map(T=>T.rank!=null?T:this.makeTensorFromTensorInfo(T));if(n){let T=this.getTensorsForGradient(h,g,w);o=this.saveTensorsForBackwardMode(T)}return w}}else{let{forwardFunc:h}=t,g=d=>{n&&(o=d.map(x=>this.keep(this.clone(x))))};a=()=>{let d=this.backend.numDataIds();l=this.tidy(()=>h(this.backend,g));let x=Array.isArray(l)?l:[l];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(u,d,x),x}}let{inputs:c,attrs:p}=t,m=Dw(t)?null:t.backwardsFunc,f;return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{!this.ENV.getBool("DEBUG")&&!this.state.profiling?e=a():(f=this.profiler.profileKernel(u,c,()=>a()),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(f),e=f.outputs)}),n&&this.addTapeNode(u,c,e,m,o,p),this.state.profiling&&this.state.activeProfile.kernels.push({name:u,bytesAdded:this.state.numBytes-s,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-i,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(c).map(h=>c[h]!=null?c[h].shape:null),outputShapes:e.map(h=>h.shape),kernelTimeMs:f.timeMs,extraInfo:f.extraInfo}),Array.isArray(l)?e:e[0]}saveTensorsForBackwardMode(t){return t.map(o=>this.keep(this.clone(o)))}getTensorsForGradient(t,e,o){let n=xw(t);if(n!=null){let s=n.inputsToSave||[],i=n.outputsToSave||[],a;n.saveAllInputs?(E(Array.isArray(e),()=>"saveAllInputs is true, expected inputs to be an array."),a=Object.keys(e).map(u=>e[u])):a=s.map(u=>e[u]);let l=o.filter((u,c)=>i[c]);return a.concat(l)}return[]}makeTensor(t,e,o,n){if(t==null)throw new Error("Values passed to engine.makeTensor() are null");o=o||"float32",n=n||this.backend;let s=t;o==="string"&&uu(t[0])&&(s=t.map(l=>wc(l)));let i=n.write(s,e,o),a=new At(e,o,i,this.nextTensorId());if(this.trackTensor(a,n),o==="string"){let l=this.state.tensorInfo.get(i),u=mw(s);this.state.numBytes+=u-l.bytes,l.bytes=u}return a}makeTensorFromDataId(t,e,o,n){o=o||"float32";let s={dataId:t,shape:e,dtype:o};return this.makeTensorFromTensorInfo(s,n)}makeTensorFromTensorInfo(t,e){let{dataId:o,shape:n,dtype:s}=t,i=new At(n,s,o,this.nextTensorId());return this.trackTensor(i,e),i}makeVariable(t,e=!0,o,n){o=o||this.nextVariableId().toString(),n!=null&&n!==t.dtype&&(t=t.cast(n));let s=new Gs(t,e,o,this.nextTensorId());if(this.state.registeredVariables[s.name]!=null)throw new Error(`Variable with name ${s.name} was already registered`);return this.state.registeredVariables[s.name]=s,this.incRef(s,this.backend),s}trackTensor(t,e){this.state.numTensors++,t.dtype==="string"&&this.state.numStringTensors++;let o=0;t.dtype!=="complex64"&&t.dtype!=="string"&&(o=t.size*lu(t.dtype)),this.state.numBytes+=o,this.state.tensorInfo.has(t.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(t.dataId,{backend:e||this.backend,dtype:t.dtype,shape:t.shape,bytes:o})),t instanceof Gs||this.track(t)}incRef(t,e){this.trackTensor(t,e),this.backend.incRef(t.dataId)}removeDataId(t,e){this.state.tensorInfo.has(t)&&this.state.tensorInfo.get(t).backend===e&&(this.state.tensorInfo.delete(t),this.state.numDataBuffers--)}disposeTensor(t){if(!this.state.tensorInfo.has(t.dataId))return;let e=this.state.tensorInfo.get(t.dataId);if(this.state.numTensors--,t.dtype==="string"&&(this.state.numStringTensors--,this.state.numBytes-=e.bytes),t.dtype!=="complex64"&&t.dtype!=="string"){let o=t.size*lu(t.dtype);this.state.numBytes-=o}e.backend.disposeData(t.dataId)&&this.removeDataId(t.dataId,e.backend)}disposeVariables(){for(let t in this.state.registeredVariables){let e=this.state.registeredVariables[t];this.disposeVariable(e)}}disposeVariable(t){this.disposeTensor(t),this.state.registeredVariables[t.name]!=null&&delete this.state.registeredVariables[t.name]}memory(){let t=this.backend.memory();return t.numTensors=this.state.numTensors,t.numDataBuffers=this.state.numDataBuffers,t.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(t.unreliable=!0,t.reasons==null&&(t.reasons=[]),t.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),t}async profile(t){this.state.profiling=!0;let e=this.state.numBytes,o=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await t(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map(n=>n.totalBytesSnapshot)),this.state.activeProfile.newBytes=this.state.numBytes-e,this.state.activeProfile.newTensors=this.state.numTensors-o;for(let n of this.state.activeProfile.kernels)n.kernelTimeMs=await n.kernelTimeMs,n.extraInfo=await n.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&this.state.kernelDepth===0}addTapeNode(t,e,o,n,s,i){let a={id:this.state.nextTapeNodeId++,kernelName:t,inputs:e,outputs:o,saved:s},l=xw(t);l!=null&&(n=l.gradFunc),n!=null&&(a.gradient=u=>(u=u.map((c,p)=>{if(c==null){let m=o[p],f=mu(m.size,m.dtype);return this.makeTensor(f,m.shape,m.dtype)}return c}),n(u.length>1?u:u[0],s,i))),this.state.activeTape.push(a)}keep(t){return t.kept=!0,t}startTape(){this.state.gradientDepth===0&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(t){let e={track:[],name:"unnamed scope",id:this.state.nextScopeId++};t&&(e.name=t),this.state.scopeStack.push(e),this.state.activeScope=e}endScope(t){let e=ym(t),o=new Set(e.map(s=>s.id));for(let s=0;s<this.state.activeScope.track.length;s++){let i=this.state.activeScope.track[s];!i.kept&&!o.has(i.id)&&i.dispose()}let n=this.state.scopeStack.pop();this.state.activeScope=this.state.scopeStack.length===0?null:this.state.scopeStack[this.state.scopeStack.length-1],e.forEach(s=>{!s.kept&&s.scopeId===n.id&&this.track(s)})}gradients(t,e,o,n=!1){if(E(e.length>0,()=>"gradients() received an empty list of xs."),o!=null&&o.dtype!=="float32")throw new Error(`dy must have 'float32' dtype, but has '${o.dtype}'`);let s=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",t));E(s instanceof At,()=>"The result y returned by f() must be a tensor.");let i=$N(this.state.activeTape,e,s);if(!n&&i.length===0&&e.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{let a={};a[s.id]=o??YP(s.shape),AN(a,i,u=>this.tidy(u),ZP);let l=e.map(u=>a[u.id]);return this.state.gradientDepth===0&&(this.state.activeTape.forEach(u=>{for(let c of u.saved)c.dispose()}),this.state.activeTape=null),{value:s,grads:l}})}customGrad(t){return E(cu(t),()=>"The f passed in customGrad(f) must be a function."),(...e)=>{E(e.every(a=>a instanceof At),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");let o,n={};e.forEach((a,l)=>{n[l]=a});let s=(a,l)=>(o=t(...e,l),E(o.value instanceof At,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),E(cu(o.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),o.value),i=(a,l)=>{let u=o.gradFunc(a,l),c=Array.isArray(u)?u:[u];E(c.length===e.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),E(c.every(m=>m instanceof At),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");let p={};return c.forEach((m,f)=>{p[f]=()=>m}),p};return this.runKernelFunc({forwardFunc:s,backwardsFunc:i,inputs:n})}}readSync(t){return this.state.tensorInfo.get(t).backend.readSync(t)}read(t){return this.state.tensorInfo.get(t).backend.read(t)}readToGPU(t,e){return this.state.tensorInfo.get(t).backend.readToGPU(t,e)}async time(t){let e=fl(),o=await this.backend.time(t);return o.wallMs=fl()-e,o}track(t){return this.state.activeScope!=null&&(t.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(t)),t}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new jh;for(let t in this.registry)this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}};pa.nextTensorId=0;pa.nextVariableId=0;function YP(r){let t=im(Pt(r),"float32");return k.makeTensor(t,r,"float32")}function Rw(){let r=dw();if(r._tfengine==null){let t=new am(r);r._tfengine=new pa(t)}return uN(r._tfengine.ENV),_N(()=>r._tfengine),r._tfengine}var k=Rw();function ZP(r,t){let e={a:r,b:t};return k.runKernel(Yo,e)}var ma={};qt(ma,{isBrowser:()=>_w,isMobile:()=>tz,mockIsMobile:()=>QP});function JP(){return typeof navigator<"u"&&navigator!=null}var Fw;function QP(r){Fw=r}function tz(r){if(Fw!==void 0)return Fw;if(r||JP()){if(r||(r=navigator),r.product==="ReactNative")return!0;let t=r.userAgent||r.vendor||(typeof window<"u"?window.opera:"");if(!t){let e=r;return e.userAgentData&&e.userAgentData.mobile}return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function _w(){return typeof window<"u"&&window.document!=null||typeof WorkerGlobalScope<"u"}var Br=z();Br.registerFlag("DEBUG",()=>!1,r=>{r&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")});Br.registerFlag("IS_BROWSER",()=>_w());Br.registerFlag("IS_NODE",()=>typeof process<"u"&&typeof process.versions<"u"&&typeof process.versions.node<"u");Br.registerFlag("IS_CHROME",()=>typeof navigator<"u"&&navigator!=null&&navigator.userAgent!=null&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor));Br.registerFlag("IS_SAFARI",()=>typeof navigator<"u"&&navigator!=null&&navigator.userAgent!=null&&/Safari/.test(navigator.userAgent)&&/Apple/.test(navigator.vendor));Br.registerFlag("PROD",()=>!1);Br.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>Br.getBool("DEBUG"));Br.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0);Br.registerFlag("IS_TEST",()=>!1);Br.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",()=>Br.getBool("DEBUG"));Br.registerFlag("WRAP_TO_IMAGEBITMAP",()=>!1);Br.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",()=>!1);Br.registerFlag("USE_SETTIMEOUTCUSTOM",()=>!1);function Vr(r,t){let e=r;if(wr(r))return t==="string"?[]:[r.length];if(Kh(r)){let n=r.channels||"RGBA";return[r.height,r.width*n.length]}else if(qh(r))return[r.buffer.size/(t==null?4:lu(t))];if(!Array.isArray(r))return[];let o=[];for(;Array.isArray(e)||wr(e)&&t!=="string";)o.push(e.length),e=e[0];return Array.isArray(r)&&z().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&MN(r,o,[]),o}function MN(r,t,e){if(e=e||[],!Array.isArray(r)&&!wr(r)){E(t.length===0,()=>`Element arr[${e.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`);return}E(t.length>0,()=>`Element arr[${e.join("][")}] should be a primitive, but is an array of ${r.length} elements`),E(r.length===t[0],()=>`Element arr[${e.join("][")}] should have ${t[0]} elements, but has ${r.length} elements`);let o=t.slice(1);for(let n=0;n<r.length;++n)MN(r[n],o,e.concat(n))}function zN(r,t,e,o){if(r!=="string_or_numeric"){if(r==null)throw new Error("Expected dtype cannot be null.");if(r!=="numeric"&&r!==t||r==="numeric"&&t==="string")throw new Error(`Argument '${e}' passed to '${o}' must be ${r} tensor, but got ${t} tensor`)}}function N(r,t,e,o="numeric"){if(r instanceof At)return zN(o,r.dtype,t,e),r;let n=di(r);if(n!=="string"&&["bool","int32","float32"].indexOf(o)>=0&&(n=o),zN(o,n,t,e),r==null||!wr(r)&&!Array.isArray(r)&&typeof r!="number"&&typeof r!="boolean"&&typeof r!="string"){let l=r==null?"null":r.constructor.name;throw new Error(`Argument '${t}' passed to '${e}' must be a Tensor or TensorLike, but got '${l}'`)}let s=Vr(r,n);!wr(r)&&!Array.isArray(r)&&(r=[r]);let a=n!=="string"?bc(r,n):ca(r,[],!0);return k.makeTensor(a,s,n)}function dl(r,t,e,o="numeric"){if(!Array.isArray(r))throw new Error(`Argument ${t} passed to ${e} must be a \`Tensor[]\` or \`TensorLike[]\``);return r.map((s,i)=>N(s,`${t}[${i}]`,e,o))}var Ow="__op";function v(r){let t=Object.keys(r);if(t.length!==1)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let e=t[0],o=r[e];e.endsWith("_")&&(e=e.substring(0,e.length-1)),e=e+Ow;let n=(...s)=>{k.startScope(e);try{let i=o(...s);return Ya(i)&&console.error("Cannot return a Promise inside of tidy."),k.endScope(i),i}catch(i){throw k.endScope(null),i}};return Object.defineProperty(n,"name",{value:e,configurable:!0}),n}function ez(r,t){let e=N(r,"real","complex"),o=N(t,"imag","complex");Te(e.shape,o.shape,`real and imag shapes, ${e.shape} and ${o.shape}, must match in call to tf.complex().`);let n={real:e,imag:o};return k.runKernel(bu,n)}var Gr=v({complex_:ez});function Er(r,t,e,o){if(o==null)o=di(r);else if(o==="complex64")throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(qh(r)||Kh(r)){if(o!=="float32"&&o!=="int32")throw new Error(`Creating tensor from GPU data only supports 'float32'|'int32' dtype, while the dtype is ${o}.`);return k.backend.createTensorFromGPUData(r,t||e,o)}if(!wr(r)&&!Array.isArray(r)&&typeof r!="number"&&typeof r!="boolean"&&typeof r!="string")throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(t!=null){he(t);let n=Pt(t),s=Pt(e);E(n===s,()=>`Based on the provided shape, [${t}], the tensor should have ${n} values but has ${s}`);for(let i=0;i<e.length;++i){let a=e[i],l=i===e.length-1?a!==Pt(t.slice(i)):!0;E(e[i]===t[i]||!l,()=>`Error creating a new Tensor. Inferred shape (${e}) does not match the provided shape (${t}). `)}}return!wr(r)&&!Array.isArray(r)&&(r=[r]),t=t||e,r=o!=="string"?bc(r,o):ca(r,[],!0),k.makeTensor(r,t,o)}function He(r,t,e){let o=Vr(r,e);return Er(r,t,o,e)}var bm={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};var Xh=4;async function VN(r,t){let e=[],o=[],n=Array.isArray(r)?r.map(i=>i.name):Object.keys(r);for(let i=0;i<n.length;++i){let a=n[i],l=Array.isArray(r)?r[i].tensor:r[a];if(l.dtype!=="float32"&&l.dtype!=="int32"&&l.dtype!=="bool"&&l.dtype!=="string"&&l.dtype!=="complex64")throw new Error(`Unsupported dtype in weight '${a}': ${l.dtype}`);let u={name:a,shape:l.shape,dtype:l.dtype};if(l.dtype==="string"){let c=new Promise(async p=>{let m=await l.bytes(),f=m.reduce((d,x)=>d+x.length,0)+Xh*m.length,h=new Uint8Array(f),g=0;for(let d=0;d<m.length;d++){let x=m[d],b=new Uint8Array(new Uint32Array([x.length]).buffer);h.set(b,g),g+=Xh,h.set(x,g),g+=x.length}p(h)});o.push(c)}else o.push(l.data());t!=null&&(u.group=t),e.push(u)}let s=await Promise.all(o);return{data:rz(s),specs:e}}function Yh(r,t){let e={},o,n=0;for(let s of t){let i=s.name,a=s.dtype,l=s.shape,u=Pt(l),c;if("quantization"in s){let p=s.quantization;if(p.dtype==="uint8"||p.dtype==="uint16"){if(!("min"in p&&"scale"in p))throw new Error(`Weight ${s.name} with quantization ${p.dtype} doesn't have corresponding metadata min and scale.`)}else if(p.dtype==="float16"){if(a!=="float32")throw new Error(`Weight ${s.name} is quantized with ${p.dtype} which only supports weights of type float32 not ${a}.`)}else throw new Error(`Weight ${s.name} has unknown quantization dtype ${p.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);let m=bm[p.dtype],f=r.slice(n,n+u*m),h=p.dtype==="uint8"?new Uint8Array(f):new Uint16Array(f);if(a==="float32")if(p.dtype==="uint8"||p.dtype==="uint16"){c=new Float32Array(h.length);for(let g=0;g<h.length;g++){let d=h[g];c[g]=d*p.scale+p.min}}else if(p.dtype==="float16")o===void 0&&(o=iz()),c=o(h);else throw new Error(`Unsupported quantization type ${p.dtype} for weight type float32.`);else if(a==="int32"){if(p.dtype!=="uint8"&&p.dtype!=="uint16")throw new Error(`Unsupported quantization type ${p.dtype} for weight type int32.`);c=new Int32Array(h.length);for(let g=0;g<h.length;g++){let d=h[g];c[g]=Math.round(d*p.scale+p.min)}}else throw new Error(`Unsupported dtype in weight '${i}': ${a}`);n+=u*m}else if(a==="string"){let p=Pt(s.shape);c=[];for(let m=0;m<p;m++){let f=new Uint32Array(r.slice(n,n+Xh))[0];n+=Xh;let h=new Uint8Array(r.slice(n,n+f));c.push(h),n+=f}}else{let p=bm[a],m=r.slice(n,n+u*p);if(a==="float32")c=new Float32Array(m);else if(a==="int32")c=new Int32Array(m);else if(a==="bool")c=new Uint8Array(m);else if(a==="complex64"){c=new Float32Array(m);let f=new Float32Array(c.length/2),h=new Float32Array(c.length/2);for(let x=0;x<f.length;x++)f[x]=c[x*2],h[x]=c[x*2+1];let g=He(f,l,"float32"),d=He(h,l,"float32");e[i]=Gr(g,d),g.dispose(),d.dispose()}else throw new Error(`Unsupported dtype in weight '${i}': ${a}`);n+=u*p}a!=="complex64"&&(e[i]=He(c,l,a))}return e}function rz(r){if(r===null)throw new Error(`Invalid input value: ${JSON.stringify(r)}`);let t=0,e=[];r.forEach(s=>{if(t+=s.byteLength,e.push(s.byteLength===s.buffer.byteLength?s:new s.constructor(s)),!(s instanceof Float32Array||s instanceof Int32Array||s instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${s.constructor.name}`)});let o=new Uint8Array(t),n=0;return e.forEach(s=>{o.set(new Uint8Array(s.buffer),n),n+=s.byteLength}),o.buffer}var Lw=typeof Buffer<"u"&&(typeof Blob>"u"||typeof atob>"u"||typeof btoa>"u");function BN(r){return Lw?Buffer.byteLength(r):new Blob([r]).size}function GN(r){if(Lw)return Buffer.from(r).toString("base64");let t=new Uint8Array(r),e="";for(let o=0,n=t.length;o<n;o++)e+=String.fromCharCode(t[o]);return btoa(e)}function WN(r){if(Lw){let o=Buffer.from(r,"base64");return o.buffer.slice(o.byteOffset,o.byteOffset+o.byteLength)}let t=atob(r),e=new Uint8Array(t.length);for(let o=0;o<t.length;++o)e.set([t.charCodeAt(o)],o);return e.buffer}function Nc(r){if(r.length===1)return r[0];let t=0;r.forEach(n=>{t+=n.byteLength});let e=new Uint8Array(t),o=0;return r.forEach(n=>{e.set(new Uint8Array(n),o),o+=n.byteLength}),e.buffer}function Pw(r){let t="/";for(r=r.trim();r.endsWith(t);)r=r.slice(0,r.length-1);let e=r.split(t);return e[e.length-1]}function Zh(r,t){let e={modelTopology:r.modelTopology,format:r.format,generatedBy:r.generatedBy,convertedBy:r.convertedBy,weightsManifest:t};return r.signature!=null&&(e.signature=r.signature),r.userDefinedMetadata!=null&&(e.userDefinedMetadata=r.userDefinedMetadata),r.modelInitializer!=null&&(e.modelInitializer=r.modelInitializer),r.initializerSignature!=null&&(e.initializerSignature=r.initializerSignature),r.trainingConfig!=null&&(e.trainingConfig=r.trainingConfig),e}function zw(r,t,e){let o={modelTopology:r.modelTopology,format:r.format,generatedBy:r.generatedBy,convertedBy:r.convertedBy};if(r.trainingConfig!=null&&(o.trainingConfig=r.trainingConfig),r.weightsManifest!=null){if(!t)throw new Error("modelJSON has weightsManifest but weightSpecs is null");if(!e)throw new Error("modelJSON has weightsManifest but weightData is null");o.weightSpecs=t,o.weightData=e}return r.signature!=null&&(o.signature=r.signature),r.userDefinedMetadata!=null&&(o.userDefinedMetadata=r.userDefinedMetadata),r.modelInitializer!=null&&(o.modelInitializer=r.modelInitializer),r.initializerSignature!=null&&(o.initializerSignature=r.initializerSignature),o}async function vc(r,t){let e,o;return r.weightsManifest!=null&&([e,o]=await t(r.weightsManifest)),zw(r,e,o)}function Sn(r){if(r.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:r.modelTopology==null?0:BN(JSON.stringify(r.modelTopology)),weightSpecsBytes:r.weightSpecs==null?0:BN(JSON.stringify(r.weightSpecs)),weightDataBytes:r.weightData==null?0:r.weightData.byteLength}}function Jh(r){let t=[];for(let e of r)t.push(...e.weights);return t}function oz(){let r=e=>{let o=e<<13,n=0;for(;!(o&8388608);)n-=8388608,o<<=1;return o&=-8388609,n+=947912704,o|n},t=new Uint32Array(2048);t[0]=0;for(let e=1;e<1024;e++)t[e]=r(e);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}function nz(){let r=new Uint32Array(64);r[0]=0,r[31]=1199570944,r[32]=2147483648,r[63]=3347054592;for(let t=1;t<31;t++)r[t]=t<<23;for(let t=33;t<63;t++)r[t]=2147483648+(t-32<<23);return r}function sz(){let r=new Uint32Array(64);for(let t=0;t<64;t++)r[t]=1024;return r[0]=r[32]=0,r}function iz(){let r=oz(),t=nz(),e=sz();return o=>{let n=new ArrayBuffer(4*o.length),s=new Uint32Array(n);for(let i=0;i<o.length;i++){let a=o[i],l=r[e[a>>10]+(a&1023)]+t[a>>10];s[i]=l}return new Float32Array(n)}}var Qt=class{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return Qt.instance==null&&(Qt.instance=new Qt),Qt.instance}static registerSaveRouter(t){Qt.getInstance().saveRouters.push(t)}static registerLoadRouter(t){Qt.getInstance().loadRouters.push(t)}static getSaveHandlers(t){return Qt.getHandlers(t,"save")}static getLoadHandlers(t,e){return Qt.getHandlers(t,"load",e)}static getHandlers(t,e,o){let n=[];return(e==="load"?Qt.getInstance().loadRouters:Qt.getInstance().saveRouters).forEach(i=>{let a=i(t,o);a!==null&&n.push(a)}),n}},UN=r=>Qt.registerSaveRouter(r),HN=r=>Qt.registerLoadRouter(r),KN=r=>Qt.getSaveHandlers(r),qN=(r,t)=>Qt.getLoadHandlers(r,t);var Mw="tensorflowjs",Bw=1,gl="models_store",fa="model_info_store";function jN(){if(!z().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");let r=typeof window>"u"?self:window,t=r.indexedDB||r.mozIndexedDB||r.webkitIndexedDB||r.msIndexedDB||r.shimIndexedDB;if(t==null)throw new Error("The current browser does not appear to support IndexedDB.");return t}function Vw(r){let t=r.result;t.createObjectStore(gl,{keyPath:"modelPath"}),t.createObjectStore(fa,{keyPath:"modelPath"})}var Nn=class{constructor(t){if(this.indexedDB=jN(),t==null||!t)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=t}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,t)}async load(){return this.databaseAction(this.modelPath)}databaseAction(t,e){return new Promise((o,n)=>{let s=this.indexedDB.open(Mw,Bw);s.onupgradeneeded=()=>Vw(s),s.onsuccess=()=>{let i=s.result;if(e==null){let a=i.transaction(gl,"readonly"),u=a.objectStore(gl).get(this.modelPath);u.onsuccess=()=>{if(u.result==null)return i.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));o(u.result.modelArtifacts)},u.onerror=c=>(i.close(),n(u.error)),a.oncomplete=()=>i.close()}else{let a=Sn(e),l=i.transaction(fa,"readwrite"),u=l.objectStore(fa),c;try{c=u.put({modelPath:this.modelPath,modelArtifactsInfo:a})}catch(m){return n(m)}let p;c.onsuccess=()=>{p=i.transaction(gl,"readwrite");let m=p.objectStore(gl),f;try{f=m.put({modelPath:this.modelPath,modelArtifacts:e,modelArtifactsInfo:a})}catch(h){return n(h)}f.onsuccess=()=>o({modelArtifactsInfo:a}),f.onerror=h=>{u=l.objectStore(fa);let g=u.delete(this.modelPath);g.onsuccess=()=>(i.close(),n(f.error)),g.onerror=d=>(i.close(),n(f.error))}},c.onerror=m=>(i.close(),n(c.error)),l.oncomplete=()=>{p==null?i.close():p.oncomplete=()=>i.close()}}},s.onerror=i=>n(s.error)})}};Nn.URL_SCHEME="indexeddb://";var XN=r=>z().getBool("IS_BROWSER")&&!Array.isArray(r)&&r.startsWith(Nn.URL_SCHEME)?az(r.slice(Nn.URL_SCHEME.length)):null;Qt.registerSaveRouter(XN);Qt.registerLoadRouter(XN);function az(r){return new Nn(r)}function lz(r){return r.startsWith(Nn.URL_SCHEME)?r.slice(Nn.URL_SCHEME.length):r}var Qh=class{constructor(){this.indexedDB=jN()}async listModels(){return new Promise((t,e)=>{let o=this.indexedDB.open(Mw,Bw);o.onupgradeneeded=()=>Vw(o),o.onsuccess=()=>{let n=o.result,s=n.transaction(fa,"readonly"),a=s.objectStore(fa).getAll();a.onsuccess=()=>{let l={};for(let u of a.result)l[u.modelPath]=u.modelArtifactsInfo;t(l)},a.onerror=l=>(n.close(),e(a.error)),s.oncomplete=()=>n.close()},o.onerror=n=>e(o.error)})}async removeModel(t){return t=lz(t),new Promise((e,o)=>{let n=this.indexedDB.open(Mw,Bw);n.onupgradeneeded=()=>Vw(n),n.onsuccess=()=>{let s=n.result,i=s.transaction(fa,"readwrite"),a=i.objectStore(fa),l=a.get(t),u;l.onsuccess=()=>{if(l.result==null)return s.close(),o(new Error(`Cannot find model with path '${t}' in IndexedDB.`));{let c=a.delete(t),p=()=>{u=s.transaction(gl,"readwrite");let f=u.objectStore(gl).delete(t);f.onsuccess=()=>e(l.result.modelArtifactsInfo),f.onerror=h=>o(l.error)};c.onsuccess=p,c.onerror=m=>(p(),s.close(),o(l.error))}},l.onerror=c=>(s.close(),o(l.error)),i.oncomplete=()=>{u==null?s.close():u.oncomplete=()=>s.close()}},n.onerror=s=>o(n.error)})}};var Ws="/",Tc="tensorflowjs_models",YN="info",uz="model_topology",cz="weight_specs",pz="weight_data",mz="model_metadata";function ZN(r){return{info:[Tc,r,YN].join(Ws),topology:[Tc,r,uz].join(Ws),weightSpecs:[Tc,r,cz].join(Ws),weightData:[Tc,r,pz].join(Ws),modelMetadata:[Tc,r,mz].join(Ws)}}function JN(r){for(let t of Object.values(r))window.localStorage.removeItem(t)}function fz(r){let t=r.split(Ws);if(t.length<3)throw new Error(`Invalid key format: ${r}`);return t.slice(1,t.length-1).join(Ws)}function hz(r){return r.startsWith(vn.URL_SCHEME)?r.slice(vn.URL_SCHEME.length):r}var vn=class{constructor(t){if(!z().getBool("IS_BROWSER")||typeof window>"u"||typeof window.localStorage>"u")throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,t==null||!t)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=t,this.keys=ZN(this.modelPath)}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{let e=JSON.stringify(t.modelTopology),o=JSON.stringify(t.weightSpecs),n=Sn(t);try{this.LS.setItem(this.keys.info,JSON.stringify(n)),this.LS.setItem(this.keys.topology,e),this.LS.setItem(this.keys.weightSpecs,o),this.LS.setItem(this.keys.weightData,GN(t.weightData));let s={format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,signature:t.signature!=null?t.signature:void 0,userDefinedMetadata:t.userDefinedMetadata!=null?t.userDefinedMetadata:void 0,modelInitializer:t.modelInitializer!=null?t.modelInitializer:void 0,initializerSignature:t.initializerSignature!=null?t.initializerSignature:void 0,trainingConfig:t.trainingConfig!=null?t.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(s)),{modelArtifactsInfo:n}}catch{throw JN(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${n.modelTopologyBytes}, weightSpecsBytes=${n.weightSpecsBytes}, weightDataBytes=${n.weightDataBytes}.`)}}}async load(){let t=JSON.parse(this.LS.getItem(this.keys.info));if(t==null)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if(t.modelTopologyType!=="JSON")throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");let e={},o=JSON.parse(this.LS.getItem(this.keys.topology));if(o==null)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);e.modelTopology=o;let n=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(n==null)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);e.weightSpecs=n;let s=this.LS.getItem(this.keys.modelMetadata);if(s!=null){let a=JSON.parse(s);e.format=a.format,e.generatedBy=a.generatedBy,e.convertedBy=a.convertedBy,a.signature!=null&&(e.signature=a.signature),a.userDefinedMetadata!=null&&(e.userDefinedMetadata=a.userDefinedMetadata),a.modelInitializer!=null&&(e.modelInitializer=a.modelInitializer),a.initializerSignature!=null&&(e.initializerSignature=a.initializerSignature),a.trainingConfig!=null&&(e.trainingConfig=a.trainingConfig)}let i=this.LS.getItem(this.keys.weightData);if(i==null)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return e.weightData=WN(i),e}};vn.URL_SCHEME="localstorage://";var QN=r=>z().getBool("IS_BROWSER")&&!Array.isArray(r)&&r.startsWith(vn.URL_SCHEME)?dz(r.slice(vn.URL_SCHEME.length)):null;Qt.registerSaveRouter(QN);Qt.registerLoadRouter(QN);function dz(r){return new vn(r)}var td=class{constructor(){E(z().getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),E(typeof window>"u"||typeof window.localStorage<"u",()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}async listModels(){let t={},e=Tc+Ws,o=Ws+YN;for(let n=0;n<this.LS.length;++n){let s=this.LS.key(n);if(s.startsWith(e)&&s.endsWith(o)){let i=fz(s);t[i]=JSON.parse(this.LS.getItem(s))}}return t}async removeModel(t){t=hz(t);let e=ZN(t);if(this.LS.getItem(e.info)==null)throw new Error(`Cannot find model at path '${t}'`);let o=JSON.parse(this.LS.getItem(e.info));return JN(e),o}};var Ic="://",or=class{constructor(){this.managers={}}static getInstance(){return or.instance==null&&(or.instance=new or),or.instance}static registerManager(t,e){E(t!=null,()=>"scheme must not be undefined or null."),t.endsWith(Ic)&&(t=t.slice(0,t.indexOf(Ic))),E(t.length>0,()=>"scheme must not be an empty string.");let o=or.getInstance();E(o.managers[t]==null,()=>`A model store manager is already registered for scheme '${t}'.`),o.managers[t]=e}static getManager(t){let e=or.getInstance().managers[t];if(e==null)throw new Error(`Cannot find model manager for scheme '${t}'`);return e}static getSchemes(){return Object.keys(or.getInstance().managers)}};function ed(r){if(r.indexOf(Ic)===-1)throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${or.getSchemes().join(",")}`);return{scheme:r.split(Ic)[0],path:r.split(Ic)[1]}}async function tv(r,t,e=!1){E(r!==t,()=>`Old path and new path are the same: '${r}'`);let o=Qt.getLoadHandlers(r);E(o.length>0,()=>`Copying failed because no load handler is found for source URL ${r}.`),E(o.length<2,()=>`Copying failed because more than one (${o.length}) load handlers for source URL ${r}.`);let n=o[0],s=Qt.getSaveHandlers(t);E(s.length>0,()=>`Copying failed because no save handler is found for destination URL ${t}.`),E(s.length<2,()=>`Copying failed because more than one (${o.length}) save handlers for destination URL ${t}.`);let i=s[0],a=ed(r).scheme,l=ed(r).path,u=a===ed(r).scheme,c=await n.load();e&&u&&await or.getManager(a).removeModel(l);let p=await i.save(c);return e&&!u&&await or.getManager(a).removeModel(l),p.modelArtifactsInfo}async function ev(){let r=or.getSchemes(),t={};for(let e of r){let o=await or.getManager(e).listModels();for(let n in o){let s=e+Ic+n;t[s]=o[n]}}return t}async function rv(r){let t=ed(r);return or.getManager(t.scheme).removeModel(t.path)}async function ov(r,t){return tv(r,t,!1)}async function nv(r,t){return tv(r,t,!0)}var Gw=class{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(t,e){return fetch(t,e)}now(){return performance.now()}encode(t,e){if(e!=="utf-8"&&e!=="utf8")throw new Error(`Browser's encoder only supports utf-8, but got ${e}`);return this.textEncoder==null&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(t)}decode(t,e){return new TextDecoder(e).decode(t)}setTimeoutCustom(t,e){if(typeof window>"u"||!z().getBool("USE_SETTIMEOUTCUSTOM")){setTimeout(t,e);return}this.functionRefs.push(t),setTimeout(()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")},e),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",o=>{if(o.source===window&&o.data.name===this.messageName){o.stopPropagation();let n=this.functionRefs[o.data.index];n(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0)}},!0))}isTypedArray(t){return Vh(t)}};if(z().get("IS_BROWSER")){z().setPlatform("browser",new Gw);try{or.registerManager(vn.URL_SCHEME,new td)}catch{}try{or.registerManager(Nn.URL_SCHEME,new Qh)}catch{}}var gz={importFetch:()=>sv()},Ww;var Uw=class{constructor(){this.util=iv(),this.textEncoder=new this.util.TextEncoder}fetch(t,e){return z().global.fetch!=null?z().global.fetch(t,e):(Ww==null&&(Ww=gz.importFetch()),Ww(t,e))}now(){let t=process.hrtime();return t[0]*1e3+t[1]/1e6}encode(t,e){if(e!=="utf-8"&&e!=="utf8")throw new Error(`Node built-in encoder only supports utf-8, but got ${e}`);return this.textEncoder.encode(t)}decode(t,e){return t.length===0?"":new this.util.TextDecoder(e).decode(t)}isTypedArray(t){return this.util.types.isFloat32Array(t)||this.util.types.isInt32Array(t)||this.util.types.isUint8Array(t)||this.util.types.isUint8ClampedArray(t)}};z().get("IS_NODE")&&!z().get("IS_BROWSER")&&z().setPlatform("node",new Uw);function mt(r,t="float32",e){return t=t||"float32",he(r),new Wt(r,t,e)}function xz(r,t){let e=N(r,"x","cast");if(!pw(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if(t==="string"&&e.dtype!=="string"||t!=="string"&&e.dtype==="string")throw new Error("Only strings can be casted to strings");let o={x:e},n={dtype:t};return k.runKernel(xn,o,n)}var X=v({cast_:xz});function yz(r){let e={x:N(r,"x","clone","string_or_numeric")};return k.runKernel(yn,e)}var $r=v({clone_:yz});function rd(r,t=!1){console.log(r.toString(t))}Rw();var bz={buffer:mt,cast:X,clone:$r,print:rd};ON(bz);function wz(r){z().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(r+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}LN(wz);function Wr(){return k}function xl(){return k.memory()}function M(r,t){return k.tidy(r,t)}function xt(r){ym(r).forEach(e=>e.dispose())}function ue(r){return k.keep(r)}function od(r){return k.setBackend(r)}function av(){return k.ready()}function lv(){return k.backendName}function nd(r,t,e=1){return k.registerBackend(r,t,e)}function uv(){return k.backend}function Cz(r,t){let e=N(r,"a","add"),o=N(t,"b","add");[e,o]=_t(e,o);let n={a:e,b:o};return k.runKernel(Yo,n)}var U=v({add_:Cz});function Sz(r,t){let e=N(r,"a","floorDiv"),o=N(t,"b","floorDiv");[e,o]=_t(e,o);let n={a:e,b:o};return k.runKernel(fs,n)}var kc=v({floorDiv_:Sz});function Nz(r,t){let e=N(r,"a","div"),o=N(t,"b","div");if([e,o]=_t(e,o),e.dtype==="int32"&&o.dtype==="int32")return kc(e,o);let n={a:e,b:o},s={};return k.runKernel(as,n,s)}var ot=v({div_:Nz});function vz(r,t){let e=N(r,"a","mul"),o=N(t,"b","mul");[e,o]=_t(e,o);let n={a:e,b:o};return k.runKernel(Ns,n)}var A=v({mul_:vz});function Tz(r){let t=N(r,"x","abs");if(t.dtype==="complex64"){let e={x:t};return k.runKernel(vi,e)}else{let e={x:t};return k.runKernel(gi,e)}}var ae=v({abs_:Tz});function Iz(r){let e={x:N(r,"x","acos")};return k.runKernel(Yn,e)}var sd=v({acos_:Iz});function kz(r){let e={x:N(r,"x","acosh")};return k.runKernel(Zn,e)}var id=v({acosh_:kz});function Ez(r){E(Array.isArray(r),()=>"The argument passed to tf.addN() must be a list of tensors"),E(r.length>=1,()=>`Must pass at least one tensor to tf.addN(), but got ${r.length}`);let t=r.map((n,s)=>N(n,`tensors${s}`,"addN")),e=t[0];t.forEach(n=>{if(n.dtype!==e.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")}),t.forEach(n=>{if(!eo(n.shape,e.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")});let o=t;return k.runKernel(xi,o)}var cv=v({addN_:Ez});function $z(r,t=null,e=!1){let n={x:N(r,"x","all","bool")},s={axis:t,keepDims:e};return k.runKernel(fu,n,s)}var Ec=v({all_:$z});function Az(r,t=null,e=!1){let n={x:N(r,"x","any","bool")},s={axis:t,keepDims:e};return k.runKernel(hu,n,s)}var yl=v({any_:Az});function Dz(r,t=0){let o={x:N(r,"x","argMax")},n={axis:t};return k.runKernel(yi,o,n)}var Tn=v({argMax_:Dz});function Rz(r,t=0){let o={x:N(r,"x","argMin")},n={axis:t};return k.runKernel(bi,o,n)}var ad=v({argMin_:Rz});function Fz(r){let e={x:N(r,"x","asin")};return k.runKernel(Jn,e)}var ld=v({asin_:Fz});function _z(r){let e={x:N(r,"x","asinh")};return k.runKernel(Qn,e)}var ud=v({asinh_:_z});function Oz(r){let e={x:N(r,"x","atan")};return k.runKernel(ts,e)}var cd=v({atan_:Oz});function Lz(r,t){let e=N(r,"a","atan2"),o=N(t,"b","atan2");[e,o]=_t(e,o);let n={a:e,b:o};return k.runKernel(rs,n)}var pd=v({atan2_:Lz});function Pz(r){let e={x:N(r,"x","atanh")};return k.runKernel(es,e)}var md=v({atanh_:Pz});function zz(r,t,e,o,n="NHWC",s){let i=r[3],a=[...t,i],l=mv(n);return bl(r,a,e,s,o,null,null,l)}function Kw(r,t,e,o,n,s,i="channelsLast"){let[a,l]=wm(t),u;if(i==="channelsLast")u=[a,l,r[3],r[3]];else if(i==="channelsFirst")u=[a,l,r[1],r[1]];else throw new Error(`Unknown dataFormat ${i}`);return bl(r,u,e,o,n,s,!1,i)}function Mz(r,t,e,o,n,s,i="NDHWC"){let[a,l,u]=Hw(t),c,p;if(i==="NDHWC")p="channelsLast",c=[a,l,u,r[4],r[4]];else if(i==="NCDHW")p="channelsFirst",c=[a,l,u,r[1],r[1]];else throw new Error(`Unknown dataFormat ${i}`);return pv(r,c,e,o,n,!1,p,s)}function bl(r,t,e,o,n,s,i=!1,a="channelsLast"){let[l,u,c,p]=[-1,-1,-1,-1];if(a==="channelsLast")[l,u,c,p]=r;else if(a==="channelsFirst")[l,p,u,c]=r;else throw new Error(`Unknown dataFormat ${a}`);let[m,f,,h]=t,[g,d]=wm(e),[x,b]=wm(o),S=$c(m,x),w=$c(f,b),{padInfo:T,outHeight:$,outWidth:R}=Gz(n,u,c,g,d,S,w,s,a),F=i?h*p:h,O;return a==="channelsFirst"?O=[l,F,$,R]:a==="channelsLast"&&(O=[l,$,R,F]),{batchSize:l,dataFormat:a,inHeight:u,inWidth:c,inChannels:p,outHeight:$,outWidth:R,outChannels:F,padInfo:T,strideHeight:g,strideWidth:d,filterHeight:m,filterWidth:f,effectiveFilterHeight:S,effectiveFilterWidth:w,dilationHeight:x,dilationWidth:b,inShape:r,outShape:O,filterShape:t}}function pv(r,t,e,o,n,s=!1,i="channelsLast",a){let[l,u,c,p,m]=[-1,-1,-1,-1,-1];if(i==="channelsLast")[l,u,c,p,m]=r;else if(i==="channelsFirst")[l,m,u,c,p]=r;else throw new Error(`Unknown dataFormat ${i}`);let[f,h,g,,d]=t,[x,b,S]=Hw(e),[w,T,$]=Hw(o),R=$c(f,w),F=$c(h,T),O=$c(g,$),{padInfo:P,outDepth:B,outHeight:V,outWidth:G}=Wz(n,u,c,p,x,b,S,R,F,O,a),H=s?d*m:d,W;return i==="channelsFirst"?W=[l,H,B,V,G]:i==="channelsLast"&&(W=[l,B,V,G,H]),{batchSize:l,dataFormat:i,inDepth:u,inHeight:c,inWidth:p,inChannels:m,outDepth:B,outHeight:V,outWidth:G,outChannels:H,padInfo:P,strideDepth:x,strideHeight:b,strideWidth:S,filterDepth:f,filterHeight:h,filterWidth:g,effectiveFilterDepth:R,effectiveFilterHeight:F,effectiveFilterWidth:O,dilationDepth:w,dilationHeight:T,dilationWidth:$,inShape:r,outShape:W,filterShape:t}}function Bz(r,t,e,o,n){o==null&&(o=qw(r,t,e));let s=r[0],i=r[1],a=Cm((s-t+2*o)/e+1,n),l=Cm((i-t+2*o)/e+1,n);return[a,l]}function Vz(r,t,e,o,n,s){n==null&&(n=qw(r,t[0],o[0]));let i=[0,0,0,e];for(let a=0;a<3;a++)r[a]+2*n>=t[a]&&(i[a]=Cm((r[a]-t[a]+2*n)/o[a]+1,s));return i}function qw(r,t,e,o=1){let n=$c(t,o);return Math.floor((r[0]*(e-1)-e+n)/2)}function wm(r){return typeof r=="number"?[r,r,r]:r.length===2?[r[0],r[1],1]:r}function Hw(r){return typeof r=="number"?[r,r,r]:r}function $c(r,t){return t<=1?r:r+(r-1)*(t-1)}function Gz(r,t,e,o,n,s,i,a,l){let u,c,p;if(typeof r=="number"){u={top:r,bottom:r,left:r,right:r,type:r===0?"VALID":"NUMBER"};let f=Bz([t,e],s,o,r,a);c=f[0],p=f[1]}else if(r==="same"){c=Math.ceil(t/o),p=Math.ceil(e/n);let m=Math.max(0,(c-1)*o+s-t),f=Math.max(0,(p-1)*n+i-e),h=Math.floor(m/2),g=m-h,d=Math.floor(f/2),x=f-d;u={top:h,bottom:g,left:d,right:x,type:"SAME"}}else if(r==="valid")u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-s+1)/o),p=Math.ceil((e-i+1)/n);else if(typeof r=="object"){let m=l==="channelsLast"?r[1][0]:r[2][0],f=l==="channelsLast"?r[1][1]:r[2][1],h=l==="channelsLast"?r[2][0]:r[3][0],g=l==="channelsLast"?r[2][1]:r[3][1];u={top:m,bottom:f,left:h,right:g,type:m===0&&f===0&&h===0&&g===0?"VALID":"EXPLICIT"},c=Cm((t-s+m+f)/o+1,a),p=Cm((e-i+h+g)/n+1,a)}else throw Error(`Unknown padding parameter: ${r}`);return{padInfo:u,outHeight:c,outWidth:p}}function Wz(r,t,e,o,n,s,i,a,l,u,c){let p,m,f,h;if(r==="valid"&&(r=0),typeof r=="number"){p={top:r,bottom:r,left:r,right:r,front:r,back:r,type:r===0?"VALID":"NUMBER"};let d=Vz([t,e,o,1],[a,l,u],1,[n,s,i],r,c);m=d[0],f=d[1],h=d[2]}else if(r==="same"){m=Math.ceil(t/n),f=Math.ceil(e/s),h=Math.ceil(o/i);let g=(m-1)*n+a-t,d=(f-1)*s+l-e,x=(h-1)*i+u-o,b=Math.floor(g/2),S=g-b,w=Math.floor(d/2),T=d-w,$=Math.floor(x/2),R=x-$;p={top:w,bottom:T,left:$,right:R,front:b,back:S,type:"SAME"}}else throw Error(`Unknown padding parameter: ${r}`);return{padInfo:p,outDepth:m,outHeight:f,outWidth:h}}function Cm(r,t){if(!t)return Math.trunc(r);switch(t){case"round":return Math.round(r);case"ceil":return Math.ceil(r);case"floor":return Math.floor(r);default:throw new Error(`Unknown roundingMode ${t}`)}}function yo(r){let[t,e,o]=wm(r);return t===1&&e===1&&o===1}function nr(r,t){return yo(r)||yo(t)}function In(r){return wm(r).every(t=>t>0)}function mv(r){if(r==="NHWC")return"channelsLast";if(r==="NCHW")return"channelsFirst";throw new Error(`Unknown dataFormat ${r}`)}function te(r,t,e){if(e!=null){if(typeof t=="string")throw Error(`Error in ${r}: pad must be an integer when using dimRoundingMode ${e} but got pad ${t}.`);if(typeof t=="number")E(Xn(t),()=>`Error in ${r}: pad must be an integer when using dimRoundingMode ${e} but got pad ${t}.`);else if(typeof t=="object")t.forEach(o=>{o.forEach(n=>{E(Xn(n),()=>`Error in ${r}: pad must be an integer when using dimRoundingMode ${e} but got pad ${n}.`)})});else throw Error(`Error in ${r}: Unknown padding parameter: ${t}`)}}function Uz(r,t){let o={x:N(r,"x","reshape","string_or_numeric")},n={shape:t};return k.runKernel(Yi,o,n)}var D=v({reshape_:Uz});function Hz(r,t,e,o,n){let s=N(r,"x","avgPool","float32"),i=1;E(nr(e,i),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${e} and dilations '${i}'`);let a=s,l=!1;s.rank===3&&(l=!0,a=D(s,[1,s.shape[0],s.shape[1],s.shape[2]])),E(a.rank===4,()=>`Error in avgPool: x must be rank 4 but got rank ${a.rank}.`),te("avgPool",o,n);let u={x:a},c={filterSize:t,strides:e,pad:o,dimRoundingMode:n},p=k.runKernel(wi,u,c);return p=X(p,s.dtype),l?D(p,[p.shape[1],p.shape[2],p.shape[3]]):p}var ha=v({avgPool_:Hz});function Kz(r,t,e,o,n,s="NDHWC"){let i=N(r,"x","avgPool3d","float32"),a=i,l=!1;i.rank===4&&(l=!0,a=D(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),E(a.rank===5,()=>`Error in avgPool3d: x must be rank 5 but got rank ${a.rank}.`),E(s==="NDHWC",()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${s}`),E(typeof e=="number"&&e>0||Array.isArray(e)&&e[0]>0&&e[1]>0&&e[2]>0,()=>`Error in avgPool3d: Stride must be > 0, but got '${e}'`),te("avgPool3d",o,n);let u={x:a},c={filterSize:t,strides:e,pad:o,dimRoundingMode:n,dataFormat:s},p=k.runKernel(Ci,u,c);return p=X(p,a.dtype),l?D(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}var fd=v({avgPool3d_:Kz});function qz(r,t=0){E(r.length>=1,()=>"Pass at least one tensor to concat");let e=dl(r,"tensors","concat","string_or_numeric");if(e[0].dtype==="complex64"&&e.forEach(s=>{if(s.dtype!=="complex64")throw new Error(`Cannot concatenate complex64 tensors with a tensor
          with dtype ${s.dtype}. `)}),e.length===1)return $r(e[0]);let o=e,n={axis:t};return k.runKernel(Ti,o,n)}var Vt=v({concat_:qz});function jz(r,t,e=!1,o=!1){let n=N(r,"a","matMul"),s=N(t,"b","matMul");[n,s]=_t(n,s);let i={a:n,b:s},a={transposeA:e,transposeB:o};return k.runKernel(Si,i,a)}var Dt=v({matMul_:jz});function Xz(r){let e={x:N(r,"x","sigmoid","float32")};return k.runKernel(_s,e)}var Cr=v({sigmoid_:Xz});function Yz(r,t,e){let o=N(r,"x","slice","string_or_numeric");if(o.rank===0)throw new Error("Slicing scalar is not possible");let n={x:o},s={begin:t,size:e};return k.runKernel(ea,n,s)}var Nt=v({slice_:Yz});function Zz(r){let e={x:N(r,"x","tanh","float32")};return k.runKernel(Bs,e)}var kn=v({tanh_:Zz});function Jz(r,t,e,o,n,s){let i=N(r,"forgetBias","basicLSTMCell"),a=N(t,"lstmKernel","basicLSTMCell"),l=N(e,"lstmBias","basicLSTMCell"),u=N(o,"data","basicLSTMCell"),c=N(n,"c","basicLSTMCell"),p=N(s,"h","basicLSTMCell"),m=Vt([u,p],1),f=Dt(m,a),h=U(f,l),g=h.shape[0],d=h.shape[1]/4,x=[g,d],b=Nt(h,[0,0],x),S=Nt(h,[0,d],x),w=Nt(h,[0,d*2],x),T=Nt(h,[0,d*3],x),$=U(A(Cr(b),kn(S)),A(c,Cr(U(i,w)))),R=A(kn($),Cr(T));return[$,R]}var fv=v({basicLSTMCell_:Jz});function Qz(r,t,e){let o=N(r,"x","batchToSpaceND"),n=t.reduce((a,l)=>a*l);E(o.rank>=1+t.length,()=>`input rank is ${o.rank} but should be > than blockShape.length ${t.length}`),E(e.length===t.length,()=>`crops.length is ${e.length} but should be equal to blockShape.length  ${t.length}`),E(o.shape[0]%n===0,()=>`input tensor batch is ${o.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${n}`);let s={x:o},i={blockShape:t,crops:e};return k.runKernel(Ni,s,i)}var da=v({batchToSpaceND_:Qz});function hv(r){let t;return r.rank===0||r.rank===1?t=D(r,[1,1,1,r.size]):r.rank===2?t=D(r,[1,1,r.shape[0],r.shape[1]]):r.rank===3?t=D(r,[1,r.shape[0],r.shape[1],r.shape[2]]):t=r,t}function tM(r,t,e,o,n,s){s==null&&(s=.001);let i=N(r,"x","batchNorm"),a=N(t,"mean","batchNorm"),l=N(e,"variance","batchNorm"),u;n!=null&&(u=N(n,"scale","batchNorm"));let c;o!=null&&(c=N(o,"offset","batchNorm")),E(a.rank===l.rank,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),E(c==null||a.rank===c.rank,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),E(u==null||a.rank===u.rank,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let m={x:hv(i),scale:u,offset:c,mean:a,variance:l},f={varianceEpsilon:s},h=k.runKernel(Fi,m,f);return D(h,i.shape)}var En=v({batchNorm_:tM});function eM(r,t,e,o,n,s){let i=N(r,"x","batchNorm"),a=N(t,"mean","batchNorm"),l=N(e,"variance","batchNorm"),u;n!=null&&(u=N(n,"scale","batchNorm"));let c;return o!=null&&(c=N(o,"offset","batchNorm")),E(i.rank===2,()=>`Error in batchNorm2D: x must be rank 2 but got rank ${i.rank}.`),E(a.rank===2||a.rank===1,()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${a.rank}.`),E(l.rank===2||l.rank===1,()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`),u!=null&&E(u.rank===2||u.rank===1,()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`),c!=null&&E(c.rank===2||c.rank===1,()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`),En(i,a,l,c,u,s)}var hd=v({batchNorm2d_:eM});function rM(r,t,e,o,n,s){let i=N(r,"x","batchNorm"),a=N(t,"mean","batchNorm"),l=N(e,"variance","batchNorm"),u;n!=null&&(u=N(n,"scale","batchNorm"));let c;return o!=null&&(c=N(o,"offset","batchNorm")),E(i.rank===3,()=>`Error in batchNorm3D: x must be rank 3 but got rank ${i.rank}.`),E(a.rank===3||a.rank===1,()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${a.rank}.`),E(l.rank===3||l.rank===1,()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`),u!=null&&E(u.rank===3||u.rank===1,()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`),c!=null&&E(c.rank===3||c.rank===1,()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`),En(i,a,l,c,u,s)}var dd=v({batchNorm3d_:rM});function oM(r,t,e,o,n,s){let i=N(r,"x","batchNorm"),a=N(t,"mean","batchNorm"),l=N(e,"variance","batchNorm"),u;n!=null&&(u=N(n,"scale","batchNorm"));let c;return o!=null&&(c=N(o,"offset","batchNorm")),E(i.rank===4,()=>`Error in batchNorm4D: x must be rank 4 but got rank ${i.rank}.`),E(a.rank===4||a.rank===1,()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${a.rank}.`),E(l.rank===4||l.rank===1,()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`),u!=null&&E(u.rank===4||u.rank===1,()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`),c!=null&&E(c.rank===4||c.rank===1,()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`),En(i,a,l,c,u,s)}var gd=v({batchNorm4d_:oM});function nM(r,t,e){let o=N(r,"x","bincount"),n=N(t,"weights","bincount");E(o.dtype==="int32",()=>`Error in bincount: input dtype must be int32, but got ${o.dtype}`),E(e>=0,()=>`size must be non-negative, but got ${e}.`),E(n.size===o.size||n.size===0,()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${o.shape}, weights shape: ${n.shape}.`);let s={x:o,weights:n},i={size:e};return k.runKernel(xu,s,i)}var xd=v({bincount_:nM});function sM(r,t){let e=N(r,"x","bitwiseAnd"),o=N(t,"y","bitwiseAnd");if(!eo(e.shape,o.shape))throw new Error(`BitwiseAnd: Tensors must have the same shape. x: ${e.shape}, y: ${o.shape}`);if(e.dtype!=="int32"||o.dtype!=="int32")throw new Error(`BitwiseAnd: Only supports 'int32' values in tensor, found type of x: ${e.dtype} and type of y: ${o.dtype}`);let n={a:e,b:o};return k.runKernel(um,n)}var dv=v({bitwiseAnd_:sM});function iM(r,t){let e=N(r,"s0","broadcastArgs","int32"),o=N(t,"s1","broadcastArgs","int32");if(e.rank!==1)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${e.rank}`);if(o.rank!==1)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${o.rank}`);let n={s0:e,s1:o};return k.runKernel(yu,n)}var gv=v({broadcastArgs_:iM});function aM(r,t){let e=N(r,"broadcastTo","x"),o=e.shape;if(he(t),t.length<e.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${e.rank}.`);if(t.length>e.rank){let u=e.shape.slice();for(;u.length<t.length;)u.unshift(1);e=D(e,u)}let n=e.shape,s=Array.from(t);for(let u=t.length-1;u>=0;u--)if(n[u]===t[u])s[u]=1;else if(e.shape[u]!==1)throw new Error(`broadcastTo(): [${o}] cannot be broadcast to [${t}].`);if(s.map((u,c)=>u>1?c:-1).filter(u=>u>=0).length===0)return $r(e);let a={x:e},l={reps:s};return k.runKernel(bn,a,l)}var $n=v({broadcastTo_:aM});function lM(r){let e={x:N(r,"x","ceil","float32")};return k.runKernel(os,e)}var yd=v({ceil_:lM});function Ao(r,t,e){he(r),e=e||di(t);let o={shape:r,value:t,dtype:e};return k.runKernel(Fu,{},o)}function uM(r,t,e){let o=N(r,"x","clipByValue");if(E(t<=e,()=>`Error in clip: min (${t}) must be less than or equal to max (${e}).`),t===e)return Ao(o.shape,t,o.dtype);let n={x:o},s={clipValueMin:t,clipValueMax:e};return k.runKernel(ns,n,s)}var je=v({clipByValue_:uM});function cM(r){return Vt(r,0)}var bd=v({concat1d_:cM});function pM(r,t){return Vt(r,t)}var wd=v({concat2d_:pM});function mM(r,t){return Vt(r,t)}var Cd=v({concat3d_:mM});function fM(r,t){return Vt(r,t)}var Sd=v({concat4d_:fM});function hM(r,t,e,o,n="NHWC",s=[1,1],i){let a=N(r,"x","conv2d","float32"),l=N(t,"filter","conv2d","float32"),u=a,c=!1;a.rank===3&&(c=!0,u=D(a,[1,a.shape[0],a.shape[1],a.shape[2]])),E(u.rank===4,()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`),E(l.rank===4,()=>`Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`),te("conv2d",o,i);let p=n==="NHWC"?u.shape[3]:u.shape[1];E(p===l.shape[2],()=>`Error in conv2d: depth of input (${p}) must match input depth for filter ${l.shape[2]}.`),E(nr(e,s),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${e} and dilations '${s}'`),E(In(s),()=>"Error in conv2D: Dilated rates should be larger than 0."),E(In(e),()=>"Error in conv2D: Strides should be larger than 0.");let m={x:u,filter:l},f={strides:e,pad:o,dataFormat:n,dilations:s,dimRoundingMode:i},h=k.runKernel(Ii,m,f);return c?D(h,[h.shape[1],h.shape[2],h.shape[3]]):h}var Ur=v({conv2d_:hM});function dM(r,t,e,o,n="NWC",s=1,i){let a=N(r,"x","conv1d"),l=N(t,"filter","conv1d"),u=a,c=!1;a.rank===2&&(c=!0,u=D(a,[1,a.shape[0],a.shape[1]])),E(u.rank===3,()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`),E(l.rank===3,()=>`Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`),te("conv1d",o,i),E(u.shape[2]===l.shape[1],()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`),E(nr(e,s),()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${e} and dilation '${s}'`),E(In(s),()=>"Error in conv1D: Dilated rates should be larger than 0."),E(In(e),()=>"Error in conv1D: Stride should be larger than 0."),E(n==="NWC",()=>`Error in conv1d: got dataFormat of ${n} but only NWC is currently supported.`);let p=D(l,[1,l.shape[0],l.shape[1],l.shape[2]]),m=D(u,[u.shape[0],1,u.shape[1],u.shape[2]]),d=Ur(m,p,[1,e],o,"NHWC",[1,s],i);return c?D(d,[d.shape[2],d.shape[3]]):D(d,[d.shape[0],d.shape[2],d.shape[3]])}var Ac=v({conv1d_:dM});function gM(r,t,e,o,n,s="NHWC",i){E(r.length===t.rank,()=>`Length of inShape (${r.length}) and rank of dy (${t.rank}) must match`);let a=r,l=t,u=!1;t.rank===3&&(u=!0,l=D(t,[1,t.shape[0],t.shape[1],t.shape[2]]),a=[1,r[0],r[1],r[2]]),E(a.length===4,()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${a.length}.`),E(l.rank===4,()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`),E(e.rank===4,()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${e.rank}`);let c=s==="NHWC"?a[3]:a[1],p=s==="NHWC"?l.shape[3]:l.shape[1];E(c===e.shape[2],()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${e.shape[2]}.`),E(p===e.shape[3],()=>`Error in conv2dDerInput: depth of output (${p}) must match output depth for filter ${e.shape[3]}.`),te("conv2dDerInput",n,i);let m={dy:l,filter:e},f={strides:o,pad:n,dataFormat:s,dimRoundingMode:i,inputShape:a},h=k.runKernel(ki,m,f);return u?D(h,[h.shape[1],h.shape[2],h.shape[3]]):h}var Dc=v({conv2DBackpropInput_:gM});function xM(r,t,e,o,n,s){let i=N(r,"x","conv2dTranspose"),a=N(t,"filter","conv2dTranspose");return Dc(e,i,a,o,n,"NHWC",s)}var Rc=v({conv2dTranspose_:xM});function yM(r,t,e,o,n="NDHWC",s=[1,1,1]){let i=N(r,"x","conv3d"),a=N(t,"filter","conv3d"),l=i,u=!1;i.rank===4&&(u=!0,l=D(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),E(l.rank===5,()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`),E(a.rank===5,()=>`Error in conv3d: filter must be rank 5, but got rank ${a.rank}.`),E(l.shape[4]===a.shape[3],()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${a.shape[3]}.`),E(nr(e,s),()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${e} and dilations '${s}'`),E(n==="NDHWC",()=>`Error in conv3d: got dataFormat of ${n} but only NDHWC is currently supported.`),E(In(s),()=>"Error in conv3D: Dilated rates should be larger than 0."),E(In(e),()=>"Error in conv3D: Strides should be larger than 0.");let c={x:l,filter:a},p={strides:e,pad:o,dataFormat:n,dilations:s},m=k.runKernel(Ei,c,p);return u?D(m,[m.shape[1],m.shape[2],m.shape[3],m.shape[4]]):m}var Nd=v({conv3d_:yM});function bM(r,t,e,o,n){E(r.length===t.rank,()=>`Length of inShape (${r.length}) and rank of dy (${t.rank}) must match`);let s=r,i=t,a=!1;t.rank===4&&(a=!0,i=D(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),s=[1,r[0],r[1],r[2],r[3]]);let l=s[4],u=i.shape[4];E(s.length===5,()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${s.length}.`),E(i.rank===5,()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${i.rank}`),E(e.rank===5,()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${e.rank}`),E(l===e.shape[3],()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${e.shape[3]}.`),E(u===e.shape[4],()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${e.shape[4]}.`);let c={dy:i,filter:e},p={pad:n,strides:o,inputShape:s},m=k.runKernel(Su,c,p);return a?D(m,[m.shape[1],m.shape[2],m.shape[3],m.shape[4]]):m}var vd=v({conv3DBackpropInput_:bM});function wM(r,t,e,o,n){let s=N(r,"x","conv3dTranspose"),i=N(t,"filter","conv3dTranspose");return vd(e,s,i,o,n)}var Td=v({conv3dTranspose_:wM});function CM(r){let e={x:N(r,"x","cos","float32")};return k.runKernel(ss,e)}var ga=v({cos_:CM});function SM(r){let e={x:N(r,"x","cosh","float32")};return k.runKernel(is,e)}var Fc=v({cosh_:SM});function NM(r,t=0,e=!1,o=!1){let s={x:N(r,"x","cumprod")},i={axis:t,exclusive:e,reverse:o};return k.runKernel(Nu,s,i)}var wl=v({cumprod_:NM});function vM(r,t=0,e=!1,o=!1){let s={x:N(r,"x","cumsum")},i={axis:t,exclusive:e,reverse:o};return k.runKernel($i,s,i)}var _c=v({cumsum_:vM});function TM(r,t,e,o=!1){let n=N(r,"x","denseBincount"),s=N(t,"weights","denseBincount");E(n.dtype==="int32",()=>`Error in denseBincount: input dtype must be int32, but got ${n.dtype}`),E(n.rank<=2,()=>`Error in denseBincount: input must be at most rank 2, but got rank ${n.rank}.`),E(e>=0,()=>`size must be non-negative, but got ${e}.`),E(s.size===n.size||s.size===0,()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${n.shape}, weights shape: ${s.shape}.`);let i={x:n,weights:s},a={size:e,binaryOutput:o};return k.runKernel(Tu,i,a)}var Sm=v({denseBincount_:TM});function IM(r,t,e="NHWC"){let o=N(r,"x","depthToSpace","float32"),n=e==="NHWC"?o.shape[1]:o.shape[2],s=e==="NHWC"?o.shape[2]:o.shape[3],i=e==="NHWC"?o.shape[3]:o.shape[1];E(t>1,()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`),E(n*t>=0,()=>`Negative dimension size caused by overflow when multiplying
    ${n} and ${t}  for depthToSpace with input shape
    ${o.shape}`),E(s*t>=0,()=>`Negative dimension size caused by overflow when multiplying
    ${s} and ${t} for depthToSpace with input shape
        ${o.shape}`),E(i%(t*t)===0,()=>`Dimension size must be evenly divisible by ${t*t} but is ${i} for depthToSpace with input shape ${o.shape}`);let a={x:o},l={blockSize:t,dataFormat:e};return k.runKernel(Iu,a,l)}var Id=v({depthToSpace_:IM});function kM(r,t,e,o,n="NHWC",s=[1,1],i){let a=N(r,"x","depthwiseConv2d","float32"),l=N(t,"filter","depthwiseConv2d","float32"),u=a,c=!1;a.rank===3&&(c=!0,u=D(a,[1,a.shape[0],a.shape[1],a.shape[2]])),E(u.rank===4,()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`),E(l.rank===4,()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`);let p=n==="NHWC"?u.shape[3]:u.shape[1];E(p===l.shape[2],()=>`Error in depthwiseConv2d: number of input channels (${p}) must match the inChannels dimension in filter ${l.shape[2]}.`),te("depthwiseConv2d",o,i);let m={x:u,filter:l},f={strides:e,pad:o,dataFormat:n,dilations:s,dimRoundingMode:i},h=k.runKernel(Ai,m,f);return c?D(h,[h.shape[1],h.shape[2],h.shape[3]]):h}var An=v({depthwiseConv2d_:kM});function EM(r){let e={x:N(r,"x","diag")};return k.runKernel($u,e)}var xv=v({diag_:EM});function $M(r,t,e,o,n=[1,1],s="NHWC"){let i=N(r,"x","dilation2d"),a=N(t,"filter","dilation2d");E(i.rank===3||i.rank===4,()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${i.rank}.`),E(a.rank===3,()=>`Error in dilation2d: filter must be rank 3, but got rank ${a.rank}.`),E(s==="NHWC",()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${s}`);let l=i,u=!1;i.rank===3&&(l=D(i,[1,i.shape[0],i.shape[1],i.shape[2]]),u=!0),E(l.shape[3]===a.shape[2],()=>`Error in dilation2d:  input and filter must have the same depth: ${l.shape[3]} vs ${a.shape[2]}`);let c={x:l,filter:a},p={strides:e,pad:o,dilations:n},m=k.runKernel(Di,c,p);return u?D(m,[m.shape[1],m.shape[2],m.shape[3]]):m}var kd=v({dilation2d_:$M});var no={};qt(no,{assertAndGetBroadcastShape:()=>Tt,getBroadcastDims:()=>yv,getReductionAxes:()=>Xt});function yv(r,t){let e=r.length,o=[];for(let n=0;n<e;n++){let s=e-1-n,i=r[s]||1;(t[t.length-1-n]||1)>1&&i===1&&o.unshift(s)}return o}function Xt(r,t){let e=[];for(let o=0;o<t.length;o++){let n=r[r.length-o-1],s=t.length-o-1,i=t[s];(n==null||n===1&&i>1)&&e.unshift(s)}return e}function Tt(r,t){let e=Math.max(r.length,t.length),o=new Array(e);for(let n=0;n<e;n++){let s=r[r.length-n-1];s==null&&(s=1);let i=t[t.length-n-1];if(i==null&&(i=1),s===1)o[e-n-1]=i;else if(i===1)o[e-n-1]=s;else if(s!==i){let a=`Operands could not be broadcast together with shapes ${r} and ${t}.`;throw Error(a)}else o[e-n-1]=s}return o}function AM(r,t){let e=N(r,"a","equal","string_or_numeric"),o=N(t,"b","equal","string_or_numeric");[e,o]=_t(e,o),Tt(e.shape,o.shape);let n={a:e,b:o};return k.runKernel(Za,n)}var Sr=v({equal_:AM});function DM(r,t,e){let o=N(t,"a","where"),n=N(e,"b","where"),s=N(r,"condition","where","bool"),i=Tt(Tt(s.shape,o.shape),n.shape),a=$n(s,i),l=$n(o,i),u=$n(n,i),c={condition:a,t:l,e:u};return k.runKernel(ta,c)}var ee=v({where_:DM});function RM(r){let e={x:N(r,"x","zerosLike")};return k.runKernel(la,e)}var dt=v({zerosLike_:RM});function FM(r,t){let e=N(r,"a","div"),o=N(t,"b","div");[e,o]=_t(e,o);let n=ot(e,o),s=dt(n),i=Sr(o,s);return ee(i,s,n)}var Ed=v({divNoNan_:FM});function _M(r,t){let e=N(r,"t1","dot"),o=N(t,"t2","dot");E((e.rank===1||e.rank===2)&&(o.rank===1||o.rank===2),()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${e.rank} and ${o.rank}.`);let n=e.rank===1?e.size:e.shape[1],s=o.rank===1?o.size:o.shape[0];if(E(n===s,()=>`Error in dot: inner dimensions of inputs must match, but got ${n} and ${s}.`),e.rank===1&&o.rank===1){let i=D(e,[1,-1]),a=D(o,[-1,1]),l=Dt(i,a);return D(l,[])}else if(e.rank===1&&o.rank===2){let i=D(e,[1,-1]),a=D(o,[o.shape[0],o.shape[1]]),l=Dt(i,a);return D(l,[l.size])}else if(e.rank===2&&o.rank===1){let i=D(o,[-1,1]),a=Dt(e,i);return D(a,[a.size])}else{let i=D(o,[o.shape[0],o.shape[1]]);return Dt(e,i)}}var $d=v({dot_:_M});function OM(r,...t){let e=t.map((n,s)=>N(n,`tensors${s}`,"einsum")),o={equation:r};return k.runKernel(Au,e,o)}var bv=v({einsum_:OM});function LM(r){let e={x:N(r,"x","elu","float32")};return k.runKernel(ls,e)}var Dn=v({elu_:LM});function PM(r,t){let e=N(r,"x","ensureShape","string_or_numeric");if(!aw(e.shape,t))throw new Error(`EnsureShape: Shape of tensor ${e.shape} is not compatible with expected shape ${t}`);return r}var wv=v({ensureShape_:PM});function zM(r){let t=N(r,"x","erf");E(t.dtype==="int32"||t.dtype==="float32",()=>"Input dtype must be `int32` or `float32`."),t.dtype==="int32"&&(t=X(t,"float32"));let e={x:t};return k.runKernel(us,e)}var Ad=v({erf_:zM});function jw(r,t){for(let e=0;e<r.length;++e)if(r[r.length-e-1]!==t-1-e)return!1;return!0}function Cv(r,t,e){let o=r.length+t.length,n=[],s=0,i=0;for(let a=0;a<o;a++)e.indexOf(a)===-1?n.push(r[s++]):n.push(t[i++]);return n}function Xw(r,t){let e=[],o=r.length;for(let s=0;s<o;s++)t.indexOf(s)===-1&&e.push(r[s]);let n=t.map(s=>r[s]);return[e,n]}function Do(r,t){let e=t.map(o=>1);return Cv(r,e,t)}function MM(r,t,e){E(jw(t,e),()=>`${r} supports only inner-most axes for now. Got axes ${t} and rank-${e} input.`)}function Yw(r,t){if(jw(r,t))return null;let e=[];for(let o=0;o<t;++o)r.indexOf(o)===-1&&e.push(o);return r.forEach(o=>e.push(o)),e}function Nm(r){return r.map((t,e)=>[e,t]).sort((t,e)=>t[1]-e[1]).map(t=>t[0])}function BM(r,t){let e=[];for(let o=t-r;o<t;++o)e.push(o);return e}function VM(r,t=null,e=!1){let n={x:N(r,"x","max")},s={reductionIndices:t,keepDims:e};return k.runKernel(Pi,n,s)}var Xe=v({max_:VM});function GM(r,t=null,e=!1){let n={x:N(r,"x","min")},s={axis:t,keepDims:e};return k.runKernel(Vi,n,s)}var Us=v({min_:GM});function WM(r,t){let e=N(r,"base","pow"),o=N(t,"exp","pow");[e,o]=_t(e,o);let n={a:e,b:o};return k.runKernel(vs,n)}var Ar=v({pow_:WM});function st(r,t){if((wr(r)&&t!=="string"||Array.isArray(r))&&t!=="complex64")throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if(t==="string"&&wr(r)&&!(r instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return Er(r,[],[],t)}function UM(r){let e={x:N(r,"x","sqrt","float32")};return k.runKernel(Ls,e)}var re=v({sqrt_:UM});function HM(r){let t=N(r,"x","square"),e={};return k.runKernel("Square",{x:t},e)}var $t=v({square_:HM});function KM(r,t=null,e=!1){let o=N(r,"x","sum");o.dtype==="bool"&&(o=X(o,"int32"));let n={x:o},s={axis:t,keepDims:e};return k.runKernel(ra,n,s)}var nt=v({sum_:KM});function qM(r,t="euclidean",e=null,o=!1){r=N(r,"x","norm");let n=Sv(r,t,e),s=n.shape;if(o){let i=Me(e,r.shape);s=Do(n.shape,i)}return D(n,s)}function Sv(r,t,e=null){if(r.rank===0)return ae(r);if(r.rank!==1&&e===null)return Sv(D(r,[-1]),t,e);if(r.rank===1||typeof e=="number"||Array.isArray(e)&&e.length===1){if(t===1)return nt(ae(r),e);if(t===1/0)return Xe(ae(r),e);if(t===-1/0)return Us(ae(r),e);if(t==="euclidean"||t===2)return re(nt(Ar(ae(r),st(2,"int32")),e));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(e)&&e.length===2){if(t===1)return Xe(nt(ae(r),e[0]),e[1]-1);if(t===1/0)return Xe(nt(ae(r),e[1]),e[0]);if(t===-1/0)return Us(nt(ae(r),e[1]),e[0]);if(t==="fro"||t==="euclidean")return re(nt($t(r),e));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${e}`)}var Hs=v({norm_:qM});function jM(r,t=null,e=!1){return Hs(r,"euclidean",t,e)}var Dd=v({euclideanNorm_:jM});function XM(r){let e={x:N(r,"x","exp")};return k.runKernel(cs,e)}var Fe=v({exp_:XM});function YM(r,t=0){let e=N(r,"x","expandDims","string_or_numeric");E(t<=e.rank,()=>"Axis must be <= rank of the tensor");let o={input:e},n={dim:t};return k.runKernel(Ri,o,n)}var Ie=v({expandDims_:YM});function ZM(r){let e={x:N(r,"x","expm1")};return k.runKernel(ps,e)}var Rd=v({expm1_:ZM});function JM(r,t){let e=N(r,"x","tile","string_or_numeric");E(e.rank===t.length,()=>`Error in transpose: rank of input ${e.rank} must match length of reps ${t}.`);let o={x:e},n={reps:t};return k.runKernel(bn,o,n)}var sr=v({tile_:JM});function QM(r,t,e,o="float32"){t==null&&(t=r);let n=mt([r,t],o),s=r<=t?r:t;for(let a=0;a<s;++a)n.set(1,a,a);let i=D(n.toTensor(),[r,t]);if(e==null)return i;if(e.length===1)return sr(Ie(i,0),[e[0],1,1]);if(e.length===2)return sr(Ie(Ie(i,0),0),[e[0],e[1],1,1]);if(e.length===3)return sr(Ie(Ie(Ie(i,0),0),0),[e[0],e[1],e[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${e.length}D.`)}var Cl=v({eye_:QM});function t3(r){let e={x:N(r,"x","floor","float32")};return k.runKernel(ms,e)}var Rn=v({floor_:t3});function e3(r,t,e=0,o=0){let n=N(r,"x","gather"),s=N(t,"indices","gather","int32"),i={x:n,indices:s},a={axis:e,batchDims:o};return k.runKernel(_i,i,a)}var Fn=v({gather_:e3});function r3(r,t){let e=N(r,"a","greater","string_or_numeric"),o=N(t,"b","greater","string_or_numeric");[e,o]=_t(e,o),Tt(e.shape,o.shape);let n={a:e,b:o};return k.runKernel(Ja,n)}var ge=v({greater_:r3});function o3(r,t){let e=N(r,"a","greaterEqual","string_or_numeric"),o=N(t,"b","greaterEqual","string_or_numeric");[e,o]=_t(e,o),Tt(e.shape,o.shape);let n={a:e,b:o};return k.runKernel(hs,n)}var Dr=v({greaterEqual_:o3});function n3(r){let e={input:N(r,"input","imag")};return k.runKernel(Pu,e)}var xa=v({imag_:n3});function s3(r){let e={x:N(r,"x","isFinite")};return k.runKernel(ds,e)}var Fd=v({isFinite_:s3});function i3(r){let e={x:N(r,"x","isInf")};return k.runKernel(gs,e)}var _d=v({isInf_:i3});function a3(r){let e={x:N(r,"x","isNaN")};return k.runKernel(xs,e)}var Od=v({isNaN_:a3});function l3(r,t=.2){let o={x:N(r,"x","leakyRelu")},n={alpha:t};return k.runKernel(Oi,o,n)}var ya=v({leakyRelu_:l3});function u3(r,t){let e=N(r,"a","less","string_or_numeric"),o=N(t,"b","less","string_or_numeric");[e,o]=_t(e,o),Tt(e.shape,o.shape);let n={a:e,b:o};return k.runKernel(Qa,n)}var Ks=v({less_:u3});function c3(r,t){let e=N(r,"a","lessEqual","string_or_numeric"),o=N(t,"b","lessEqual","string_or_numeric");[e,o]=_t(e,o),Tt(e.shape,o.shape);let n={a:e,b:o};return k.runKernel(tl,n)}var so=v({lessEqual_:c3});function Nv(r,t,e){if(e<=0)throw new Error("The number of values should be positive.");let o={start:r,stop:t,num:e};return k.runKernel(zu,{},o)}function p3(r,t=5,e=1,o=1,n=.5){let s=N(r,"x","localResponseNormalization");E(s.rank===4||s.rank===3,()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got
               rank ${s.rank}.`),E(Xn(t),()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`);let i=s,a=!1;s.rank===3&&(a=!0,i=D(s,[1,s.shape[0],s.shape[1],s.shape[2]]));let l={x:i},u={depthRadius:t,bias:e,alpha:o,beta:n},c=k.runKernel(Li,l,u);return a?D(c,[c.shape[1],c.shape[2],c.shape[3]]):c}var Ld=v({localResponseNormalization_:p3});function m3(r){let e={x:N(r,"x","log","float32")};return k.runKernel(ys,e)}var Ye=v({log_:m3});function f3(r){let e={x:N(r,"x","log1p")};return k.runKernel(bs,e)}var ba=v({log1p_:f3});function Jw(r,t){E(cu(r),()=>"The f passed in variableGrads(f) must be a function"),E(t==null||Array.isArray(t)&&t.every(u=>u instanceof Gs),()=>"The varList passed in variableGrads(f, varList) must be an array of variables");let e=t!=null;if(!e){t=[];for(let u in k.registeredVariables)t.push(k.registeredVariables[u])}let o=e?t.filter(u=>!u.trainable):null,n=t.length;t=t.filter(u=>u.trainable),E(t.length>0,()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${n} variables is trainable.`);let s=!0,{value:i,grads:a}=k.gradients(r,t,null,s);E(a.some(u=>u!=null),()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."),E(i.rank===0,()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${i.rank} tensor`);let l={};return t.forEach((u,c)=>{a[c]!=null&&(l[u.name]=a[c])}),o?.forEach(u=>l[u.name]=null),{value:i,grads:l}}function Hr(r){return k.customGrad(r)}function h3(r){let e={x:N(r,"x","neg")};return k.runKernel(Wi,e)}var Ft=v({neg_:h3});function d3(r){let e={x:N(r,"x","softplus")};return k.runKernel(Os,e)}var Qo=v({softplus_:d3});function g3(r){let t=N(r,"x","logSigmoid");return Hr(o=>({value:Ft(Qo(Ft(o))),gradFunc:i=>A(i,Cr(Ft(o)))}))(t)}var Pd=v({logSigmoid_:g3});function x3(r,t){let e=N(r,"a","sub"),o=N(t,"b","sub");[e,o]=_t(e,o);let n={a:e,b:o};return k.runKernel(zs,n)}var tt=v({sub_:x3});function y3(r,t=-1){let e=N(r,"logits","logSoftmax");if(t===-1&&(t=e.rank-1),t!==e.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${e.rank} and axis was ${t}`);return Hr((n,s)=>{let a=Xe(n,t,!0),l=tt(n,a),u=tt(X(l,"float32"),Ye(nt(Fe(l),t,!0)));return s([u]),{value:u,gradFunc:(p,m)=>{let[f]=m,h=!0,g=Fe(f);return tt(p,A(nt(p,t,h),g))}}})(e)}var Oc=v({logSoftmax_:y3});function b3(r,t=null,e=!1){let o=N(r,"x","logSumExp"),n=Me(t,o.shape),s=Xe(o,n,!0),i=tt(o,s),a=Fe(i),l=nt(a,n),u=Ye(l),c=U(D(s,u.shape),u);if(e){let p=Do(c.shape,n);return D(c,p)}return c}var Lc=v({logSumExp_:b3});function w3(r,t){let e=N(r,"a","logicalAnd","bool"),o=N(t,"b","logicalAnd","bool");Tt(e.shape,o.shape);let n={a:e,b:o};return k.runKernel(el,n)}var mr=v({logicalAnd_:w3});function C3(r){let e={x:N(r,"x","logicalNot","bool")};return k.runKernel(rl,e)}var wa=v({logicalNot_:C3});function S3(r,t){let e=N(r,"a","logicalOr","bool"),o=N(t,"b","logicalOr","bool");Tt(e.shape,o.shape);let n={a:e,b:o};return k.runKernel(ol,n)}var Pc=v({logicalOr_:S3});function N3(r,t){let e=N(r,"a","logicalXor","bool"),o=N(t,"b","logicalXor","bool");return Tt(e.shape,o.shape),mr(Pc(r,t),wa(mr(r,t)))}var zd=v({logicalXor_:N3});var Md=2147483648;function v3(r,t,e="left"){let o=N(r,"sortedSequence","searchSorted"),n=N(t,"values","searchSorted"),s=o.shape[o.shape.length-1],i=n.shape[n.shape.length-1],a=D(o,[-1,s]),l=D(n,[-1,i]);if(a.rank<2)throw new Error("Sorted input argument must be at least 2-dimensional");if(a.shape[0]!==l.shape[0])throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");if(Pt(l.shape)>=Md)throw new Error(`values tensor size must less than ${Md}`);if(a.shape[1]>=Md)throw new Error(`trailing dim_size must less than ${Md} for int32 output type, was ${a.shape[1]}`);let u={sortedSequence:a,values:l},c={side:e};return k.runKernel(rc,u,c)}var vm=v({searchSorted_:v3});function vv(r,t){return vm(r,t,"left")}function T3(r,t,e,o,n){let s=N(r,"x","maxPool"),i=1,a=s,l=!1;s.rank===3&&(l=!0,a=D(s,[1,s.shape[0],s.shape[1],s.shape[2]])),E(a.rank===4,()=>`Error in maxPool: input must be rank 4 but got rank ${a.rank}.`),E(nr(e,i),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${e} and dilations '${i}'`),te("maxPool",o,n);let u={x:a},c={filterSize:t,strides:e,pad:o,dimRoundingMode:n},p=k.runKernel(zi,u,c);return l?D(p,[p.shape[1],p.shape[2],p.shape[3]]):p}var Ca=v({maxPool_:T3});function I3(r,t=[1,1,1],e,o,n,s="NDHWC"){let i=N(r,"x","maxPool3d"),a=i,l=!1;i.rank===4&&(l=!0,a=D(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),E(a.rank===5,()=>`Error in maxPool3d: x must be rank 5 but got rank ${a.rank}.`),E(s==="NDHWC",()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${s}`),te("maxPool3d",o,n);let u={x:a},c={filterSize:t,strides:e,pad:o,dimRoundingMode:n,dataFormat:s},p=k.runKernel(Mi,u,c);return l?D(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}var Bd=v({maxPool3d_:I3});function k3(r,t,e,o,n=!1){let i={x:N(r,"x","maxPoolWithArgmax")},a={filterSize:t,strides:e,pad:o,includeBatchInIndex:n},l=k.runKernel(Gu,i,a);return{result:l[0],indexes:l[1]}}var Tv=v({maxPoolWithArgmax_:k3});function E3(r,t){let e=N(r,"a","maximum"),o=N(t,"b","maximum");[e,o]=_t(e,o),e.dtype==="bool"&&(e=X(e,"int32"),o=X(o,"int32")),Tt(e.shape,o.shape);let n={a:e,b:o};return k.runKernel(ws,n)}var Kr=v({maximum_:E3});function $3(r,t=null,e=!1){let n={x:N(r,"x","mean")},s={axis:t,keepDims:e};return k.runKernel(Bi,n,s)}var oe=v({mean_:$3});function ne(r,t="float32"){if(he(r),t==="complex64"){let o=ne(r,"float32"),n=ne(r,"float32");return Gr(o,n)}let e=mu(Pt(r),t);return k.makeTensor(e,r,t)}function Be(r,t="float32"){if(he(r),t==="complex64"){let o=Be(r,"float32"),n=ne(r,"float32");return Gr(o,n)}let e=im(Pt(r),t);return k.makeTensor(e,r,t)}function Iv(r,t,{indexing:e="xy"}={}){if(e!=="xy"&&e!=="ij")throw new TypeError(`${e} is not a valid third argument to meshgrid`);if(r===void 0)return[];let o=N(r,"x","meshgrid",r instanceof At?r.dtype:"float32");if(t===void 0)return[o];let n=N(t,"y","meshgrid",t instanceof At?t.dtype:"float32"),s=Pt(o.shape),i=Pt(n.shape);return e==="xy"?(o=D(o,[1,-1]),n=D(n,[-1,1]),[Dt(Be([i,1],o.dtype),o),Dt(n,Be([1,s],n.dtype))]):(o=D(o,[-1,1]),n=D(n,[1,-1]),[Dt(o,Be([1,i],o.dtype)),Dt(Be([s,1],n.dtype),n)])}function A3(r,t){let e=N(r,"a","minimum"),o=N(t,"b","minimum");[e,o]=_t(e,o),e.dtype==="bool"&&(e=X(e,"int32"),o=X(o,"int32")),Tt(e.shape,o.shape);let n={a:e,b:o};return k.runKernel(Cs,n)}var wo=v({minimum_:A3});function D3(r,t,e){E(e==="reflect"||e==="symmetric",()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${e}.`);let o=N(r,"x","mirrorPad");if(o.rank===0)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");E(t.length===o.rank,()=>`Padding doesn't match input. Must be ${o.rank}. Got ${t.length}.`);let n=e==="reflect"?1:0;for(let a=0;a<o.rank;a++)E(t[a].length===2,()=>"Invalid number of paddings. Must be length of 2 each."),E(t[a][0]>=0&&t[a][0]<=o.shape[a]-n&&t[a][1]>=0&&t[a][1]<=o.shape[a]-n,()=>`Padding in dimension ${a} cannot be greater than or equal to ${o.shape[a]-n} or less than 0 for input of shape ${o.shape}`);let s={paddings:t,mode:e},i={x:o};return k.runKernel(Gi,i,s)}var Vd=v({mirrorPad_:D3});function R3(r,t){let e=N(r,"a","mod"),o=N(t,"b","mod");[e,o]=_t(e,o);let n={a:e,b:o};return k.runKernel(Ss,n)}var Gd=v({mod_:R3});function F3(r,t=null,e=!1){r=N(r,"x","moments");let o=Me(t,r.shape),n=oe(r,o,e),s=n.shape;e||(s=Do(n.shape,o));let i=$t(tt(X(r,"float32"),D(n,s))),a=oe(i,o,e);return{mean:n,variance:a}}var Sl=v({moments_:F3});function _3(r,t,e,o){let n=N(t,"data","multiRNNCell"),s=dl(e,"c","multiRNNCell"),i=dl(o,"h","multiRNNCell"),a=n,l=[];for(let p=0;p<r.length;p++){let m=r[p](a,s[p],i[p]);l.push(m[0]),l.push(m[1]),a=m[1]}let u=[],c=[];for(let p=0;p<l.length;p+=2)u.push(l[p]),c.push(l[p+1]);return[u,c]}var kv=v({multiRNNCell_:_3});function O3(r,t,e,o=!1){let n=N(r,"logits","multinomial"),s=n.size,i=n.rank;if(s<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${s}.`);if(i>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${i}`);e=e||Math.random();let l={logits:i===1?D(n,[1,-1]):n},u={numSamples:t,seed:e,normalized:o},c=k.runKernel(Wu,l,u);return i===1?D(c,[c.size]):c}var Ev=v({multinomial_:O3});function L3(r,t){let e=N(r,"a","notEqual","string_or_numeric"),o=N(t,"b","notEqual","string_or_numeric");[e,o]=_t(e,o),Tt(e.shape,o.shape);let n={a:e,b:o};return k.runKernel(nl,n)}var tn=v({notEqual_:L3});function P3(r,t,e=1,o=0,n="int32"){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);let i={indices:N(r,"indices","oneHot","int32")},a={dtype:n,depth:t,onValue:e,offValue:o};return k.runKernel(Hi,i,a)}var Nl=v({oneHot_:P3});function z3(r){let e={x:N(r,"x","onesLike")};return k.runKernel(Ui,e)}var Ke=v({onesLike_:z3});function M3(r,t){let e=N(r,"v1","outerProduct"),o=N(t,"v2","outerProduct");E(e.rank===1&&o.rank===1,()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${e.rank} and ${o.rank}.`);let n=D(e,[-1,1]),s=D(o,[1,-1]);return Dt(n,s)}var $v=v({outerProduct_:M3});function B3(r,t,e=0){let o=N(r,"x","pad");if(o.rank===0)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");let n={paddings:t,constantValue:e},s={x:o};return k.runKernel(qi,s,n)}var Rr=v({pad_:B3});function V3(r,t,e=0){return E(t.length===2,()=>"Invalid number of paddings. Must be length of 2."),Rr(r,[t],e)}var Av=v({pad1d_:V3});function G3(r,t,e=0){return E(t.length===2&&t[0].length===2&&t[1].length===2,()=>"Invalid number of paddings. Must be length of 2 each."),Rr(r,t,e)}var Dv=v({pad2d_:G3});function W3(r,t,e=0){return E(t.length===3&&t[0].length===2&&t[1].length===2&&t[2].length===2,()=>"Invalid number of paddings. Must be length of 2 each."),Rr(r,t,e)}var Rv=v({pad3d_:W3});function U3(r,t,e=0){return E(t.length===4&&t[0].length===2&&t[1].length===2&&t[2].length===2&&t[3].length===2,()=>"Invalid number of paddings. Must be length of 2 each."),Rr(r,t,e)}var Fv=v({pad4d_:U3});function H3(r,t,e){let o=N(r,"x","spaceToBatchND");E(o.rank>=1+t.length,()=>`input rank ${o.rank} should be > than [blockShape] ${t.length}`),E(e.length===t.length,()=>`paddings.shape[0] ${e.length} must be equal to [blockShape] ${t.length}`),E(o.shape.reduce((i,a,l)=>l>0&&l<=t.length?i&&(a+e[l-1][0]+e[l-1][1])%t[l-1]===0:i,!0),()=>`input spatial dimensions ${o.shape.slice(1)} with paddings ${e.toString()} must be divisible by blockShapes ${t.toString()}`);let n={x:o},s={blockShape:t,paddings:e};return k.runKernel(oa,n,s)}var Sa=v({spaceToBatchND_:H3});function K3(r,t,e,o,n,s,i){n==null&&(n=[1,1]),s==null&&(s=1),o===0&&(o="valid");let a=N(r,"x","maxPool"),l=a,u=!1;a.rank===3&&(u=!0,l=D(a,[1,a.shape[0],a.shape[1],a.shape[2]])),E(nr(s,n),()=>`Error in pool: Either strides or dilations must be 1. Got strides ${s} and dilations '${n}'`);let c=Kw(l.shape,t,s,n,o),p=[c.dilationHeight,c.dilationWidth],m;o==="same"?m=j3([c.filterHeight,c.filterWidth],p):m=[[0,0],[0,0]];let f=p[0]===1&&p[1]===1,[h,g]=q3([c.inHeight,c.inWidth],p,m),d=f?o:"valid",x=f?l:Sa(l,p,h),S=(e==="avg"?()=>ha(x,t,s,d,i):()=>Ca(x,t,s,d,i))(),w=f?S:da(S,p,g);return u?D(w,[w.shape[1],w.shape[2],w.shape[3]]):w}function q3(r,t,e){let o=e.map(c=>c[0]),n=e.map(c=>c[1]),s=r.concat(o,n),i=t.map((c,p)=>(c-s[p]%c)%c),a=n.map((c,p)=>c+i[p]),l=t.map((c,p)=>[o[p],a[p]]),u=t.map((c,p)=>[0,i[p]]);return[l,u]}function j3(r,t){let o=r.map((i,a)=>i+(i-1)*(t[a]-1)).map(i=>i-1),n=o.map(i=>Math.floor(i/2)),s=o.map((i,a)=>i-n[a]);return o.map((i,a)=>[n[a],s[a]])}var Wd=v({pool_:K3});function X3(r,t){let e=N(r,"x","prelu"),o=N(t,"alpha","prelu"),n={x:e,alpha:o};return k.runKernel(ji,n)}var Na=v({prelu_:X3});function Y3(r,t=null,e=!1){let o=N(r,"x","prod");o.dtype==="bool"&&(o=X(o,"int32"));let n={x:o},s={axis:t,keepDims:e};return k.runKernel(Xi,n,s)}var Ud=v({prod_:Y3});function Z3(r,t,e,o){let n=r.map((c,p)=>N(c,`tensors${p}`,"raggedGather","int32")),s=N(t,"paramsDenseValues","raggedGather"),i=N(e,"indices","raggedGather","int32"),a={paramsNestedSplits:n,paramsDenseValues:s,indices:i},l={outputRaggedRank:o},u=k.runKernel(qu,a,l);return{outputNestedSplits:u.slice(0,u.length-1),outputDenseValues:u[u.length-1]}}var _v=v({raggedGather_:Z3});function J3(r,t,e){let o=N(r,"starts","raggedRange"),n=N(t,"limits","raggedRange",o.dtype),s=N(e,"deltas","raggedRange",o.dtype),i={starts:o,limits:n,deltas:s},a=k.runKernel(ju,i);return{rtNestedSplits:a[0],rtDenseValues:a[1]}}var Ov=v({raggedRange_:J3});function Q3(r,t,e,o,n){let s=N(r,"shape","raggedTensorToTensor","int32"),i=N(t,"values","raggedTensorToTensor"),a=N(e,"defaultValue","raggedTensorToTensor",i.dtype),l=o.map((p,m)=>N(p,`tensors${m}`,"raggedTensorToTensor","int32")),u={shape:s,values:i,defaultValue:a,rowPartitionTensors:l},c={rowPartitionTypes:n};return k.runKernel(Xu,u,c)}var Lv=v({raggedTensorToTensor_:Q3});function tB(r,t,e){he(r);let o=Pt(r),n=null;if(e==null||e==="float32")n=new Float32Array(o);else if(e==="int32")n=new Int32Array(o);else if(e==="bool")n=new Uint8Array(o);else throw new Error(`Unknown data type ${e}`);for(let s=0;s<o;s++)n[s]=t();return k.makeTensor(n,r,e)}var Pv=v({rand_:tB});var jd=sm(Tm());var Tl=class{constructor(t,e,o,n,s){this.mean=t,this.stdDev=e,this.dtype=o,this.nextVal=NaN,this.truncated=n,this.truncated&&(this.upper=this.mean+this.stdDev*2,this.lower=this.mean-this.stdDev*2);let i=s||Math.random();this.random=jd.alea(i.toString())}nextValue(){if(!isNaN(this.nextVal)){let n=this.nextVal;return this.nextVal=NaN,n}let t,e,o=!1;for(;!o;){let n,s,i;do n=2*this.random()-1,s=2*this.random()-1,i=n*n+s*s;while(i>=1||i===0);let a=Math.sqrt(-2*Math.log(i)/i);t=this.mean+this.stdDev*n*a,e=this.mean+this.stdDev*s*a,(!this.truncated||this.isValidTruncated(t))&&(o=!0)}return(!this.truncated||this.isValidTruncated(e))&&(this.nextVal=this.convertValue(e)),this.convertValue(t)}convertValue(t){return this.dtype==null||this.dtype==="float32"?t:Math.round(t)}isValidTruncated(t){return t<=this.upper&&t>=this.lower}},Kd=class{constructor(t,e,o,n){this.alpha=t,this.beta=1/e,this.dtype=o;let s=n||Math.random();this.randu=jd.alea(s.toString()),this.randn=new Tl(0,1,o,!1,this.randu()),t<1?this.d=t+2/3:this.d=t-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let t,e,o,n,s,i;for(;;){do n=this.randn.nextValue(),i=1+this.c*n;while(i<=0);if(i*=i*i,t=n*n,e=1-.331*t*t,o=.5*t+this.d*(1-i+Math.log(i)),s=this.randu(),s<e||Math.log(s)<o)break}return i=1/this.beta*this.d*i,this.alpha<1&&(i*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(i)}convertValue(t){return this.dtype==="float32"?t:Math.round(t)}},qd=class{constructor(t=0,e=1,o,n){if(this.canReturnFloat=()=>this.dtype==null||this.dtype==="float32",this.min=t,this.range=e-t,this.dtype=o,n==null&&(n=Math.random()),typeof n=="number"&&(n=n.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${t} - ${e} <= 1 and dtype is not float`);this.random=jd.alea(n)}convertValue(t){return this.canReturnFloat()?t:Math.round(t)}nextValue(){return this.convertValue(this.min+this.range*this.random())}};function aB(r,t,e=1,o="float32",n){if(he(r),e==null&&(e=1),o==null&&(o="float32"),o!=="float32"&&o!=="int32")throw new Error(`Unsupported data type ${o}`);let s=new Kd(t,e,o,n),i=mt(r,o);for(let a=0;a<i.values.length;a++)i.values[a]=s.nextValue();return i.toTensor()}var tT=v({randomGamma_:aB});function lB(r,t=0,e=1,o,n){if(he(r),o!=null&&o==="bool")throw new Error(`Unsupported data type ${o}`);let s=new Tl(t,e,o,!1,n),i=mt(r,o);for(let a=0;a<i.values.length;a++)i.values[a]=s.nextValue();return i.toTensor()}var Il=v({randomNormal_:lB});function uB(r,t,e){if(t!=null&&t==="bool")throw new Error(`Unsupported data type ${t}`);return Il(r,0,1,t,e)}var eT=v({randomStandardNormal_:uB});function cB(r,t=0,e=1,o="float32",n){he(r);let s=mt(r,o),i=new qd(t,e,null,n);for(let a=0;a<s.values.length;a++)s.values[a]=i.nextValue();return s.toTensor()}var io=v({randomUniform_:cB});function pB(r,t,e,o){return io(r,t,e,"int32",o)}var rT=v({randomUniformInt_:pB});function _n(r,t,e=1,o="float32"){if(e===0)throw new Error("Cannot have a step of zero");let n={start:r,stop:t,step:e,dtype:o};return k.runKernel(Yu,{},n)}function mB(r){let e={input:N(r,"input","real")};return k.runKernel(Zu,e)}var qs=v({real_:mB});function fB(r){let e={x:N(r,"x","reciprocal")};return k.runKernel(Ts,e)}var Xd=v({reciprocal_:fB});function hB(r){let e={x:N(r,"x","relu")};return k.runKernel(Is,e)}var ir=v({relu_:hB});function dB(r){let e={x:N(r,"x","relu6")};return k.runKernel(ks,e)}var zc=v({relu6_:dB});function gB(r,t){let o={x:N(r,"x","reverse")},n={dims:t};return k.runKernel(Qi,o,n)}var Ve=v({reverse_:gB});function xB(r){let t=N(r,"x","reverse");return E(t.rank===1,()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`),Ve(t,0)}var oT=v({reverse1d_:xB});function yB(r,t){let e=N(r,"x","reverse");return E(e.rank===2,()=>`Error in reverse2D: x must be rank 2 but got rank ${e.rank}.`),Ve(e,t)}var nT=v({reverse2d_:yB});function bB(r,t){let e=N(r,"x","reverse");return E(e.rank===3,()=>`Error in reverse3D: x must be rank 3 but got rank ${e.rank}.`),Ve(e,t)}var sT=v({reverse3d_:bB});function wB(r,t){let e=N(r,"x","reverse");return E(e.rank===4,()=>`Error in reverse4D: x must be rank 4 but got rank ${e.rank}.`),Ve(e,t)}var iT=v({reverse4d_:wB});function CB(r){let e={x:N(r,"x","round")};return k.runKernel(Es,e)}var Mc=v({round_:CB});function SB(r){let e={x:N(r,"x","rsqrt","float32")};return k.runKernel($s,e)}var Bc=v({rsqrt_:SB});function NB(r){let e={x:N(r,"x","selu")};return k.runKernel(As,e)}var Vc=v({selu_:NB});function vB(r,t,e,o,n,s=[1,1],i="NHWC"){let a=N(r,"x","separableConv2d"),l=N(t,"depthwiseFilter","separableConv2d"),u=N(e,"pointwiseFilter","separableConv2d"),c=a,p=!1;if(a.rank===3&&(p=!0,c=D(a,[1,a.shape[0],a.shape[1],a.shape[2]])),i==="NCHW")throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");E(c.rank===4,()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`),E(l.rank===4,()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`),E(u.rank===4,()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`),E(u.shape[0]===1,()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`),E(u.shape[1]===1,()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`);let m=l.shape[2],f=l.shape[3];E(u.shape[2]===m*f,()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${m*f}, but got ${u.shape[2]}.`);let h=An(c,l,o,n,i,s),d=Ur(h,u,1,"valid",i);return p?D(d,[d.shape[1],d.shape[2],d.shape[3]]):d}var Gc=v({separableConv2d_:vB});async function TB(r,t){let e=N(r,"x","setdiff1d"),o=N(t,"y","setdiff1d");E(e.dtype===o.dtype,()=>`x and y should have the same dtype, but got x (${e.dtype}) and y (${o.dtype}).`),E(e.rank===1,()=>`x should be 1D tensor, but got x (${e.shape}).`),E(o.rank===1,()=>`y should be 1D tensor, but got y (${o.shape}).`);let n=await e.data(),s=await o.data(),i=new Set(s),a=0;for(let c=0;c<n.length;c++)i.has(n[c])||a++;let l=new Wt([a],e.dtype),u=new Wt([a],"int32");for(let c=0,p=0;c<n.length;c++)i.has(n[c])||(l.values[p]=n[c],u.values[p]=c,p++);return[l.toTensor(),u.toTensor()]}var aT=TB;function IB(r){let e={x:N(r,"x","sign")};return k.runKernel(Fs,e)}var Yd=v({sign_:IB});function kB(r){let e={x:N(r,"x","sin","float32")};return k.runKernel(Ds,e)}var Wc=v({sin_:kB});function EB(r){let e={x:N(r,"x","sinh")};return k.runKernel(Rs,e)}var Uc=v({sinh_:EB});function $B(r,t,e){let o=N(r,"x","slice1d");return E(o.rank===1,()=>`slice1d expects a rank-1 tensor, but got a rank-${o.rank} tensor`),Nt(o,[t],[e])}var Hc=v({slice1d_:$B});function AB(r,t,e){let o=N(r,"x","slice2d");return E(o.rank===2,()=>`slice2d expects a rank-2 tensor, but got a rank-${o.rank} tensor`),Nt(o,t,e)}var Im=v({slice2d_:AB});function DB(r,t,e){let o=N(r,"x","slice3d");return E(o.rank===3,()=>`slice3d expects a rank-3 tensor, but got a rank-${o.rank} tensor`),Nt(o,t,e)}var Kc=v({slice3d_:DB});function RB(r,t,e){let o=N(r,"x","slice4d");return E(o.rank===4,()=>`slice4d expects a rank-4 tensor, but got a rank-${o.rank} tensor`),Nt(o,t,e)}var kl=v({slice4d_:RB});function FB(r,t=-1){let e=N(r,"logits","softmax","float32");if(t===-1&&(t=e.rank-1),t!==e.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${e.rank} and dim was ${t}`);let o={logits:e},n={dim:t};return k.runKernel(sa,o,n)}var va=v({softmax_:FB});function _B(r){E(r.dtype==="complex64",()=>`The dtype for tf.spectral.fft() must be complex64 but got ${r.dtype}.`);let t={input:r};return k.runKernel(Ru,t)}var Ta=v({fft_:_B});function OB(r){E(r.dtype==="complex64",()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${r.dtype}.`);let t={input:r};return k.runKernel(Lu,t)}var js=v({ifft_:OB});function LB(r){let t=r.shape[r.shape.length-1],e=r.size/t,o;if(t<=2){let n=D(r,[e,t]);o=js(n)}else{let n=[e,2*(t-1)],s=D(qs(r),[e,t]),i=D(xa(r),[e,t]),a=Ve(Nt(s,[0,1],[e,t-2]),1),l=A(Ve(Nt(i,[0,1],[e,t-2]),1),st(-1)),u=Vt([s,a],1),c=Vt([i,l],1),p=D(Gr(u,c),[n[0],n[1]]);o=js(p)}if(o=qs(o),r.rank===3&&r.shape[0]!==0){let n=o,s=r.shape[0];o=D(o,[s,o.shape[0]/s,o.shape[1]]),n.dispose()}return o}var qc=v({irfft_:LB});function PB(r,t,e=0){let n={x:N(r,"x","split")},s={numOrSizeSplits:t,axis:e};return k.runKernel(na,n,s)}var Ge=v({split_:PB});function zB(r,t){E(r.dtype==="float32",()=>`The dtype for rfft() must be real value but got ${r.dtype}`);let e=r.shape[r.shape.length-1],o=r.size/e,n;if(t!=null&&t<e){let h=r.shape.map(d=>0),g=r.shape.map(d=>d);g[r.shape.length-1]=t,n=Nt(r,h,g),e=t}else if(t!=null&&t>e){let h=r.shape.map(g=>g);h[r.shape.length-1]=t-e,n=Vt([r,ne(h)],r.shape.length-1),e=t}else n=r;let s=dt(n),i=D(Gr(n,s),[o,e]),a=Ta(i),l=Math.floor(e/2)+1,u=qs(a),c=xa(a),p=Ge(u,[l,e-l],u.shape.length-1),m=Ge(c,[l,e-l],c.shape.length-1),f=n.shape.slice();return f[n.shape.length-1]=l,D(Gr(p[0],m[0]),f)}var Ia=v({rfft_:zB});function MB(r,t){let e=N(r,"a","squaredDifference"),o=N(t,"b","squaredDifference");[e,o]=_t(e,o),Tt(e.shape,o.shape);let n={a:e,b:o},s={};return k.runKernel(Ps,n,s)}var jc=v({squaredDifference_:MB});function BB(r,t){let e=N(r,"x","squeeze","string_or_numeric");return D(e,lw(e.shape,t).newShape)}var ao=v({squeeze_:BB});function VB(r,t=0){let e=dl(r,"tensors","stack","string_or_numeric");E(e.length>=1,()=>"Pass at least one tensor to tf.stack"),e.length>0&&E(t<=e[0].rank,()=>"Axis must be <= rank of the tensor");let o=e,n={axis:t};return k.runKernel(Ki,o,n)}var Ne=v({stack_:VB});function GB(r,t=0){let o={x:N(r,"x","step")},n={alpha:t};return k.runKernel(Vs,o,n)}var Ro=v({step_:GB});function WB(r,t,e,o,n=0,s=0,i=0,a=0,l=0){let c={x:N(r,"x","stridedSlice","string_or_numeric")},p={begin:t,end:e,strides:o,beginMask:n,endMask:s,ellipsisMask:i,newAxisMask:a,shrinkAxisMask:l};return k.runKernel(uc,c,p)}var Zd=v({stridedSlice_:WB});function UB(r){let e={x:N(r,"x","tan","float32")};return k.runKernel(Ms,e)}var Jd=v({tan_:UB});function ke(r,t){xo(r);let e=Vr(r,t);if(e.length!==1)throw new Error("tensor1d() requires values to be a flat/TypedArray");return Er(r,null,e,t)}function Xs(r,t,e){if(xo(r),t!=null&&t.length!==2)throw new Error("tensor2d() requires shape to have two numbers");let o=Vr(r,e);if(o.length!==2&&o.length!==1)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(o.length===1&&t==null)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return Er(r,t,o,e)}function Qd(r,t,e){if(xo(r),t!=null&&t.length!==3)throw new Error("tensor3d() requires shape to have three numbers");let o=Vr(r,e);if(o.length!==3&&o.length!==1)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(o.length===1&&t==null)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return Er(r,t,o,e)}function lT(r,t,e){if(xo(r),t!=null&&t.length!==4)throw new Error("tensor4d() requires shape to have four numbers");let o=Vr(r,e);if(o.length!==4&&o.length!==1)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(o.length===1&&t==null)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return Er(r,t,o,e)}function uT(r,t,e){if(xo(r),t!=null&&t.length!==5)throw new Error("tensor5d() requires shape to have five numbers");let o=Vr(r,e);if(o.length!==5&&o.length!==1)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(o.length===1&&t==null)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return Er(r,t,o,e)}function cT(r,t,e){if(xo(r),t!=null&&t.length!==6)throw new Error("tensor6d() requires shape to have six numbers");let o=Vr(r,e);if(o.length!==6&&o.length!==1)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(o.length===1&&t==null)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return t=t||o,Er(r,t,o,e)}function pT(r,t,e){let o=t.rank>1?t.shape[t.rank-1]:1,n=t.rank>1?t.rank-1:1,s=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${e.shape}, indices.shape: ${t.shape}, shape: ${r}, sliceDim: ${o}, and batchDim: ${n}.`;if(e.rank<n)throw new Error(s+` update.rank < ${n}. `);if(r.length<o+(e.rank-n))throw new Error(s+` Output shape length < ${o+(e.rank-n)}`);if(e.rank!==n+r.length-o)throw new Error(s+` update.rank != ${n+r.length-o}`);for(let i=0;i<n;++i)if(e.shape[i]!==t.shape[i])throw new Error(s+` updates.shape[${i}] (${e.shape[i]}) != indices.shape[${i}] (${t.shape[i]}).`);for(let i=0;i<e.rank-n;++i)if(e.shape[i+n]!==r[i+o])throw new Error(s+` updates.shape[${i+n}] (${e.shape[i+n]}) != shape[${i+n}] (${r[i+n]})`)}function km(r,t,e){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(r.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${r.rank}.`);if(t.dtype!=="int32")throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(e.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${e}`);if(e.length===0){if(t.size===0)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(r.size===0)throw new Error(`Updates specified for empty output. updates shape: ${r.shape}`)}pT(e,t,r)}function HB(r,t,e){let o=t.shape.length,n=o>1?t.shape[o-1]:1,s=e.length,i=1;for(let p=n;p<s;++p)i*=e[p];let a=n<1?1:n,l=Pt(t.shape)/a,u=[...gn(e.slice(0,n)),1],c=Pt(e);return{sliceRank:n,numUpdates:l,sliceSize:i,strides:u,outputSize:c}}function KB(r,t,e){let o=N(r,"tensor","tensorScatterupdate"),n=N(t,"indices","tensorScatterupdate","int32"),s=N(e,"updates","tensorScatterupdate");if(km(s,n,o.shape),o.dtype!==s.dtype)throw new Error(`tensor and updates must have the same dtype, instead they are ${o.dtype} and ${s.dtype}.`);let i={tensor:o,indices:n,updates:s},a={};return k.runKernel(ec,i,a)}var fT=v({tensorScatterUpdate_:KB});function qB(r,t=1,e=!0){let o=N(r,"x","topk");if(o.rank===0)throw new Error("topk() expects the input to be of rank 1 or higher");let n=o.shape[o.shape.length-1];if(t<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>n)throw new Error(`'k' passed to topk() must be <= the last dimension (${n}) but got ${t}`);let s={x:o},i={k:t,sorted:e},[a,l]=k.runKernel(fc,s,i);return{values:a,indices:l}}var tg=v({topk_:qB});function jB(r,t=0,e=1,o,n){if(he(r),o!=null&&o==="bool")throw new Error("Unsupported data type $ { dtype }");let s=new Tl(t,e,o,!0,n),i=mt(r,o);for(let a=0;a<i.values.length;a++)i.values[a]=s.nextValue();return i.toTensor()}var Xc=v({truncatedNormal_:jB});function XB(r,t=0){let e=N(r,"x","unique","string_or_numeric");E(e.rank>0,()=>"The input tensor must be at least 1D");let o={x:e},n={axis:t},[s,i]=k.runKernel(dc,o,n);return{values:s,indices:i}}var eg=v({unique_:XB});function YB(r,t,e){let o=N(r,"x","unsortedSegmentSum"),n=N(t,"segmentIds","unsortedSegmentSum","int32");E(Xn(e),()=>"numSegments must be of dtype int");let s={x:o,segmentIds:n},i={numSegments:e};return k.runKernel(aa,s,i)}var Yc=v({unsortedSegmentSum_:YB});function ZB(r,t=0){let e=N(r,"x","unstack","string_or_numeric");E(t>=-e.shape.length&&t<e.shape.length,()=>`Axis = ${t} is not in [-${e.shape.length}, ${e.shape.length})`);let o={value:e},n={axis:t};return k.runKernel(ia,o,n)}var We=v({unstack_:ZB});function hT(r,t){return vm(r,t,"right")}function rg(r,t=!0,e,o){return k.makeVariable(r,t,e,o)}function og(r,t){let e=[];for(let s=0;s<t.length;s++)t[s]&&e.push(s);let o=mt(r,"int32"),n=mt([e.length,r.length],"int32");for(let s=0;s<e.length;s++){let i=o.indexToLoc(e[s]),a=s*r.length;n.values.set(i,a)}return n.toTensor()}async function JB(r){let t=N(r,"condition","whereAsync","bool"),e=await t.data(),o=og(t.shape,e);return r!==t&&t.dispose(),o}var ng=JB;async function QB(r,t,e){let o=N(r,"tensor","boolMask"),n=N(t,"mask","boolMask","bool"),s=e??0,i=n.rank,a=o.shape;E(i>0,()=>"mask cannot be scalar"),Te(a.slice(s,s+i),n.shape,"mask's shape must match the first K dimensions of tensor's shape,");let l=1;for(let g=s;g<s+i;g++)l*=a[g];let u=a.slice(0,s).concat([l],a.slice(s+i)),c=D(o,u),p=D(n,[-1]),m=await ng(p),f=ao(m,[1]),h=Fn(c,f,s);return r!==o&&o.dispose(),t!==n&&n.dispose(),f.dispose(),c.dispose(),p.dispose(),m.dispose(),h}var tV=QB;function eV(r,t,e){let o=N(r,"x","transpose");if(t==null&&(t=o.shape.map((i,a)=>a).reverse()),E(o.rank===t.length,()=>`Error in transpose: rank of input ${o.rank} must match length of perm ${t}.`),t.forEach(i=>{E(i>=0&&i<o.rank,()=>`All entries in 'perm' must be between 0 and ${o.rank-1} but got ${t}`)}),o.rank<=1)return o.clone();let n={x:o},s={perm:t};return o.dtype==="complex64"?M(()=>{let i=qs(o),a=xa(o);return i=k.runKernel(wn,{x:i},s),a=k.runKernel(wn,{x:a},s),e&&(a=Ft(a)),Gr(i,a)}):k.runKernel(wn,n,s)}var Rt=v({transpose_:eV});function rV(r,t,e,o,n=!0){let s=N(r,"v","movingAverage"),i=N(t,"x","movingAverage"),a=N(e,"decay","movingAverage");Aw(s,i),E(eo(s.shape,i.shape),()=>"Shape mismatch in v and x");let l=st(1),u=tt(l,a),c=A(tt(i,s),u);if(n){E(o!=null,()=>"When using zeroDebias: true, step is required.");let p=N(o,"step","movingAverage");c=ot(c,tt(l,Ar(a,p)))}return U(s,c)}var oV=v({movingAverage_:rV});function nV(r,t,e){he(e);let o=N(r,"indices","scatterND","int32"),n=N(t,"updates","scatterND");km(n,o,e);let s={indices:o,updates:n},i={shape:e};return k.runKernel(tc,s,i)}var sV=v({scatterND_:nV});function dT(r,t,e,o){if(r.dtype!=="int32")throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${r.dtype}.`);if(r.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${r.shape}.`);let n=r.rank>0?r.shape[0]:1,s=r.rank>1?r.shape[1]:1;if(e.length!==s)throw new Error(`outputShape has incorrect number of elements:, ${e.length}, should be: ${s}.`);let i=t.size;if(!(t.rank===0||t.rank===1&&i===n))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${n}]`);if(t.dtype!==o.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}function aV(r,t,e,o=0){he(e);let n=N(r,"sparseIndices","sparseToDense","int32"),s=N(t,"sparseValues","sparseToDense","string_or_numeric"),i=N(o,"defaultValue","sparseToDense",s.dtype);dT(n,s,e,i);let a={sparseIndices:n,sparseValues:s,defaultValue:i},l={outputShape:e};return k.runKernel(ac,a,l)}var lV=v({sparseToDense_:aV});function uV(r,t){let e=N(t,"indices","gatherND","int32"),n={params:N(r,"x","gatherND","string_or_numeric"),indices:e};return k.runKernel(Ou,n)}var cV=v({gatherND_:uV});function gT(r,t){if(t==null)return r.shape.slice();if(eo(r.shape,t))return t;if(r.shape.length===t.length){let e=[];for(let o=0;o<r.shape.length;o++)t[o]==null&&r.shape[o]!=null?e.push(r.shape[o]):e.push(t[o]);return e}return t}function pV(r,t,e,o){let n=N(r,"x","dropout");if(E(n.dtype==="float32",()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${n.dtype} tensor instead.`),E(t>=0&&t<1,()=>`rate must be a float in the range [0, 1), but got ${t}.`),t===0)return r instanceof At?n.clone():n;let s=gT(n,e),i=1-t,a=ot(Rn(U(io(s,0,1,"float32",o),i)),i);return A(n,a)}var s0=v({dropout_:pV});function i0(r){return Math.floor(Math.pow(2,Math.ceil(Math.log(r)/Math.log(2))))}function Em(r,t,e){let o=1-r%2,n=new Float32Array(r);for(let s=0;s<r;++s){let i=2*Math.PI*s/(r+o-1);n[s]=t-e*Math.cos(i)}return ke(n,"float32")}async function mV(r,t,e=1){let o=N(r,"predictions","inTopK"),n=N(t,"targets","inTopK");E(o.rank>1,()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${o.rank}`),E(o.rank-1===n.rank,()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${o.rank} and targets rank ${n.rank}`),Te(o.shape.slice(0,o.shape.length-1),n.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");let s=o.shape[o.shape.length-1];E(e>0&&e<=s,()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${s}), but got ${e}`);let i=await o.data(),a=await n.data(),[l,u]=[i.length/s,s],c=uw("bool",l);for(let p=0;p<l;p++){let m=p*u,f=i.subarray(m,m+u),h=[];for(let g=0;g<f.length;g++)h.push({value:f[g],index:g});h.sort((g,d)=>d.value-g.value),c[p]=0;for(let g=0;g<e;g++)if(h[g].index===a[p]){c[p]=1;break}}return r!==o&&o.dispose(),t!==n&&n.dispose(),He(c,n.shape,"bool")}var fV=mV;var ka={};qt(ka,{conv2d:()=>xT,depthwiseConv2d:()=>yT,matMul:()=>bT});function hV(r,t,e,o,n,s="NHWC",i){let a=r;r.rank===3&&(a=D(r,[1,r.shape[0],r.shape[1],r.shape[2]]));let l=t;l.rank===3&&(l=D(t,[1,t.shape[0],t.shape[1],t.shape[2]])),E(a.rank===4,()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${a.shape}.`),E(l.rank===4,()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`),E(e.length===4,()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${e}.`);let u=s==="NHWC"?a.shape[3]:a.shape[1],c=s==="NHWC"?l.shape[3]:l.shape[1];E(u===e[2],()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${e[2]}.`),E(c===e[3],()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${e[3]}).`),te("conv2dDerFilter",n,i);let p={x:a,dy:l},m={strides:o,pad:n,dataFormat:s,dimRoundingMode:i,filterShape:e};return k.runKernel(wu,p,m)}var Zc=v({conv2DBackpropFilter_:hV});function El(r,t,e){if(e==null||e==="linear")return r;if(e==="relu")return A(r,Ro(t));throw new Error(`Cannot compute gradient for fused activation ${e}.`)}function $l(r,t){let e=t,o=Xt(r.shape,t.shape);return o.length>0&&(e=nt(e,o)),D(e,r.shape)}function Al(r,t,e,o){if(t==="linear")return r;if(t==="relu")return ir(r);if(t==="elu")return Dn(r);if(t==="relu6")return zc(r);if(t==="prelu")return Na(r,e);if(t==="leakyrelu")return ya(r,o);if(t==="sigmoid")return Cr(r);throw new Error(`Unknown fused activation ${t}.`)}var Dl=(r,t)=>!(r>0)||t==="linear";function dV({x:r,filter:t,strides:e,pad:o,dataFormat:n="NHWC",dilations:s=[1,1],dimRoundingMode:i,bias:a,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(l=l||"linear",Dl(k.state.gradientDepth,l)===!1){E(n==="NHWC",()=>`Error in fused conv2d: got dataFormat of ${n} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`);let $=Ur(r,t,e,o,n,s,i);return a!=null&&($=U($,a)),Al($,l,u,c)}let p=N(r,"x","conv2d","float32"),m=N(t,"filter","conv2d","float32"),f=p,h=!1;p.rank===3&&(h=!0,f=D(p,[1,p.shape[0],p.shape[1],p.shape[2]])),E(f.rank===4,()=>`Error in fused conv2d: input must be rank 4, but got rank ${f.rank}.`),E(m.rank===4,()=>`Error in fused conv2d: filter must be rank 4, but got rank ${m.rank}.`),te("fused conv2d",o,i);let g=n==="NHWC"?f.shape[3]:f.shape[1];E(m.shape[2]===g,()=>`Error in conv2d: depth of input (${g}) must match input depth for filter ${m.shape[2]}.`),E(nr(e,s),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${e} and dilations '${s}'`);let d=bl(f.shape,m.shape,e,s,o,i),x;a!=null&&(x=N(a,"bias","fused conv2d"),[x]=_t(x,p),n==="NHWC"?Tt(d.outShape,x.shape):(E(x.shape.length<=1,()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${x.shape.length}.`),E(x.shape.length===0||x.shape[0]===d.outChannels||x.shape[0]===1,()=>`Error in fused conv2d: bias shape (${x.shape}) is not compatible with the number of output channels (${d.outChannels})`)));let b;if(u!=null){let $=u.shape;if(E($.length<=1||$.length===3,()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${$.length}.`),$.length===1)E($[0]===1||$[0]===d.outChannels,()=>`Error in fused conv2d: PReLU activation weights (${$}) is not compatible with the number of output channels (${d.outChannels}).`);else if($.length===3)try{Tt($,d.outShape)}catch{let F=`Error in fused conv2d: PReLU activation weights (${$}) is not compatible with the output shape of the conv2d (${d.outShape}).`;throw Error(F)}b=N(u,"prelu weights","fused conv2d")}let S=($,R)=>{E(n==="NHWC",()=>`Error in gradient of fused conv2D: got dataFormat of ${n} but only NHWC is currently supported.`);let[F,O,P,B]=R,V=El($,P,l);E(yo(s),()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`);let G=Dc(O.shape,V,F,e,o),H=Zc(O,V,F.shape,e,o),W=[G,H];if(B!=null){let j=$l(B,V);W.push(j)}return W},w={x:f,filter:m,bias:x,preluActivationWeights:b},T={strides:e,pad:o,dataFormat:n,dilations:s,dimRoundingMode:i,activation:l,leakyreluAlpha:c};return a==null?Hr((R,F,O)=>{let P=k.runKernel(al,w,T);return O([F,R,P]),h&&(P=D(P,[P.shape[1],P.shape[2],P.shape[3]])),{value:P,gradFunc:S}})(f,m):Hr((R,F,O,P)=>{let B=k.runKernel(al,w,T);return P([F,R,B,O]),h&&(B=D(B,[B.shape[1],B.shape[2],B.shape[3]])),{value:B,gradFunc:S}})(f,m,x)}var xT=v({fusedConv2d_:dV});function gV(r,t,e,o,n,s=[1,1],i){let a=r;r.rank===3&&(a=D(r,[1,r.shape[0],r.shape[1],r.shape[2]]));let l=t;l.rank===3&&(l=D(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let u={x:a,dy:l},c={strides:o,pad:n,dimRoundingMode:i,dilations:s,filterShape:e};return k.runKernel(ku,u,c)}var sg=v({depthwiseConv2dNativeBackpropFilter_:gV});function xV(r,t,e,o,n,s=[1,1],i){let a=t,l=!1;t.rank===3&&(l=!0,a=D(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let u={dy:a,filter:e},c={strides:o,pad:n,dimRoundingMode:i,dilations:s,inputShape:r},p=k.runKernel(Eu,u,c);return l?D(p,[p.shape[1],p.shape[2],p.shape[3]]):p}var ig=v({depthwiseConv2dNativeBackpropInput_:xV});function yV({x:r,filter:t,strides:e,pad:o,dataFormat:n="NHWC",dilations:s=[1,1],dimRoundingMode:i,bias:a,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(Dl(k.state.gradientDepth,l)===!1){let T=An(r,t,e,o,n,s,i);return a!=null&&(T=U(T,a)),Al(T,l,u,c)}let p=N(r,"x","depthwiseConv2d","float32"),m=N(t,"filter","depthwiseConv2d","float32"),f=p,h=!1;p.rank===3&&(h=!0,f=D(p,[1,p.shape[0],p.shape[1],p.shape[2]])),E(f.rank===4,()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${f.rank}.`),E(m.rank===4,()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${m.rank}.`),E(f.shape[3]===m.shape[2],()=>`Error in fused depthwiseConv2d: number of input channels (${f.shape[3]}) must match the inChannels dimension in filter ${m.shape[2]}.`),s==null&&(s=[1,1]),E(nr(e,s),()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${e} and dilations '${s}'`),te("fused depthwiseConv2d",o,i);let g=bl(f.shape,m.shape,e,s,o,i,!0),d;a!=null&&(d=N(a,"bias","fused conv2d"),[d]=_t(d,p),Tt(g.outShape,d.shape));let x;u!=null&&(x=N(u,"prelu weights","fused depthwiseConv2d"));let b=(T,$)=>{E(yo(s),()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${s}'`);let[R,F,O,P]=$,B=El(T,O,l),V=ig(F.shape,B,R,e,o,s,i),G=sg(F,B,R.shape,e,o,s,i);if(P!=null){let H=$l(d,B);return[V,G,H]}return[V,G]},S={x:f,filter:m,bias:d,preluActivationWeights:x},w={strides:e,pad:o,dataFormat:n,dilations:s,dimRoundingMode:i,activation:l,leakyreluAlpha:c};return a==null?Hr(($,R,F)=>{let O=k.runKernel(ll,S,w);return F([R,$,O]),h&&(O=D(O,[O.shape[1],O.shape[2],O.shape[3]])),{value:O,gradFunc:b}})(f,m):Hr(($,R,F,O)=>{let P=k.runKernel(ll,S,w);return O([R,$,P,F]),h&&(P=D(P,[P.shape[1],P.shape[2],P.shape[3]])),{value:P,gradFunc:b}})(f,m,d)}var yT=v({fusedDepthwiseConv2d_:yV});function bV({a:r,b:t,transposeA:e=!1,transposeB:o=!1,bias:n,activation:s="linear",preluActivationWeights:i,leakyreluAlpha:a=.2}){if(Dl(k.state.gradientDepth,s)===!1){let B=Dt(r,t,e,o);return n!=null&&(B=U(B,n)),Al(B,s,i,a)}let l=N(r,"a","fused matMul"),u=N(t,"b","fused matMul");[l,u]=_t(l,u);let c=e?l.shape[l.rank-2]:l.shape[l.rank-1],p=o?u.shape[u.rank-1]:u.shape[u.rank-2],m=e?l.shape[l.rank-1]:l.shape[l.rank-2],f=o?u.shape[u.rank-2]:u.shape[u.rank-1],h=l.shape.slice(0,-2),g=u.shape.slice(0,-2),d=Pt(h),x=Pt(g);E(c===p,()=>`Error in fused matMul: inner shapes (${c}) and (${p}) of Tensors with shapes ${l.shape} and ${u.shape} and transposeA=${e} and transposeB=${o} must match.`);let S=Tt(l.shape.slice(0,-2),u.shape.slice(0,-2)).concat([m,f]),w=e?D(l,[d,c,m]):D(l,[d,m,c]),T=o?D(u,[x,f,p]):D(u,[x,p,f]),$;n!=null&&($=N(n,"bias","fused matMul"),[$]=_t($,l),Tt(S,$.shape));let R;i!=null&&(R=N(i,"prelu weights","fused matMul"));let F=(B,V)=>{let[G,H,W,j]=V,Z=El(D(B,W.shape),W,s),q,J;if(!e&&!o?(q=Dt(Z,H,!1,!0),J=Dt(G,Z,!0,!1)):!e&&o?(q=Dt(Z,H,!1,!1),J=Dt(Z,G,!0,!1)):e&&!o?(q=Dt(H,Z,!1,!0),J=Dt(G,Z,!1,!1)):(q=Dt(H,Z,!0,!0),J=Dt(Z,G,!0,!0)),n!=null){let et=$l(j,Z);return[q,J,et]}else return[q,J]},O={a:w,b:T,bias:$,preluActivationWeights:R},P={transposeA:e,transposeB:o,activation:s,leakyreluAlpha:a};return n==null?Hr((V,G,H)=>{let W=k.runKernel(il,O,P);return H([V,G,W]),{value:D(W,S),gradFunc:F}})(w,T):Hr((V,G,H,W)=>{let j=k.runKernel(il,O,P);return W([V,G,j,H]),{value:D(j,S),gradFunc:F}})(w,T,$)}var bT=v({fusedMatMul_:bV});function wV(r){return Em(r,.54,.46)}var wT=v({hammingWindow_:wV});function CV(r){return Em(r,.5,.5)}var ag=v({hannWindow_:CV});function SV(r,t,e,o=!1,n=0){let s=0,i=[];for(;s+t<=r.size;)i.push(Nt(r,s,t)),s+=e;if(o)for(;s<r.size;){let a=s+t-r.size,l=Vt([Nt(r,s,t-a),Ao([a],n)]);i.push(l),s+=e}return i.length===0?Xs([],[0,t]):D(Vt(i),[i.length,t])}var lg=v({frame_:SV});function NV(r,t,e,o,n=ag){o==null&&(o=i0(t));let s=lg(r,t,e),i=A(s,n(t));return Ia(i,o)}var CT=v({stft_:NV});function vV(r,t,e,o,n="bilinear",s=0){let i=N(r,"image","cropAndResize"),a=N(t,"boxes","cropAndResize","float32"),l=N(e,"boxInd","cropAndResize","int32"),u=a.shape[0];E(i.rank===4,()=>`Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`),E(a.rank===2&&a.shape[1]===4,()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${a.shape}.`),E(l.rank===1&&l.shape[0]===u,()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${a.shape}.`),E(o.length===2,()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${o.length}.`),E(o[0]>=1&&o[1]>=1,()=>`cropSize must be atleast [1,1], but was ${o}`),E(n==="bilinear"||n==="nearest",()=>`method must be bilinear or nearest, but was ${n}`);let c={image:i,boxes:a,boxInd:l},p={method:n,extrapolationValue:s,cropSize:o};return k.runKernel(vu,c,p)}var ST=v({cropAndResize_:vV});function TV(r){let t=N(r,"image","flipLeftRight","float32");E(t.rank===4,()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`);let e={image:t};return k.runKernel(_u,e,{})}var NT=v({flipLeftRight_:TV});function IV(r){let t=N(r,"image","grayscaleToRGB"),e=t.rank-1,o=t.shape[e];E(t.rank>=2,()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`),E(o===1,()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${o}.`);let n=new Array(t.rank);return n.fill(1,0,e),n[e]=3,sr(t,n)}var vT=v({grayscaleToRGB_:IV});function kV(r,t,e=0,o=.5){let n=N(r,"image","rotateWithOffset","float32");E(n.rank===4,()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${n.rank}.`);let s={image:n},i={radians:t,fillValue:e,center:o};return k.runKernel(gc,s,i)}var TT=v({rotateWithOffset_:kV});function Fo(r,t,e,o,n,s){o==null&&(o=.5),n==null&&(n=Number.NEGATIVE_INFINITY),s==null&&(s=0);let i=r.shape[0];return e=Math.min(e,i),E(0<=o&&o<=1,()=>`iouThreshold must be in [0, 1], but was '${o}'`),E(r.rank===2,()=>`boxes must be a 2D tensor, but was of rank '${r.rank}'`),E(r.shape[1]===4,()=>`boxes must have 4 columns, but 2nd dimension was ${r.shape[1]}`),E(t.rank===1,()=>"scores must be a 1D tensor"),E(t.shape[0]===i,()=>`scores has incompatible shape with boxes. Expected ${i}, but was ${t.shape[0]}`),E(0<=s&&s<=1,()=>`softNmsSigma must be in [0, 1], but was '${s}'`),{maxOutputSize:e,iouThreshold:o,scoreThreshold:n,softNmsSigma:s}}function EV(r,t,e,o=.5,n=Number.NEGATIVE_INFINITY){let s=N(r,"boxes","nonMaxSuppression","float32"),i=N(t,"scores","nonMaxSuppression","float32"),a=Fo(s,i,e,o,n);e=a.maxOutputSize,o=a.iouThreshold,n=a.scoreThreshold;let l={maxOutputSize:e,iouThreshold:o,scoreThreshold:n};return k.runKernel(Uu,{boxes:s,scores:i},l)}var IT=v({nonMaxSuppression_:EV});function kT(r,t,e){let o=$V(r,t,e),n=o<0?-(o+1):o;r.splice(n,0,t)}function $V(r,t,e){return DV(r,t,e||AV)}function AV(r,t){return r>t?1:r<t?-1:0}function DV(r,t,e){let o=0,n=r.length,s=0,i=!1;for(;o<n;){s=o+(n-o>>>1);let a=e(t,r[s]);a>0?o=s+1:(n=s,i=!a)}return i?o:-o-1}function ug(r,t,e,o,n){return a0(r,t,e,o,n,0)}function cg(r,t,e,o,n,s){return a0(r,t,e,o,n,0,!1,s,!0)}function pg(r,t,e,o,n,s){return a0(r,t,e,o,n,s,!0)}function a0(r,t,e,o,n,s,i=!1,a=!1,l=!1){let u=[];for(let d=0;d<t.length;d++)t[d]>n&&u.push({score:t[d],boxIndex:d,suppressBeginIndex:0});u.sort(ET);let c=s>0?-.5/s:0,p=[],m=[];for(;p.length<e&&u.length>0;){let d=u.pop(),{score:x,boxIndex:b,suppressBeginIndex:S}=d;if(x<n)break;let w=!1;for(let T=p.length-1;T>=S;--T){let $=RV(r,b,p[T]);if($>=o){w=!0;break}if(d.score=d.score*FV(o,c,$),d.score<=n)break}d.suppressBeginIndex=p.length,w||(d.score===x?(p.push(b),m.push(d.score)):d.score>n&&kT(u,d,ET))}let f=p.length,h=e-f;a&&h>0&&(p.push(...new Array(h).fill(0)),m.push(...new Array(h).fill(0)));let g={selectedIndices:p};return i&&(g.selectedScores=m),l&&(g.validOutputs=f),g}function RV(r,t,e){let o=r.subarray(t*4,t*4+4),n=r.subarray(e*4,e*4+4),s=Math.min(o[0],o[2]),i=Math.min(o[1],o[3]),a=Math.max(o[0],o[2]),l=Math.max(o[1],o[3]),u=Math.min(n[0],n[2]),c=Math.min(n[1],n[3]),p=Math.max(n[0],n[2]),m=Math.max(n[1],n[3]),f=(a-s)*(l-i),h=(p-u)*(m-c);if(f<=0||h<=0)return 0;let g=Math.max(s,u),d=Math.max(i,c),x=Math.min(a,p),b=Math.min(l,m),S=Math.max(x-g,0)*Math.max(b-d,0);return S/(f+h-S)}function FV(r,t,e){let o=Math.exp(t*e*e);return e<=r?o:0}function ET(r,t){return r.score-t.score||r.score===t.score&&t.boxIndex-r.boxIndex}async function _V(r,t,e,o=.5,n=Number.NEGATIVE_INFINITY){let s=N(r,"boxes","nonMaxSuppressionAsync"),i=N(t,"scores","nonMaxSuppressionAsync"),a=Fo(s,i,e,o,n);e=a.maxOutputSize,o=a.iouThreshold,n=a.scoreThreshold;let l=await Promise.all([s.data(),i.data()]),u=l[0],c=l[1],{selectedIndices:p}=ug(u,c,e,o,n);return s!==r&&s.dispose(),i!==t&&i.dispose(),ke(p,"int32")}var $T=_V;function OV(r,t,e,o=.5,n=Number.NEGATIVE_INFINITY,s=0){let i=N(r,"boxes","nonMaxSuppression"),a=N(t,"scores","nonMaxSuppression"),l=Fo(i,a,e,o,n,s);e=l.maxOutputSize,o=l.iouThreshold,n=l.scoreThreshold,s=l.softNmsSigma;let u={boxes:i,scores:a},c={maxOutputSize:e,iouThreshold:o,scoreThreshold:n,softNmsSigma:s},p=k.runKernel(Ku,u,c);return{selectedIndices:p[0],selectedScores:p[1]}}var AT=v({nonMaxSuppressionWithScore_:OV});async function LV(r,t,e,o=.5,n=Number.NEGATIVE_INFINITY,s=0){let i=N(r,"boxes","nonMaxSuppressionAsync"),a=N(t,"scores","nonMaxSuppressionAsync"),l=Fo(i,a,e,o,n,s);e=l.maxOutputSize,o=l.iouThreshold,n=l.scoreThreshold,s=l.softNmsSigma;let u=await Promise.all([i.data(),a.data()]),c=u[0],p=u[1],{selectedIndices:m,selectedScores:f}=pg(c,p,e,o,n,s);return i!==r&&i.dispose(),a!==t&&a.dispose(),{selectedIndices:ke(m,"int32"),selectedScores:ke(f)}}var DT=LV;function PV(r,t,e,o=.5,n=Number.NEGATIVE_INFINITY,s=!1){let i=N(r,"boxes","nonMaxSuppression"),a=N(t,"scores","nonMaxSuppression"),l=Fo(i,a,e,o,n,null),u=l.maxOutputSize,c=l.iouThreshold,p=l.scoreThreshold,m={boxes:i,scores:a},f={maxOutputSize:u,iouThreshold:c,scoreThreshold:p,padToMaxOutputSize:s},h=k.runKernel(Hu,m,f);return{selectedIndices:h[0],validOutputs:h[1]}}var RT=v({nonMaxSuppressionPadded_:PV});async function zV(r,t,e,o=.5,n=Number.NEGATIVE_INFINITY,s=!1){let i=N(r,"boxes","nonMaxSuppressionAsync"),a=N(t,"scores","nonMaxSuppressionAsync"),l=Fo(i,a,e,o,n,null),u=l.maxOutputSize,c=l.iouThreshold,p=l.scoreThreshold,[m,f]=await Promise.all([i.data(),a.data()]),{selectedIndices:h,validOutputs:g}=cg(m,f,u,c,p,s);return i!==r&&i.dispose(),a!==t&&a.dispose(),{selectedIndices:ke(h,"int32"),validOutputs:st(g,"int32")}}var FT=zV;function MV(r,t,e=!1,o=!1){let n=N(r,"images","resizeBilinear");E(n.rank===3||n.rank===4,()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${n.rank}.`),E(t.length===2,()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`),E(o===!1||e===!1,()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.");let s=n,i=!1;n.rank===3&&(i=!0,s=D(n,[1,n.shape[0],n.shape[1],n.shape[2]]));let[]=t,a={images:s},l={alignCorners:e,halfPixelCenters:o,size:t},u=k.runKernel(Ji,a,l);return i?D(u,[u.shape[1],u.shape[2],u.shape[3]]):u}var mg=v({resizeBilinear_:MV});function BV(r,t,e=!1,o=!1){let n=N(r,"images","resizeNearestNeighbor");E(n.rank===3||n.rank===4,()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${n.rank}.`),E(t.length===2,()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`),E(n.dtype==="float32"||n.dtype==="int32",()=>"`images` must have `int32` or `float32` as dtype"),E(o===!1||e===!1,()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.");let s=n,i=!1;n.rank===3&&(i=!0,s=D(n,[1,n.shape[0],n.shape[1],n.shape[2]]));let[]=t,a={images:s},l={alignCorners:e,halfPixelCenters:o,size:t},u=k.runKernel(Zi,a,l);return i?D(u,[u.shape[1],u.shape[2],u.shape[3]]):u}var fg=v({resizeNearestNeighbor_:BV});function VV(r,t="binary",e=!1,o=.5){let n=N(r,"image","threshold"),s=.2989,i=.587,a=.114,l=n.shape[0]*n.shape[1],u=A(ke([o]),255),c,p,m,f;if(E(n.rank===3,()=>`Error in threshold: image must be rank 3,but got rank ${n.rank}.`),E(n.shape[2]===3||n.shape[2]===1,()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${n.shape[2]}.`),E(n.dtype==="int32"||n.dtype==="float32",()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${n.dtype}.`),E(t==="otsu"||t==="binary",()=>`Method must be binary or otsu, but was ${t}`),n.shape[2]===3){[c,p,m]=Ge(n,[1,1,1],-1);let d=A(c,s),x=A(p,i),b=A(m,a);f=U(U(d,x),b)}else f=r;if(t==="otsu"){let d=xd(X(Mc(f),"int32"),He([]),256);u=GV(d,l)}let h=e?so(f,u):ge(f,u);return X(A(h,255),"int32")}function GV(r,t){let e=ke([-1]),o=ke([0]),n=ke([0]),s,i,a,l,u,c;for(let p=0;p<r.size-1;p++){s=Nt(r,0,p+1),i=Nt(r,p+1),u=ot(nt(s),t),c=ot(nt(i),t);let m=nt(A(s,_n(0,s.size)));a=ot(m,nt(s));let f=Ao(i.shape,s.size),h=U(_n(0,i.size),f),g=A(i,h);l=ot(nt(g),nt(i));let d=tt(a,l),x=tt(a,l),b=A(u,c);n=A(A(b,d),x);let S=ge(n,o);o=ee(S,n,o),e=ee(S,ke([p]),e)}return e}var _T=v({threshold_:VV});function WV(r,t,e="nearest",o="constant",n=0,s){let i=N(r,"image","transform","float32"),a=N(t,"transforms","transform","float32");E(i.rank===4,()=>`Error in transform: image must be rank 4,but got rank ${i.rank}.`),E(a.rank===2&&(a.shape[0]===i.shape[0]||a.shape[0]===1)&&a.shape[1]===8,()=>"Error in transform: Input transform should be batch x 8 or 1 x 8"),E(s==null||s.length===2,()=>`Error in transform: outputShape must be [height, width] or null, but got ${s}.`);let l={image:i,transforms:a},u={interpolation:e,fillMode:o,fillValue:n,outputShape:s};return k.runKernel(hc,l,u)}var OT=v({transform_:WV});function UV(r,t,e){let o=N(r,"a","bandPart");E(o.rank>=2,()=>`bandPart(): Rank must be at least 2, got ${o.rank}.`);let n=o.shape,[s,i]=o.shape.slice(-2),a,l;typeof t=="number"?(E(t%1===0,()=>`bandPart(): numLower must be an integer, got ${t}.`),E(t<=s,()=>`bandPart(): numLower (${t}) must not be greater than the number of rows (${s}).`),a=N(t<0?s:t,"numLower","bandPart")):(E(t.dtype==="int32",()=>"bandPart(): numLower's dtype must be an int32."),a=ee(Ks(t,0),s,wo(t,s))),typeof e=="number"?(E(e%1===0,()=>`bandPart(): numUpper must be an integer, got ${e}.`),E(e<=i,()=>`bandPart(): numUpper (${e}) must not be greater than the number of columns (${i}).`),l=N(e<0?i:e,"numUpper","bandPart")):(E(e.dtype==="int32",()=>"bandPart(): numUpper's dtype must be an int32."),l=ee(Ks(e,0),i,wo(e,i)));let u=D(_n(0,s,1,"int32"),[-1,1]),c=_n(0,i,1,"int32"),p=tt(u,c),m=mr(so(p,a),Dr(p,Ft(l))),f=ne([s,i],o.dtype);return D(Ne(We(D(o,[-1,s,i])).map(h=>ee(m,h,f))),n)}var LT=v({bandPart_:UV});function HV(r){let t;if(Array.isArray(r)){t=!1,E(r!=null&&r.length>0,()=>"Gram-Schmidt process: input must not be null, undefined, or empty");let n=r[0].shape[0];for(let s=1;s<r.length;++s)E(r[s].shape[0]===n,()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${r[s].shape[0]} vs. ${n})`)}else t=!0,r=Ge(r,r.shape[0],0).map(n=>ao(n,[0]));E(r.length<=r[0].shape[0],()=>`Gram-Schmidt: Number of vectors (${r.length}) exceeds number of dimensions (${r[0].shape[0]}).`);let e=[],o=r;for(let n=0;n<r.length;++n)e.push(k.tidy(()=>{let s=o[n];if(n>0)for(let i=0;i<n;++i){let a=A(nt(A(e[i],s)),e[i]);s=tt(s,a)}return ot(s,Hs(s,"euclidean"))}));return t?Ne(e,0):e}var PT=v({gramSchmidt_:HV});function KV(r,t=!1){if(E(r.rank>=2,()=>`qr() requires input tensor to have a rank >= 2, but got rank ${r.rank}`),r.rank===2)return zT(r,t);{let e=r.shape.slice(0,r.shape.length-2).reduce((l,u)=>l*u),o=We(D(r,[e,r.shape[r.shape.length-2],r.shape[r.shape.length-1]]),0),n=[],s=[];o.forEach(l=>{let[u,c]=zT(l,t);n.push(u),s.push(c)});let i=D(Ne(n,0),r.shape),a=D(Ne(s,0),r.shape);return[i,a]}}function zT(r,t=!1){return k.tidy(()=>{E(r.shape.length===2,()=>`qr2d() requires a 2D Tensor, but got a ${r.shape.length}D Tensor.`);let e=r.shape[0],o=r.shape[1],n=Cl(e),s=$r(r),i=Xs([[1]],[1,1]),a=$r(i),l=e>=o?o:e;for(let u=0;u<l;++u){let c=s,p=a,m=n;[a,s,n]=k.tidy(()=>{let f=Nt(s,[u,u],[e-u,1]),h=Hs(f),g=Nt(s,[u,u],[1,1]),d=ee(ge(g,0),Xs([[-1]]),Xs([[1]])),x=tt(g,A(d,h)),b=ot(f,x);b.shape[0]===1?a=$r(i):a=Vt([i,Nt(b,[1,0],[b.shape[0]-1,b.shape[1]])],0);let S=Ft(ot(Dt(d,x),h)),w=Nt(s,[u,0],[e-u,o]),T=A(S,a),$=Rt(a);if(u===0)s=tt(w,Dt(T,Dt($,w)));else{let O=tt(w,Dt(T,Dt($,w)));s=Vt([Nt(s,[0,0],[u,o]),O],0)}let R=Rt(T),F=Nt(n,[0,u],[e,n.shape[1]-u]);if(u===0)n=tt(F,Dt(Dt(F,a),R));else{let O=tt(F,Dt(Dt(F,a),R));n=Vt([Nt(n,[0,0],[e,u]),O],1)}return[a,s,n]}),xt([c,p,m])}return!t&&e>o&&(n=Nt(n,[0,0],[e,o]),s=Nt(s,[0,0],[o,o])),[n,s]})}var MT=v({qr_:KV});var _e;(function(r){r[r.NONE=0]="NONE",r[r.MEAN=1]="MEAN",r[r.SUM=2]="SUM",r[r.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"})(_e||(_e={}));function qV(r,t,e=_e.SUM_BY_NONZERO_WEIGHTS){let o=N(r,"losses","computeWeightedLoss"),n=null;t!=null&&(n=N(t,"weights","computeWeightedLoss"));let s=n==null?o:A(o,n);if(e===_e.NONE)return s;if(e===_e.SUM)return nt(s);if(e===_e.MEAN){if(n==null)return oe(s);{let i=o.size/n.size,a=ot(nt(s),nt(n));return i>1?ot(a,st(i)):a}}if(e===_e.SUM_BY_NONZERO_WEIGHTS){if(n==null)return ot(nt(s),st(o.size));{let i=A(n,Be(o.shape)),a=X(nt(tn(i,st(0))),"float32");return ot(nt(s),a)}}throw Error(`Unknown reduction: ${e}`)}var fr=v({computeWeightedLoss_:qV});function jV(r,t,e,o=_e.SUM_BY_NONZERO_WEIGHTS){let n=N(r,"labels","absoluteDifference"),s=N(t,"predictions","absoluteDifference"),i=null;e!=null&&(i=N(e,"weights","absoluteDifference")),Te(n.shape,s.shape,"Error in absoluteDifference: ");let a=ae(tt(n,s));return fr(a,i,o)}var BT=v({absoluteDifference_:jV});function XV(r,t,e,o,n=_e.SUM_BY_NONZERO_WEIGHTS){let s=N(r,"labels","cosineDistance"),i=N(t,"predictions","cosineDistance"),a=null;o!=null&&(a=N(o,"weights","cosineDistance")),Te(s.shape,i.shape,"Error in cosineDistance: ");let l=st(1),u=tt(l,nt(A(s,i),e,!0));return fr(u,a,n)}var VT=v({cosineDistance_:XV});function YV(r,t,e,o=_e.SUM_BY_NONZERO_WEIGHTS){let n=N(r,"labels","hingeLoss"),s=N(t,"predictions","hingeLoss"),i=null;e!=null&&(i=N(e,"weights","hingeLoss")),Te(n.shape,s.shape,"Error in hingeLoss: ");let a=st(1);n=tt(A(st(2),n),a);let l=ir(tt(a,A(n,s)));return fr(l,i,o)}var GT=v({hingeLoss_:YV});function ZV(r,t,e,o=1,n=_e.SUM_BY_NONZERO_WEIGHTS){let s=N(r,"labels","huberLoss"),i=N(t,"predictions","huberLoss"),a=null;e!=null&&(a=N(e,"weights","huberLoss")),Te(s.shape,i.shape,"Error in huberLoss: ");let l=st(o),u=ae(tt(i,s)),c=wo(u,l),p=tt(u,c),m=U(A(st(.5),$t(c)),A(l,p));return fr(m,a,n)}var WT=v({huberLoss_:ZV});function JV(r,t,e,o=1e-7,n=_e.SUM_BY_NONZERO_WEIGHTS){let s=N(r,"labels","logLoss"),i=N(t,"predictions","logLoss"),a=null;e!=null&&(a=N(e,"weights","logLoss")),Te(s.shape,i.shape,"Error in logLoss: ");let l=st(1),u=st(o),c=Ft(A(s,Ye(U(i,u)))),p=A(tt(l,s),Ye(U(tt(l,i),u))),m=tt(c,p);return fr(m,a,n)}var UT=v({logLoss_:JV});function QV(r,t,e,o=_e.SUM_BY_NONZERO_WEIGHTS){let n=N(r,"labels","meanSquaredError"),s=N(t,"predictions","meanSquaredError"),i=null;e!=null&&(i=N(e,"weights","meanSquaredError")),Te(n.shape,s.shape,"Error in meanSquaredError: ");let a=jc(n,s);return fr(a,i,o)}var HT=v({meanSquaredError_:QV});function tG(r,t){let e=N(r,"labels","sigmoidCrossEntropyWithLogits"),o=N(t,"logits","sigmoidCrossEntropyWithLogits");Te(e.shape,o.shape,"Error in sigmoidCrossEntropyWithLogits: ");let n=ir(o),s=A(o,e),i=ba(Fe(Ft(ae(o))));return U(tt(n,s),i)}function eG(r,t,e,o=0,n=_e.SUM_BY_NONZERO_WEIGHTS){let s=N(r,"multiClassLabels","sigmoidCrossEntropy"),i=N(t,"logits","sigmoidCrossEntropy"),a=null;if(e!=null&&(a=N(e,"weights","sigmoidCrossEntropy")),Te(s.shape,i.shape,"Error in sigmoidCrossEntropy: "),o>0){let u=st(o),c=st(1),p=st(.5);s=U(A(s,tt(c,u)),A(p,u))}let l=tG(s,i);return fr(l,a,n)}var KT=v({sigmoidCrossEntropy_:eG});function rG(r,t,e=-1){if(e===-1&&(e=t.rank-1),e!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${e}`);return Hr((n,s,i)=>{let l=Lc(s,[e],!0),u=tt(X(s,"float32"),l);i([n,u]);let c=Ft(A(u,n));return{value:nt(c,[e]),gradFunc:(f,h)=>{let[g,d]=h,x=Do(f.shape,[e]);return[A(D(f,x),tt(X(g,"float32"),Fe(d))),A(D(f,x),tt(Fe(d),X(g,"float32")))]}}})(r,t)}function oG(r,t,e,o=0,n=_e.SUM_BY_NONZERO_WEIGHTS){let s=N(r,"onehotLabels","softmaxCrossEntropy"),i=N(t,"logits","softmaxCrossEntropy"),a=null;if(e!=null&&(a=N(e,"weights","softmaxCrossEntropy")),Te(s.shape,i.shape,"Error in softmaxCrossEntropy: "),o>0){let u=st(o),c=st(1),p=st(s.shape[1]);s=U(A(s,tt(c,u)),ot(u,p))}let l=rG(s,i);return fr(l,a,n)}var qT=v({softmaxCrossEntropy_:oG});function nG(r,t,e,o){let n=N(r,"indices","sparseFillEmptyRows","int32"),s=N(t,"values","sparseFillEmptyRows"),i=N(e,"denseShape","sparseFillEmptyRows","int32"),a=N(o,"defaultValue","sparseFillEmptyRows",s.dtype);if(n.rank!==2)throw new Error(`Indices should be Tensor2D but received shape
        ${n.shape}`);if(s.rank!==1)throw new Error(`Values should be Tensor1D but received shape ${s.shape}`);if(i.rank!==1)throw new Error(`Dense shape should be Tensor1D but received shape ${i.shape}`);if(a.rank!==0)throw new Error(`Default value should be a scalar but received shape ${a.shape}`);let l={indices:n,values:s,denseShape:i,defaultValue:a},u=k.runKernel(oc,l);return{outputIndices:u[0],outputValues:u[1],emptyRowIndicator:u[2],reverseIndexMap:u[3]}}var jT=v({sparseFillEmptyRows_:nG});function sG(r,t,e){let o=N(r,"inputIndices","sparseReshape","int32"),n=N(t,"inputShape","sparseReshape","int32"),s=N(e,"newShape","sparseReshape","int32");if(o.rank!==2)throw new Error(`Input indices should be Tensor2D but received shape
        ${o.shape}`);if(n.rank!==1)throw new Error(`Input shape should be Tensor1D but received shape ${n.shape}`);if(s.rank!==1)throw new Error(`New shape should be Tensor1D but received shape ${s.shape}`);let i={inputIndices:o,inputShape:n,newShape:s},a=k.runKernel(nc,i);return{outputIndices:a[0],outputShape:a[1]}}var XT=v({sparseReshape_:sG});function iG(r,t,e){let o=N(r,"data","sparseSegmentMean"),n=N(t,"indices","sparseSegmentMean","int32"),s=N(e,"segmentIds","sparseSegmentMean","int32");if(o.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(n.rank!==1)throw new Error(`Indices should be Tensor1D but received shape
          ${n.shape}`);if(s.rank!==1)throw new Error(`Segment ids should be Tensor1D but received shape
          ${s.shape}`);let i={data:o,indices:n,segmentIds:s};return k.runKernel(sc,i)}var YT=v({sparseSegmentMean_:iG});function aG(r,t,e){let o=N(r,"data","sparseSegmentSum"),n=N(t,"indices","sparseSegmentSum","int32"),s=N(e,"segmentIds","sparseSegmentSum","int32");if(o.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(n.rank!==1)throw new Error(`Indices should be Tensor1D but received shape
         ${n.shape}`);if(s.rank!==1)throw new Error(`Segment ids should be Tensor1D but received shape
         ${s.shape}`);let i={data:o,indices:n,segmentIds:s};return k.runKernel(ic,i)}var ZT=v({sparseSegmentSum_:aG});function lG(r,t,e,o,n,s,i,a){let l=N(r,"data","stringNGrams","string");if(l.dtype!=="string")throw new Error("Data must be of datatype string");if(l.shape.length!==1)throw new Error(`Data must be a vector, saw: ${l.shape}`);let u=N(t,"dataSplits","stringNGrams");if(u.dtype!=="int32")throw new Error("Data splits must be of datatype int32");let c={separator:e,nGramWidths:o,leftPad:n,rightPad:s,padWidth:i,preserveShortSequences:a},p={data:l,dataSplits:u},m=k.runKernel(cc,p,c);return{nGrams:m[0],nGramsSplits:m[1]}}var JT=v({stringNGrams_:lG});function uG(r,t,e=!0){let o=N(r,"input","stringSplit","string"),n=N(t,"delimiter","stringSplit","string");if(o.rank!==1)throw new Error(`Input should be Tensor1D but received shape ${o.shape}`);if(n.rank!==0)throw new Error(`Delimiter should be a scalar but received shape ${n.shape}`);let s={skipEmpty:e},i={input:o,delimiter:n},a=k.runKernel(pc,i,s);return{indices:a[0],values:a[1],shape:a[2]}}var QT=v({stringSplit_:uG});function cG(r,t){let e=N(r,"input","stringToHashBucketFast","string"),o={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");let n={input:e};return k.runKernel(mc,n,o)}var tI=v({stringToHashBucketFast_:cG});function pG(r,t,e,o=!0){let n=N(r,"input","staticRegexReplace","string"),s={pattern:t,rewrite:e,replaceGlobal:o};return k.runKernel(sl,{x:n},s)}var eI=v({staticRegexReplace_:pG});var mG={fft:Ta,ifft:js,rfft:Ia,irfft:qc},fG={hammingWindow:wT,hannWindow:ag,frame:lg,stft:CT},hr={flipLeftRight:NT,grayscaleToRGB:vT,resizeNearestNeighbor:fg,resizeBilinear:mg,rotateWithOffset:TT,cropAndResize:ST,nonMaxSuppression:IT,nonMaxSuppressionAsync:$T,nonMaxSuppressionWithScore:AT,nonMaxSuppressionWithScoreAsync:DT,nonMaxSuppressionPadded:RT,nonMaxSuppressionPaddedAsync:FT,threshold:_T,transform:OT},l0={bandPart:LT,gramSchmidt:PT,qr:MT},hG={absoluteDifference:BT,computeWeightedLoss:fr,cosineDistance:VT,hingeLoss:GT,huberLoss:WT,logLoss:UT,meanSquaredError:HT,sigmoidCrossEntropy:KT,softmaxCrossEntropy:qT},dG={sparseFillEmptyRows:jT,sparseReshape:XT,sparseSegmentMean:YT,sparseSegmentSum:ZT},gG={stringNGrams:JT,stringSplit:QT,stringToHashBucketFast:tI,staticRegexReplace:eI};var K={};qt(K,{Serializable:()=>$m,SerializationMap:()=>On,registerClass:()=>u0});var $m=class{getClassName(){return this.constructor.className}static fromConfig(t,e){return new t(e)}},On=class{constructor(){this.classNameMap={}}static getMap(){return On.instance==null&&(On.instance=new On),On.instance}static register(t){On.getMap().classNameMap[t.className]=[t,t.fromConfig]}};function u0(r){E(r.className!=null,()=>"Class being registered does not have the static className property defined."),E(typeof r.className=="string",()=>"className is required to be a string, but got type "+typeof r.className),E(r.className.length>0,()=>"Class being registered has an empty-string as its className, which is disallowed."),On.register(r)}var dr=class extends $m{minimize(t,e=!1,o){let{value:n,grads:s}=this.computeGradients(t,o);if(o!=null){let i=o.map(a=>({name:a.name,tensor:s[a.name]}));this.applyGradients(i)}else this.applyGradients(s);return xt(s),e?n:(n.dispose(),null)}get iterations(){return this.iterations_==null&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(t,e){return Jw(t,e)}dispose(){this.iterations_!=null&&xt(this.iterations_)}async saveIterations(){return this.iterations_==null&&(this.iterations_=0),{name:"iter",tensor:st(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(t){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(t){return this.iterations_=(await t[0].tensor.data())[0],t.slice(1)}};Object.defineProperty(dr,Symbol.hasInstance,{value:r=>r.minimize!=null&&r.computeGradients!=null&&r.applyGradients!=null});var Jc=class extends dr{static get className(){return"Adadelta"}constructor(t,e,o=null){super(),this.learningRate=t,this.rho=e,this.epsilon=o,this.accumulatedGrads=[],this.accumulatedUpdates=[],o==null&&(this.epsilon=k.backend.epsilon())}applyGradients(t){(Array.isArray(t)?t.map(o=>o.name):Object.keys(t)).forEach((o,n)=>{let s=k.registeredVariables[o],i=!1;this.accumulatedGrads[n]==null&&(this.accumulatedGrads[n]={originalName:`${o}/accum_grad`,variable:M(()=>dt(s).variable(i))}),this.accumulatedUpdates[n]==null&&(this.accumulatedUpdates[n]={originalName:`${o}/accum_var`,variable:M(()=>dt(s).variable(i))});let a=Array.isArray(t)?t[n].tensor:t[o];if(a==null)return;let l=this.accumulatedGrads[n].variable,u=this.accumulatedUpdates[n].variable;M(()=>{let c=U(A(l,this.rho),A($t(a),1-this.rho)),p=A(ot(re(U(u,this.epsilon)),re(U(l,this.epsilon))),a),m=U(A(u,this.rho),A($t(p),1-this.rho));l.assign(c),u.assign(m);let f=U(A(p,-this.learningRate),s);s.assign(f)})}),this.incrementIterations()}dispose(){this.accumulatedUpdates!=null&&(xt(this.accumulatedGrads.map(t=>t.variable)),xt(this.accumulatedUpdates.map(t=>t.variable)))}async getWeights(){let t=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(t.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(t){t=await this.extractIterations(t);let e=t.length/2,o=!1;this.accumulatedGrads=t.slice(0,e).map(n=>({originalName:n.name,variable:n.tensor.variable(o)})),this.accumulatedUpdates=t.slice(e,e*2).map(n=>({originalName:n.name,variable:n.tensor.variable(o)}))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.rho,e.epsilon)}};var Qc=class extends dr{static get className(){return"Adagrad"}constructor(t,e=.1){super(),this.learningRate=t,this.initialAccumulatorValue=e,this.accumulatedGrads=[]}applyGradients(t){(Array.isArray(t)?t.map(o=>o.name):Object.keys(t)).forEach((o,n)=>{let s=k.registeredVariables[o];this.accumulatedGrads[n]==null&&(this.accumulatedGrads[n]={originalName:`${o}/accumulator`,variable:M(()=>Ao(s.shape,this.initialAccumulatorValue).variable(!1))});let i=Array.isArray(t)?t[n].tensor:t[o];if(i==null)return;let a=this.accumulatedGrads[n].variable;M(()=>{let l=U(a,$t(i));a.assign(l);let u=U(A(ot(i,re(U(l,k.backend.epsilon()))),-this.learningRate),s);s.assign(u)})}),this.incrementIterations()}dispose(){this.accumulatedGrads!=null&&xt(this.accumulatedGrads.map(t=>t.variable))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){t=await this.extractIterations(t);let e=!1;this.accumulatedGrads=t.map(o=>({originalName:o.name,variable:o.tensor.variable(e)}))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(t,e){return new t(e.learningRate,e.initialAccumulatorValue)}};var tp=class extends dr{static get className(){return"Adam"}constructor(t,e,o,n=null){super(),this.learningRate=t,this.beta1=e,this.beta2=o,this.epsilon=n,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],M(()=>{this.accBeta1=st(e).variable(),this.accBeta2=st(o).variable()}),n==null&&(this.epsilon=k.backend.epsilon())}applyGradients(t){let e=Array.isArray(t)?t.map(o=>o.name):Object.keys(t);M(()=>{let o=tt(1,this.accBeta1),n=tt(1,this.accBeta2);e.forEach((s,i)=>{let a=k.registeredVariables[s],l=!1;this.accumulatedFirstMoment[i]==null&&(this.accumulatedFirstMoment[i]={originalName:`${s}/m`,variable:M(()=>dt(a).variable(l))}),this.accumulatedSecondMoment[i]==null&&(this.accumulatedSecondMoment[i]={originalName:`${s}/v`,variable:M(()=>dt(a).variable(l))});let u=Array.isArray(t)?t[i].tensor:t[s];if(u==null)return;let c=this.accumulatedFirstMoment[i].variable,p=this.accumulatedSecondMoment[i].variable,m=U(A(c,this.beta1),A(u,1-this.beta1)),f=U(A(p,this.beta2),A($t(u),1-this.beta2)),h=ot(m,o),g=ot(f,n);c.assign(m),p.assign(f);let d=U(A(ot(h,U(re(g),this.epsilon)),-this.learningRate),a);a.assign(d)}),this.accBeta1.assign(A(this.accBeta1,this.beta1)),this.accBeta2.assign(A(this.accBeta2,this.beta2))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),this.accumulatedFirstMoment!=null&&xt(this.accumulatedFirstMoment.map(t=>t.variable)),this.accumulatedSecondMoment!=null&&xt(this.accumulatedSecondMoment.map(t=>t.variable))}async getWeights(){let t=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(t.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(t){t=await this.extractIterations(t),M(()=>{this.accBeta1.assign(Ar(this.beta1,this.iterations_+1)),this.accBeta2.assign(Ar(this.beta2,this.iterations_+1))});let e=t.length/2,o=!1;this.accumulatedFirstMoment=t.slice(0,e).map(n=>({originalName:n.name,variable:n.tensor.variable(o)})),this.accumulatedSecondMoment=t.slice(e,e*2).map(n=>({originalName:n.name,variable:n.tensor.variable(o)}))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon)}};var ep=class extends dr{static get className(){return"Adamax"}constructor(t,e,o,n=null,s=0){super(),this.learningRate=t,this.beta1=e,this.beta2=o,this.epsilon=n,this.decay=s,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],M(()=>{this.iteration=st(0).variable(),this.accBeta1=st(e).variable()}),n==null&&(this.epsilon=k.backend.epsilon())}applyGradients(t){let e=Array.isArray(t)?t.map(o=>o.name):Object.keys(t);M(()=>{let o=tt(1,this.accBeta1),n=ot(-this.learningRate,U(A(this.iteration,this.decay),1));e.forEach((s,i)=>{let a=k.registeredVariables[s],l=!1;this.accumulatedFirstMoment[i]==null&&(this.accumulatedFirstMoment[i]={originalName:`${s}/m`,variable:dt(a).variable(l)}),this.accumulatedWeightedInfNorm[i]==null&&(this.accumulatedWeightedInfNorm[i]={originalName:`${s}/v`,variable:dt(a).variable(l)});let u=Array.isArray(t)?t[i].tensor:t[s];if(u==null)return;let c=this.accumulatedFirstMoment[i].variable,p=this.accumulatedWeightedInfNorm[i].variable,m=U(A(c,this.beta1),A(u,1-this.beta1)),f=A(p,this.beta2),h=ae(u),g=Kr(f,h);c.assign(m),p.assign(g);let d=U(A(ot(n,o),ot(m,U(g,this.epsilon))),a);a.assign(d)}),this.iteration.assign(U(this.iteration,1)),this.accBeta1.assign(A(this.accBeta1,this.beta1))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),this.accumulatedFirstMoment!=null&&xt(this.accumulatedFirstMoment.map(t=>t.variable)),this.accumulatedWeightedInfNorm!=null&&xt(this.accumulatedWeightedInfNorm.map(t=>t.variable))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(t){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon,e.decay)}};var Ea=class extends dr{static get className(){return"SGD"}constructor(t){super(),this.learningRate=t,this.setLearningRate(t)}applyGradients(t){(Array.isArray(t)?t.map(o=>o.name):Object.keys(t)).forEach((o,n)=>{let s=Array.isArray(t)?t[n].tensor:t[o];if(s==null)return;let i=k.registeredVariables[o];M(()=>{let a=U(A(this.c,s),i);i.assign(a)})}),this.incrementIterations()}setLearningRate(t){this.learningRate=t,this.c!=null&&this.c.dispose(),this.c=ue(st(-t))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(t){if(t=await this.extractIterations(t),t.length!==0)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(t,e){return new t(e.learningRate)}};var rp=class extends Ea{static get className(){return"Momentum"}constructor(t,e,o=!1){super(t),this.learningRate=t,this.momentum=e,this.useNesterov=o,this.accumulations=[],this.m=st(this.momentum)}applyGradients(t){(Array.isArray(t)?t.map(o=>o.name):Object.keys(t)).forEach((o,n)=>{let s=k.registeredVariables[o];this.accumulations[n]==null&&(this.accumulations[n]={originalName:`${o}/momentum`,variable:M(()=>dt(s).variable(!1))});let i=this.accumulations[n].variable,a=Array.isArray(t)?t[n].tensor:t[o];a!=null&&M(()=>{let l,u=U(A(this.m,i),a);this.useNesterov?l=U(A(this.c,U(a,A(u,this.m))),s):l=U(A(this.c,u),s),i.assign(u),s.assign(l)})}),this.incrementIterations()}dispose(){this.m.dispose(),this.accumulations!=null&&xt(this.accumulations.map(t=>t.variable))}setMomentum(t){this.momentum=t}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){t=await this.extractIterations(t);let e=!1;this.accumulations=t.map(o=>({originalName:o.name,variable:o.tensor.variable(e)}))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(t,e){return new t(e.learningRate,e.momentum,e.useNesterov)}};var op=class extends dr{static get className(){return"RMSProp"}constructor(t,e=.9,o=0,n=null,s=!1){if(super(),this.learningRate=t,this.decay=e,this.momentum=o,this.epsilon=n,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=s,n==null&&(this.epsilon=k.backend.epsilon()),t==null)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(t){(Array.isArray(t)?t.map(o=>o.name):Object.keys(t)).forEach((o,n)=>{let s=k.registeredVariables[o],i=!1;this.accumulatedMeanSquares[n]==null&&(this.accumulatedMeanSquares[n]={originalName:`${o}/rms`,variable:M(()=>dt(s).variable(i))}),this.accumulatedMoments[n]==null&&(this.accumulatedMoments[n]={originalName:`${o}/momentum`,variable:M(()=>dt(s).variable(i))}),this.accumulatedMeanGrads[n]==null&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${o}/mg`,variable:M(()=>dt(s).variable(i))});let a=Array.isArray(t)?t[n].tensor:t[o];if(a==null)return;let l=this.accumulatedMeanSquares[n].variable,u=this.accumulatedMoments[n].variable;M(()=>{let c=U(A(l,this.decay),A($t(a),1-this.decay));if(this.centered){let p=this.accumulatedMeanGrads[n].variable,m=U(A(p,this.decay),A(a,1-this.decay)),f=ot(A(a,this.learningRate),re(tt(c,U($t(m),this.epsilon)))),h=U(A(u,this.momentum),f);l.assign(c),p.assign(m),u.assign(h);let g=tt(s,h);s.assign(g)}else{let p=U(A(l,this.decay),A($t(a),1-this.decay)),m=U(A(u,this.momentum),ot(A(a,this.learningRate),re(U(p,this.epsilon))));l.assign(p),u.assign(m);let f=tt(s,m);s.assign(f)}})}),this.incrementIterations()}dispose(){this.accumulatedMeanSquares!=null&&xt(this.accumulatedMeanSquares.map(t=>t.variable)),this.accumulatedMeanGrads!=null&&this.centered&&xt(this.accumulatedMeanGrads.map(t=>t.variable)),this.accumulatedMoments!=null&&xt(this.accumulatedMoments.map(t=>t.variable))}async getWeights(){let t=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&t.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(t.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(t){t=await this.extractIterations(t);let e=this.centered?t.length/3:t.length/2,o=!1;this.accumulatedMeanSquares=t.slice(0,e).map(n=>({originalName:n.name,variable:n.tensor.variable(o)})),this.accumulatedMoments=t.slice(e,e*2).map(n=>({originalName:n.name,variable:n.tensor.variable(o)})),this.centered&&(this.accumulatedMeanGrads=t.slice(e*2,e*3).map(n=>({originalName:n.name,variable:n.tensor.variable(o)})))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(t,e){return new t(e.learningRate,e.decay,e.momentum,e.epsilon,e.centered)}};var xG=[Jc,Qc,tp,ep,rp,op,Ea];function rI(){for(let r of xG)u0(r)}var en={};qt(en,{browserFiles:()=>nI,browserHTTPRequest:()=>aI,concatenateArrayBuffers:()=>Nc,copyModel:()=>ov,decodeWeights:()=>Yh,encodeWeights:()=>VN,fromMemory:()=>lI,fromMemorySync:()=>d0,getLoadHandlers:()=>qN,getModelArtifactsForJSON:()=>vc,getModelArtifactsForJSONSync:()=>zw,getModelArtifactsInfoForJSON:()=>Sn,getSaveHandlers:()=>KN,getWeightSpecs:()=>Jh,http:()=>gg,isHTTPScheme:()=>dg,listModels:()=>ev,loadWeights:()=>sI,moveModel:()=>nv,registerLoadRouter:()=>HN,registerSaveRouter:()=>UN,removeModel:()=>rv,weightsLoaderFactory:()=>f0,withSaveHandler:()=>uI,withSaveHandlerSync:()=>cI});var yG="model",bG=".json",wG=".weights.bin";function oI(r){return new Promise(t=>setTimeout(t)).then(r)}var Ys=class{constructor(t){if(!z().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");t.startsWith(Ys.URL_SCHEME)&&(t=t.slice(Ys.URL_SCHEME.length)),(t==null||t.length===0)&&(t=yG),this.modelJsonFileName=t+bG,this.weightDataFileName=t+wG}async save(t){if(typeof document>"u")throw new Error("Browser downloads are not supported in this environment since `document` is not present");let e=window.URL.createObjectURL(new Blob([t.weightData],{type:"application/octet-stream"}));if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{let o=[{paths:["./"+this.weightDataFileName],weights:t.weightSpecs}],n=Zh(t,o),s=window.URL.createObjectURL(new Blob([JSON.stringify(n)],{type:"application/json"})),i=this.modelJsonAnchor==null?document.createElement("a"):this.modelJsonAnchor;if(i.download=this.modelJsonFileName,i.href=s,await oI(()=>i.dispatchEvent(new MouseEvent("click"))),t.weightData!=null){let a=this.weightDataAnchor==null?document.createElement("a"):this.weightDataAnchor;a.download=this.weightDataFileName,a.href=e,await oI(()=>a.dispatchEvent(new MouseEvent("click")))}return{modelArtifactsInfo:Sn(t)}}}};Ys.URL_SCHEME="downloads://";var c0=class{constructor(t){if(t==null||t.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${t}`);this.jsonFile=t[0],this.weightsFiles=t.slice(1)}async load(){return new Promise((t,e)=>{let o=new FileReader;o.onload=n=>{let s=JSON.parse(n.target.result),i=s.modelTopology;if(i==null){e(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));return}if(s.weightsManifest==null){e(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));return}if(this.weightsFiles.length===0){t({modelTopology:i});return}let l=vc(s,u=>this.loadWeights(u));t(l)},o.onerror=n=>e(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),o.readAsText(this.jsonFile)})}loadWeights(t){let e=[],o=[];for(let i of t)e.push(...i.weights),o.push(...i.paths);let n=this.checkManifestAndWeightFiles(t),s=o.map(i=>this.loadWeightsFile(i,n[i]));return Promise.all(s).then(i=>[e,Nc(i)])}loadWeightsFile(t,e){return new Promise((o,n)=>{let s=new FileReader;s.onload=i=>{let a=i.target.result;o(a)},s.onerror=i=>n(`Failed to weights data from file of path '${t}'.`),s.readAsArrayBuffer(e)})}checkManifestAndWeightFiles(t){let e=[],o=this.weightsFiles.map(s=>Pw(s.name)),n={};for(let s of t)s.paths.forEach(i=>{let a=Pw(i);if(e.indexOf(a)!==-1)throw new Error(`Duplicate file basename found in weights manifest: '${a}'`);if(e.push(a),o.indexOf(a)===-1)throw new Error(`Weight file with basename '${a}' is not provided.`);n[i]=this.weightsFiles[o.indexOf(a)]});if(e.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${e.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return n}},CG=r=>z().getBool("IS_BROWSER")&&!Array.isArray(r)&&r.startsWith(Ys.URL_SCHEME)?SG(r.slice(Ys.URL_SCHEME.length)):null;Qt.registerSaveRouter(CG);function SG(r="model"){return new Ys(r)}function nI(r){return new c0(r)}var hg=class{constructor(t){if(this.shards=[],this.previousShardIndex=0,t instanceof Array||(t=[t]),t=t.map(o=>wr(o)?o.buffer:o),t.length===0)return;this.bufferUniformSize=t[0].byteLength;let e=0;for(let o=0;o<t.length;o++){let n=t[o];o!==t.length-1&&n.byteLength!==this.bufferUniformSize&&(this.bufferUniformSize=void 0);let s=e+n.byteLength;this.shards.push({buffer:n,start:e,end:s}),e=s}this.shards.length===0&&(this.byteLength=0),this.byteLength=this.shards[this.shards.length-1].end}slice(t=0,e=this.byteLength){if(t=isNaN(Number(t))?0:t,e=isNaN(Number(e))?0:e,t=Math.max(0,t),e=Math.min(this.byteLength,e),e<=t)return new ArrayBuffer(0);let o=this.findShardForByte(t);if(o===-1)throw new Error(`Could not find start shard for byte ${t}`);let n=e-t,s=new ArrayBuffer(n),i=new Uint8Array(s),a=0;for(let l=o;l<this.shards.length;l++){let u=this.shards[l],p=t+a-u.start,m=a,h=Math.min(e,u.end)-u.start,g=new Uint8Array(u.buffer.slice(p,h));if(i.set(g,m),a+=g.length,e<u.end)break}return s}findShardForByte(t){if(this.shards.length===0||t<0||t>=this.byteLength)return-1;if(this.bufferUniformSize!=null)return this.previousShardIndex=Math.floor(t/this.bufferUniformSize),this.previousShardIndex;function e(n){return t<n.start?-1:t>=n.end?1:0}if(e(this.shards[this.previousShardIndex])===0)return this.previousShardIndex;let o=NG(this.shards,e);return o===-1?-1:(this.previousShardIndex=o,this.previousShardIndex)}};function NG(r,t){let e=0,o=r.length;for(;e<=o;){let n=Math.floor((o-e)/2)+e,s=t(r[n]);if(s===0)return n;s<0?o=n:e=n+1}return-1}function p0(r,t,e,o){i(r),e=e??0,o=o??1,a(e,o);let n=0,s=l=>(l.then(u=>{let c=e+ ++n/r.length*(o-e);return t(c),u}),l);function i(l){E(l!=null&&Array.isArray(l)&&l.length>0,()=>"promises must be a none empty array")}function a(l,u){E(l>=0&&l<=1,()=>`Progress fraction must be in range [0, 1], but got startFraction ${l}`),E(u>=0&&u<=1,()=>`Progress fraction must be in range [0, 1], but got endFraction ${u}`),E(u>=l,()=>`startFraction must be no more than endFraction, but got startFraction ${l} and endFraction ${u}`)}return Promise.all(r.map(s))}async function m0(r,t){t==null&&(t={});let e=t.fetchFunc==null?z().platform.fetch:t.fetchFunc,o=r.map(p=>e(p,t.requestInit,{isBinary:!0})),n=0,s=.5,a=(t.onProgress==null?await Promise.all(o):await p0(o,t.onProgress,n,s)).map(p=>p.arrayBuffer()),l=.5,u=1;return t.onProgress==null?await Promise.all(a):await p0(a,t.onProgress,l,u)}async function sI(r,t="",e,o){return f0(i=>m0(i,{requestInit:o}))(r,t,e)}function f0(r){return async(t,e="",o)=>{let n=t.map(()=>!1),s={},i=o!=null?o.map(()=>!1):[],a=[];if(t.forEach((f,h)=>{let g=0;f.weights.forEach(d=>{let x="quantization"in d?d.quantization.dtype:d.dtype,b=bm[x]*Pt(d.shape),S=()=>{n[h]=!0,s[h]==null&&(s[h]=[]),s[h].push({manifestEntry:d,groupOffset:g,sizeBytes:b})};o!=null?o.forEach((w,T)=>{w===d.name&&(S(),i[T]=!0)}):S(),a.push(d.name),g+=b})}),!i.every(f=>f)){let f=o.filter((h,g)=>!i[g]);throw new Error(`Could not find weights in manifest with names: ${f.join(", ")}. 
Manifest JSON has weights with names: ${a.join(", ")}.`)}let l=n.reduce((f,h,g)=>(h&&f.push(g),f),[]),u=[];l.forEach(f=>{t[f].paths.forEach(h=>{let g=e+(e.endsWith("/")?"":"/")+h;u.push(g)})});let c=await r(u),p={},m=0;return l.forEach(f=>{let h=t[f].paths.length,g=new hg(c.slice(m,m+h));s[f].forEach(x=>{let b=g.slice(x.groupOffset,x.groupOffset+x.sizeBytes),S=Yh(b,[x.manifestEntry]);for(let w in S)p[w]=S[w]}),m+=h}),p}}var vG="application/octet-stream",TG="application/json",Am=class{constructor(t,e){if(this.DEFAULT_METHOD="POST",e==null&&(e={}),this.weightPathPrefix=e.weightPathPrefix,this.onProgress=e.onProgress,this.weightUrlConverter=e.weightUrlConverter,e.fetchFunc!=null?(E(typeof e.fetchFunc=="function",()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"),this.fetch=e.fetchFunc):this.fetch=z().platform.fetch,E(t!=null&&t.length>0,()=>"URL path for http must not be null, undefined or empty."),Array.isArray(t)&&E(t.length===2,()=>`URL paths for http must have a length of 2, (actual length is ${t.length}).`),this.path=t,e.requestInit!=null&&e.requestInit.body!=null)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=e.requestInit||{}}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");let e=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);e.body=new FormData;let o=[{paths:["./model.weights.bin"],weights:t.weightSpecs}],n=Zh(t,o);e.body.append("model.json",new Blob([JSON.stringify(n)],{type:TG}),"model.json"),t.weightData!=null&&e.body.append("model.weights.bin",new Blob([t.weightData],{type:vG}),"model.weights.bin");let s=await this.fetch(this.path,e);if(s.ok)return{modelArtifactsInfo:Sn(t),responses:[s]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${s.status}.`)}async load(){let t=await this.fetch(this.path,this.requestInit);if(!t.ok)throw new Error(`Request to ${this.path} failed with status code ${t.status}. Please verify this URL points to the model JSON of the model to load.`);let e;try{e=await t.json()}catch{let i=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?i+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":i+=" Please make sure the server is serving valid JSON for this request.",new Error(i)}let o=e.modelTopology,n=e.weightsManifest;if(o==null&&n==null)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return vc(e,s=>this.loadWeights(s))}async loadWeights(t){let e=Array.isArray(this.path)?this.path[1]:this.path,[o,n]=IG(e),s=this.weightPathPrefix||o,i=Jh(t),a=[],l=[];for(let c of t)for(let p of c.paths)this.weightUrlConverter!=null?l.push(this.weightUrlConverter(p)):a.push(s+p+n);this.weightUrlConverter&&a.push(...await Promise.all(l));let u=await m0(a,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress});return[i,Nc(u)]}};Am.URL_SCHEME_REGEX=/^https?:\/\//;function IG(r){let t=r.lastIndexOf("/"),e=r.lastIndexOf("?"),o=r.substring(0,t),n=e>t?r.substring(e):"";return[o+"/",n]}function dg(r){return r.match(Am.URL_SCHEME_REGEX)!=null}var iI=(r,t)=>{if(typeof fetch>"u"&&(t==null||t.fetchFunc==null))return null;{let e=!0;if(Array.isArray(r)?e=r.every(o=>dg(o)):e=dg(r),e)return gg(r,t)}return null};Qt.registerSaveRouter(iI);Qt.registerLoadRouter(iI);function gg(r,t){return new Am(r,t)}function aI(r,t){return gg(r,t)}var Dm=class{constructor(t){this.modelArtifacts=t}load(){return this.modelArtifacts}},xg=class{constructor(t){this.saveHandler=t}save(t){return this.saveHandler(t)}},h0=class{constructor(t){t.load&&(this.load=()=>Promise.resolve(t.load())),t.save&&(this.save=e=>Promise.resolve(t.save(e)))}};function lI(r,t,e,o){let n=arguments;return new h0(d0(...n))}function d0(r,t,e,o){return arguments.length===1?r.modelTopology!=null||r.weightSpecs!=null?new Dm(r):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Dm({modelTopology:r})):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Dm({modelTopology:r,weightSpecs:t,weightData:e,trainingConfig:o}))}function uI(r){return new xg(r)}function cI(r){return new xg(r)}var np={};qt(np,{fromPixels:()=>FG,fromPixelsAsync:()=>DG,toPixels:()=>RG});var Rl;function pI(r,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(r==null)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let e=!1,o=!1,n=!1,s=!1,i=!1,a=!1;if(r.data instanceof Uint8Array)e=!0;else if(typeof ImageData<"u"&&r instanceof ImageData)o=!0;else if(typeof HTMLVideoElement<"u"&&r instanceof HTMLVideoElement)n=!0;else if(typeof HTMLImageElement<"u"&&r instanceof HTMLImageElement)s=!0;else if(r.getContext!=null)i=!0;else if(typeof ImageBitmap<"u"&&r instanceof ImageBitmap)a=!0;else throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${r.constructor.name}`);if(fm(mm,k.backendName)!=null){let h={pixels:r},g={numChannels:t};return k.runKernel(mm,h,g)}let[u,c]=n?[r.videoWidth,r.videoHeight]:[r.width,r.height],p;if(i)p=r.getContext("2d").getImageData(0,0,u,c).data;else if(o||e)p=r.data;else if(s||n||a){if(Rl==null)if(typeof document>"u")if(typeof OffscreenCanvas<"u"&&typeof OffscreenCanvasRenderingContext2D<"u")Rl=new OffscreenCanvas(1,1).getContext("2d");else throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");else Rl=document.createElement("canvas").getContext("2d",{willReadFrequently:!0});Rl.canvas.width=u,Rl.canvas.height=c,Rl.drawImage(r,0,0,u,c),p=Rl.getImageData(0,0,u,c).data}let m;if(t===4)m=new Int32Array(p);else{let h=u*c;m=new Int32Array(h*t);for(let g=0;g<h;g++)for(let d=0;d<t;++d)m[g*t+d]=p[g*4+d]}return Qd(m,[c,u,t],"int32")}function kG(r){return r!=null&&r.data instanceof Uint8Array}function EG(){return typeof window<"u"&&typeof ImageBitmap<"u"&&window.hasOwnProperty("createImageBitmap")}function $G(r){return r!=null&&r.width!==0&&r.height!==0}function AG(r){return EG()&&!(r instanceof ImageBitmap)&&$G(r)&&!kG(r)}async function DG(r,t=3){let e=null;if(z().getBool("WRAP_TO_IMAGEBITMAP")&&AG(r)){let o;try{o=await createImageBitmap(r,{premultiplyAlpha:"none"})}catch{o=null}o!=null&&o.width===r.width&&o.height===r.height?e=o:e=r}else e=r;return pI(e,t)}async function RG(r,t){let e=N(r,"img","toPixels");if(!(r instanceof At)){let u=e;e=X(u,"int32"),u.dispose()}if(e.rank!==2&&e.rank!==3)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${e.rank}.`);let[o,n]=e.shape.slice(0,2),s=e.rank===2?1:e.shape[2];if(s>4||s===2)throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${s}`);if(e.dtype!=="float32"&&e.dtype!=="int32")throw new Error(`Unsupported type for toPixels: ${e.dtype}. Please use float32 or int32 tensors.`);let i=await e.data(),a=e.dtype==="float32"?255:1,l=new Uint8ClampedArray(n*o*4);for(let u=0;u<o*n;++u){let c=[0,0,0,255];for(let m=0;m<s;m++){let f=i[u*s+m];if(e.dtype==="float32"){if(f<0||f>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${f}.`)}else if(e.dtype==="int32"&&(f<0||f>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${f}.`);s===1?(c[0]=f*a,c[1]=f*a,c[2]=f*a):c[m]=f*a}let p=u*4;l[p+0]=Math.round(c[0]),l[p+1]=Math.round(c[1]),l[p+2]=Math.round(c[2]),l[p+3]=Math.round(c[3])}if(t!=null){t.width=n,t.height=o;let u=t.getContext("2d"),c=new ImageData(l,n,o);u.putImageData(c,0,0)}return e!==r&&e.dispose(),l}var FG=v({fromPixels_:pI});function _G(r,t){let e=r.shape.length,o=t.shape.length;if(e<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${e}.`);if(o<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${o}.`);if(t.dtype!=="int32")throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[o-1]>e)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[o-1]} vs. ${e}`);if(Pt(r.shape)===0)throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${r.shape}.`);let n=t.shape,s=n[n.length-1],i=1;for(let p=0;p<n.length-1;++p)i*=n[p];let a=r.shape,l=n.slice();l.pop();let u=1;for(let p=s;p<e;++p)u*=a[p],l.push(a[p]);let c=[...gn(r.shape).map(p=>p/u),1].slice(0,s);return[l,i,u,c]}var Ze={};qt(Ze,{assertParamsValid:()=>LG,computeFlatOffset:()=>VG,computeOutShape:()=>zG,getNormalizedAxes:()=>MG,isSliceContinous:()=>BG,maskToAxes:()=>PG,parseSliceParams:()=>x0,sliceInfo:()=>GG,startForAxis:()=>bI,startIndicesWithElidedDims:()=>gI,stopForAxis:()=>wI,stopIndicesWithElidedDims:()=>xI,stridesForAxis:()=>yI,stridesWithElidedDims:()=>fI});var g0=-2,OG=-1;function LG(r,t,e){let o=r.shape.length;E(o===t.length,()=>`Error in slice${o}D: Length of begin ${t} must match the rank of the array (${o}).`),E(o===e.length,()=>`Error in slice${o}D: Length of size ${e} must match the rank of the array (${o}).`);for(let n=0;n<o;++n)E(t[n]+e[n]<=r.shape[n],()=>`Error in slice${o}D: begin[${n}] + size[${n}] (${t[n]+e[n]}) would overflow input.shape[${n}] (${r.shape[n]})`)}function PG(r){let t=[],e=0;for(;r>0;)r&1&&t.push(e),r/=2,e++;return t}function zG(r,t,e){let o=[];for(let n=0;n<r.length;n++)o[n]=Math.ceil((t[n]-r[n])/e[n]);return o}function fI(r,t,e,o){let n=[...r];for(let s=n.length;s<o.length;s++)n.push(1);for(let s=0;s<e;s++)s===0?n[t]=1:(n.splice(t,0,1),n.pop());return n}function hI(r,t,e){return e<=r?e:e-(t-1)}function dI(r,t){let e=[];for(let o=0;o<r;o++)e.push(t+o);return e}function MG(r,t,e,o,n,s,i,a,l){let u=r.length,c=new Array(u),p=new Array(u),m=new Array(u);if(t.length&&e>0){let f=t[0],h=e+1;c=gI(i,f,h,o,r),p=xI(a,f,h,n,r),m=fI(s,f,h,r)}else for(let f=0;f<u;f++)c[f]=bI(i,o,s,r,f,l),p[f]=wI(a,n,s,r,f,l),m[f]=yI(s,f,l);return{begin:c,end:p,strides:m}}function gI(r,t,e,o,n){let s=[...n],i=dI(e,t);for(let a=0;a<s.length;a++)if(i.indexOf(a)>-1)s[a]=0;else{let l=hI(t,e,a),u=o[l];r&1<<l&&(u=0),s[a]=u}return s}function xI(r,t,e,o,n){let s=[...n],i=dI(e,t);for(let a=0;a<s.length;a++)if(i.indexOf(a)>-1)s[a]=Number.MAX_SAFE_INTEGER;else{let l=hI(t,e,a),u=o[l];r&1<<l&&(u=Number.MAX_SAFE_INTEGER),s[a]=u}for(let a=0;a<s.length;a++){let l=n[a];s[a]<0&&(s[a]+=l),s[a]=au(0,s[a],n[a])}return s}function yI(r,t,e){let o=r[t];return(e&1<<t||o==null)&&(o=1),o}function bI(r,t,e,o,n,s){let i=t[n],a=e[n]||1;(r&1<<n||s&1<<n||i==null)&&(a>0?i=Number.MIN_SAFE_INTEGER:i=Number.MAX_SAFE_INTEGER);let l=o[n];return i<0&&(i+=l),i=au(0,i,l-1),i}function wI(r,t,e,o,n,s){let i=t[n],a=e[n]||1;(r&1<<n||s&1<<n||i==null)&&(a>0?i=Number.MAX_SAFE_INTEGER:i=Number.MIN_SAFE_INTEGER);let l=o[n];return i<0&&(i+=l),a>0?i=au(0,i,l):i=au(-1,i,l-1),i}function BG(r,t,e){let o=e.length;for(let n=0;n<e.length;n++)if(e[n]>1){o=n;break}for(let n=o+1;n<e.length;n++)if(t[n]>0||e[n]!==r[n])return!1;return!0}function VG(r,t){let e=r.length>0?r[r.length-1]:1;for(let o=0;o<r.length-1;o++)e+=r[o]*t[o];return e}function x0(r,t,e){let o,n=r.shape.length;typeof t=="number"?o=[t,...new Array(n-1).fill(0)]:t.length<n?o=t.concat(new Array(n-t.length).fill(0)):o=t.slice(),o.forEach(i=>{E(i!==-1,()=>"slice() does not support negative begin indexing.")});let s;return e==null?s=new Array(n).fill(-1):typeof e=="number"?s=[e,...new Array(n-1).fill(-1)]:e.length<n?s=e.concat(new Array(n-e.length).fill(-1)):s=e,s=s.map((i,a)=>i>=0?i:(E(i===-1,()=>`Negative size values should be exactly -1 but got ${i} for the slice() size at index ${a}.`),r.shape[a]-o[a])),[o,s]}function GG(r,t,e,o,n,s,i,a,l){let u;if(o==null?(u=new Array(t.length),u.fill(1)):u=o,i!=null&&i&i-1)throw new Error("Multiple ellipses in slice is not allowed.");let c=!1,p={dims:u.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:e.slice(),strides:u.slice(),beginMask:n,endMask:s,ellipsisMask:i,newAxisMask:a,shrinkAxisMask:l};for(let S=0;S<p.dims;S++)c&&1<<S&a&&p.numAddAxisAfterEllipsis++,1<<S&i&&(c=!0);c||(p.ellipsisMask|=1<<p.dims,p.dims++);let m={dims:r.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};WG(p,m);let f=!0,h=!0,g=!0,d=[],x=[];for(let S=0;S<r.length;++S){if(m.strides[S]===0)throw Error(`strides[${S}] must be non-zero`);let w=!!(m.shrinkAxisMask&1<<S),T=r[S];if(T===-1){d.push(w?1:-1);continue}let $=[m.beginMask&1<<S,m.endMask&1<<S],R=[m.strides[S]>0?0:-1,m.strides[S]>0?T:T-1];if(w&&m.strides[S]<=0)throw Error("only stride 1 allowed on non-range indexing.");g=g&&m.strides[S]===1;let F=!!(m.beginMask&1<<S&&m.endMask&1<<S);if(m.beginValid&&m.endValid){if(w){let V=m.begin[S]<0?T+m.begin[S]:m.begin[S];if(m.begin[S]=V,m.end[S]=m.begin[S]+1,V<0||V>=T)throw Error(`slice index ${m.begin[S]} of dimension ${S} out of bounds.`)}else m.begin[S]=mI(m.begin[S],0,m.strides[S],T,$,R),m.end[S]=mI(m.end[S],1,m.strides[S],T,$,R);let B=m.strides[S]===1&&m.begin[S]===0&&m.end[S]===T;f=f&&B,h=h&&(S===0&&m.strides[S]===1||B)}else f=f&&m.strides[S]===1&&F,h=h&&(S===0&&m.strides[S]===1||F);let O,P=!1;if(m.beginValid&&m.endValid?(O=m.end[S]-m.begin[S],P=!0):w?(O=1,P=!0):F&&T>=0&&(m.strides[S]<0?O=-T:O=T,P=!0),P){let B;O===0||O<0!=m.strides[S]<0?B=0:B=Math.trunc(O/m.strides[S])+(O%m.strides[S]!==0?1:0),d.push(B)}else d.push(-1)}for(let S=0;S<m.finalShapeGatherIndices.length;++S){let w=m.finalShapeGatherIndices[S];w>=0?x.push(d[w]):w===g0&&x.push(1)}return{finalShapeSparse:x.filter((S,w)=>m.finalShapeGatherIndices[w]!==g0),finalShape:x,isIdentity:f,sliceDim0:h,isSimpleSlice:g,begin:m.begin,end:m.end,strides:m.strides}}function WG(r,t){t.beginMask=0,t.endMask=0,t.shrinkAxisMask=0;let e=0;t.beginValid=r.begin!=null,t.endValid=r.end!=null,t.begin=new Array(t.dims),t.end=new Array(t.dims),t.strides=new Array(t.dims),t.finalShapeGatherIndices=[],t.finalShapeGatherIndicesSparse=[],t.inputShapeGatherIndicesSparse=new Array(t.dims);for(let o=0;o<r.dims;o++)if(1<<o&r.ellipsisMask){let n=Math.min(t.dims-(r.dims-o)+1+r.numAddAxisAfterEllipsis,t.dims);for(;e<n;e++)t.begin[e]=0,t.end[e]=0,t.strides[e]=1,t.beginMask|=1<<e,t.endMask|=1<<e,t.finalShapeGatherIndices.push(e),t.finalShapeGatherIndicesSparse.push(-1),t.inputShapeGatherIndicesSparse[e]=o}else if(1<<o&r.newAxisMask)t.finalShapeGatherIndices.push(g0),t.finalShapeGatherIndicesSparse.push(-1);else{if(e===t.begin.length)throw Error(`Index out of range using input dim ${e}; input has only ${t.dims} dims, ${t.begin.length}.`);r.begin!=null&&(t.begin[e]=r.begin[o]),r.end!=null&&(t.end[e]=r.end[o]),t.strides[e]=r.strides[o],r.beginMask&1<<o&&(t.beginMask|=1<<e),r.endMask&1<<o&&(t.endMask|=1<<e),r.shrinkAxisMask&1<<o?(t.finalShapeGatherIndices.push(OG),t.finalShapeGatherIndicesSparse.push(-1),t.shrinkAxisMask|=1<<e):(t.finalShapeGatherIndices.push(e),t.finalShapeGatherIndicesSparse.push(o)),t.inputShapeGatherIndicesSparse[e]=o,e++}}function mI(r,t,e,o,n,s){if(n[t])return e>0?s[t]:s[t+1&1];{let i=r<0?o+r:r;return i<s[0]?s[0]:i>s[1]?s[1]:i}}var yg="4.5.0";var bg=class{static sgd(t){return new Ea(t)}static momentum(t,e,o=!1){return new rp(t,e,o)}static rmsprop(t,e=.9,o=0,n=null,s=!1){return new op(t,e,o,n,s)}static adam(t=.001,e=.9,o=.999,n=null){return new tp(t,e,o,n)}static adadelta(t=.001,e=.95,o=null){return new Jc(t,e,o)}static adamax(t=.002,e=.9,o=.999,n=null,s=0){return new ep(t,e,o,n,s)}static adagrad(t,e=.1){return new Qc(t,e)}};var Fl=bg;var UG=(()=>typeof requestAnimationFrame<"u"?requestAnimationFrame:typeof setImmediate<"u"?setImmediate:r=>r())();function Rm(){return new Promise(r=>UG(()=>r()))}var I={};qt(I,{ERF_A1:()=>sW,ERF_A2:()=>iW,ERF_A3:()=>aW,ERF_A4:()=>lW,ERF_A5:()=>uW,ERF_P:()=>nW,PARALLELIZE_THRESHOLD:()=>wg,RowPartitionType:()=>Ln,SELU_SCALE:()=>b0,SELU_SCALEALPHA:()=>y0,applyActivation:()=>Al,assertAndGetBroadcastShape:()=>Tt,assertAxesAreInnerMostDims:()=>MM,assertParamsConsistent:()=>HG,assignToTypedArray:()=>dW,axesAreInnerMostDims:()=>jw,calculateShapes:()=>HB,checkEinsumDimSizes:()=>CW,checkPadOnDimRoundingMode:()=>te,combineLocations:()=>Cv,combineRaggedTensorToTensorShapes:()=>qG,complexWithEvenIndex:()=>mW,complexWithOddIndex:()=>fW,computeConv2DInfo:()=>bl,computeConv3DInfo:()=>pv,computeDefaultPad:()=>qw,computeDilation2DInfo:()=>zz,computeOptimalWindowSize:()=>ZG,computeOutAndReduceShapes:()=>Xw,computeOutShape:()=>KG,computePool2DInfo:()=>Kw,computePool3DInfo:()=>Mz,convertConv2DDataFormat:()=>mv,decodeEinsumEquation:()=>bW,eitherStridesOrDilationsAreOne:()=>nr,expandShapeToKeepDim:()=>Do,exponent:()=>xW,exponents:()=>gW,fromStringArrayToUint8:()=>GW,fromUint8ToStringArray:()=>VW,getAxesPermutation:()=>Yw,getBroadcastDims:()=>yv,getComplexWithIndex:()=>hW,getEinsumComputePath:()=>SW,getEinsumPermutation:()=>wW,getFusedBiasGradient:()=>$l,getFusedDyActivation:()=>El,getImageCenter:()=>JG,getInnerMostAxes:()=>BM,getPermuted:()=>tW,getRaggedRank:()=>XG,getReductionAxes:()=>Xt,getReshaped:()=>QG,getReshapedPermuted:()=>eW,getRowPartitionTypesHelper:()=>jG,getSliceBeginCoords:()=>rW,getSliceSize:()=>oW,getSparseFillEmptyRowsIndicesDenseShapeMismatch:()=>IW,getSparseFillEmptyRowsNegativeIndexErrorMessage:()=>kW,getSparseFillEmptyRowsOutOfRangeIndexErrorMessage:()=>EW,getSparseReshapeEmptyTensorZeroOutputDimErrorMessage:()=>DW,getSparseReshapeInputOutputMismatchErrorMessage:()=>FW,getSparseReshapeInputOutputMultipleErrorMessage:()=>RW,getSparseReshapeMultipleNegativeOneOutputDimErrorMessage:()=>$W,getSparseReshapeNegativeOutputDimErrorMessage:()=>AW,getSparseSegmentReductionIndicesOutOfRangeErrorMessage:()=>PW,getSparseSegmentReductionNegativeSegmentIdsErrorMessage:()=>_W,getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage:()=>OW,getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage:()=>LW,getUndoAxesPermutation:()=>Nm,isIdentityPermutation:()=>NW,log:()=>_P,mergeRealAndImagArrays:()=>cW,prepareAndValidate:()=>_G,prepareSplitSize:()=>TW,segment_util:()=>C0,shouldFuse:()=>Dl,slice_util:()=>Ze,splitRealAndImagArrays:()=>pW,stridesOrDilationsArePositive:()=>In,tupleValuesAreOne:()=>yo,upcastType:()=>Le,validateDefaultValueShape:()=>YG,validateInput:()=>km,validateUpdateShape:()=>pT,warn:()=>Cn});function HG(r,t){let e=r[0].length;r.forEach((n,s)=>{E(n.length===e,()=>`Error in concat${e}D: rank of tensors[${s}] must be the same as the rank of the rest (${e})`)}),E(t>=0&&t<e,()=>`Error in concat${e}D: axis must be between 0 and ${e-1}.`);let o=r[0];r.forEach((n,s)=>{for(let i=0;i<e;i++)E(i===t||n[i]===o[i],()=>`Error in concat${e}D: Shape of tensors[${s}] (${n}) does not match the shape of the rest (${o}) along the non-concatenated axis ${s}.`)})}function KG(r,t){let e=r[0].slice();for(let o=1;o<r.length;o++)e[t]+=r[o][t];return e}var Ln;(function(r){r[r.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",r[r.VALUE_ROWIDS=1]="VALUE_ROWIDS",r[r.ROW_LENGTHS=2]="ROW_LENGTHS",r[r.ROW_SPLITS=3]="ROW_SPLITS",r[r.ROW_LIMITS=4]="ROW_LIMITS",r[r.ROW_STARTS=5]="ROW_STARTS"})(Ln||(Ln={}));function qG(r,t,e){let o=new Array;if(e==null&&t==null)return o;if(t==null)for(;o.length<r+e.length;)o.push(-1);else o=t.slice();if(e==null)return o;if(r+e.length!==o.length)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.rank = ${r+e.length}, but shape.rank = ${o.length}`);for(let n=1;n<e.length;++n){let s=e[n],i=o[o.length-e.length+n],a=o[i];if(s>=0)if(a>=0){if(a!==s)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.shape[${n+r}] = ${s} but shape[${n+r}] = ${a}`)}else o[i]=s}return o}function jG(r){let t={FIRST_DIM_SIZE:Ln.FIRST_DIM_SIZE,VALUE_ROWIDS:Ln.VALUE_ROWIDS,ROW_LENGTHS:Ln.ROW_LENGTHS,ROW_SPLITS:Ln.ROW_SPLITS,ROW_LIMITS:Ln.ROW_LIMITS,ROW_STARTS:Ln.ROW_STARTS},e=[];for(let o of r)if(o in t)e.push(t[o]);else break;return e}function XG(r){return r.length===0?0:r[0]===Ln.FIRST_DIM_SIZE?r.length-1:r.length}function YG(r,t){if(r==null||t==null)return;let e=r.length,o=t.length;if(e>=o)throw new Error(`defaultValue.shape=${r} and ragged tensor flatValues.shape=${t}, are incompatible: defaultValue.rank = ${e} must be less than ragged tensor input flatValues.rank = ${o})`);for(let n=0;n<Math.min(e,o-1);++n){let s=r[n],i=t[n+1];if(s>=0&&i>=0&&s!==1&&s!==i)throw new Error(`defaultValue.shape=${r}, and ragged tensor input flatValues.shape=${t} are incompatible: defaultValue.shape[${n-r.length}] = ${s} but ragged tensor input.flatValues.shape[${n-r.length}] = ${i}`)}}var wg=30;function ZG(r){return r<=wg?r:pu(r,Math.floor(Math.sqrt(r)))}function JG(r,t,e){let o=e*(typeof r=="number"?r:r[0]),n=t*(typeof r=="number"?r:r[1]);return[o,n]}function QG(r,t,e,o=!0){let n=[];if(o)n=n.concat(t.slice(0)),n.push(r[0]/e),n=n.concat(r.slice(1));else{n=n.concat(r[0]);let s=t.length;for(let i=0;i<s;++i)n=n.concat([r[i+1]/t[i],t[i]]);n=n.concat(r.slice(s+1))}return n}function tW(r,t,e=!0){let o=[];if(e){o.push(t);for(let n=t+1;n<r;++n)n<=2*t?(o.push(n),o.push(n-(t+1))):o.push(n)}else{let n=[],s=[];for(let i=1;i<r;++i)i>=t*2+1||i%2===1?s.push(i):n.push(i);o.push(...n),o.push(0),o.push(...s)}return o}function eW(r,t,e,o=!0){let n=[];o?n.push(r[0]/e):n.push(r[0]*e);for(let s=1;s<r.length;++s)s<=t.length?o?n.push(t[s-1]*r[s]):n.push(r[s]/t[s-1]):n.push(r[s]);return n}function rW(r,t){let e=[0];for(let o=0;o<t;++o)e.push(r[o][0]);return e}function oW(r,t,e){let o=r.slice(0,1);for(let n=0;n<e;++n)o.push(r[n+1]-t[n][0]-t[n][1]);return o}var y0=1.7580993408473768,b0=1.0507009873554805;var nW=.3275911,sW=.254829592,iW=-.284496736,aW=1.421413741,lW=-1.453152027,uW=1.061405429;function cW(r,t){if(r.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${r.length}, imag: ${t.length}.`);let e=new Float32Array(r.length*2);for(let o=0;o<e.length;o+=2)e[o]=r[o/2],e[o+1]=t[o/2];return e}function pW(r){let t=new Float32Array(r.length/2),e=new Float32Array(r.length/2);for(let o=0;o<r.length;o+=2)t[o/2]=r[o],e[o/2]=r[o+1];return{real:t,imag:e}}function mW(r){let t=Math.ceil(r.length/4),e=new Float32Array(t),o=new Float32Array(t);for(let n=0;n<r.length;n+=4)e[Math.floor(n/4)]=r[n],o[Math.floor(n/4)]=r[n+1];return{real:e,imag:o}}function fW(r){let t=Math.floor(r.length/4),e=new Float32Array(t),o=new Float32Array(t);for(let n=2;n<r.length;n+=4)e[Math.floor(n/4)]=r[n],o[Math.floor(n/4)]=r[n+1];return{real:e,imag:o}}function hW(r,t){let e=r[t*2],o=r[t*2+1];return{real:e,imag:o}}function dW(r,t,e,o){r[o*2]=t,r[o*2+1]=e}function gW(r,t){let e=new Float32Array(r/2),o=new Float32Array(r/2);for(let n=0;n<Math.ceil(r/2);n++){let s=(t?2:-2)*Math.PI*(n/r);e[n]=Math.cos(s),o[n]=Math.sin(s)}return{real:e,imag:o}}function xW(r,t,e){let o=(e?2:-2)*Math.PI*(r/t),n=Math.cos(o),s=Math.sin(o);return{real:n,imag:s}}var w0="->",yW=/->/g,CI=",",SI="...";function bW(r,t){r=r.replace(/\s/g,"");let e=(r.length-r.replace(yW,"").length)/w0.length;if(e<1)throw new Error("Equations without an arrow are not supported.");if(e>1)throw new Error(`Equation must contain exactly one arrow ("${w0}").`);let[o,n]=r.split(w0);E(o.indexOf(SI)===-1,()=>`The ellipsis notation ("${SI}") is not supported yet.`);let s=o.split(CI),i=s.length;if(t!==i)throw new Error(`Expected ${i} input tensors, received ${t}`);if(i>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");let a=[];for(let m=0;m<n.length;++m){let f=n[m];if(!s.some(h=>h.indexOf(f)!==-1))throw new Error(`Output subscripts contain the label ${f} not present in the input subscripts.`);a.indexOf(f)===-1&&a.push(f)}for(let m=0;m<o.length;++m){let f=o[m];a.indexOf(f)===-1&&f!==CI&&a.push(f)}let l=new Array(s.length);for(let m=0;m<i;++m){if(new Set(s[m].split("")).size!==s[m].length)throw new Error(`Found duplicate axes in input component ${s[m]}. Support for duplicate axes in input is not implemented yet.`);l[m]=[];for(let f=0;f<s[m].length;++f)l[m].push(a.indexOf(s[m][f]))}let u=a.length,c=n.length,p=[];for(let m=c;m<u;++m)p.push(m);return{allDims:a,summedDims:p,idDims:l}}function wW(r,t){let e=new Array(r);e.fill(-1);for(let n=0;n<t.length;++n)e[t[n]]=n;let o=[];for(let n=0;n<r;++n)e[n]===-1&&o.push(n);return e=e.filter(n=>n!==-1),{permutationIndices:e,expandDims:o}}function CW(r,t,e){let o=new Array(r);for(let n=0;n<e.length;++n){let s=e[n].shape;for(let i=0;i<t[n].length;++i)o[t[n][i]]===void 0?o[t[n][i]]=s[i]:E(o[t[n][i]]===s[i],()=>`Expected dimension ${o[t[n][i]]} at axis ${i} of input shaped ${JSON.stringify(s)}, but got dimension ${s[i]}`)}}function SW(r,t){let e=r,o=[],n=0;r.length===0&&e.push(-1),n=r.length+1;for(let i=0;i<n;++i)o.push([]);let s=[];for(let i=0;i<e.length;++i){let a=e[i],l=vW(t,a);for(let u of l)s.indexOf(u)===-1&&(o[i].push(u),s.push(u))}return{path:e,steps:o}}function NW(r){return r.every((t,e)=>t===e)}function vW(r,t){let e=[];for(let o=0;o<r.length;++o)(r[o].length===0||r[o].indexOf(t)!==-1||t===-1)&&e.push(o);return e}function TW(r,t,e=0){let o=[];if(typeof t=="number")E(r.shape[e]%t===0,()=>"Number of splits must evenly divide the axis."),o=new Array(t).fill(r.shape[e]/t);else{let n=t.reduce((i,a)=>(a===-1&&(i+=1),i),0);E(n<=1,()=>"There should be only one negative value in split array.");let s=t.indexOf(-1);if(s!==-1){let i=t.reduce((a,l)=>l>0?a+l:a);t[s]=r.shape[e]-i}E(r.shape[e]===t.reduce((i,a)=>i+a),()=>"The sum of sizes must match the size of the axis dimension."),o=t}return o}function IW(r){return`Received SparseTensor with denseShape[0] = 0 but
  indices.shape[0] = ${r}`}function kW(r,t){return`indices(${r}, 0) is invalid: ${t} < 0`}function EW(r,t,e){return`indices(${r}, 0) is invalid: ${t} >= ${e}`}function $W(r,t){return`only one output dimension may be -1, not both ${r} and ${t}`}function AW(r,t){return`size ${r} must be non-negative, not ${t}`}function DW(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function RW(r,t){let e=Pt(r),o=Pt(t);return`Input to reshape is a SparseTensor with ${e}
  dense values, but the requested shape requires a multiple of ${o}. inputShape=${r} outputShape= ${t}`}function FW(r,t){let e=Pt(r),o=Pt(t);return`Input to reshape is a tensor with ${e} dense values, but the requested shape has ${o}. inputShape=${r} outputShape=${t}`}function _W(){return"segment ids must be >= 0"}function OW(){return"segment ids are not increasing"}function LW(r,t){return`Segment id ${r} out of range [0, ${t}), possibly because segmentIds input is not sorted.`}function PW(r,t,e){return`Bad: indices[${r}] == ${t} out of range [0, ${e})`}var C0={};qt(C0,{collectGatherOpShapeInfo:()=>BW,computeOutShape:()=>MW,segOpComputeOptimalWindowSize:()=>zW});function zW(r,t){let e=!1,o;for(r<=wg?(o=r,e=!0):o=pu(r,Math.floor(Math.sqrt(r)));!e;)o>t||o===r?e=!0:o=pu(r,o+1);return o}function MW(r,t,e){let o=[],n=r.length;for(let s=0;s<n;s++)s!==t?o.push(r[s]):o.push(e);return o}function BW(r,t,e,o){let n=t.shape.length,s=r.shape.length;if(o!==0&&(o<-n||o>n))throw new Error(`Expect batchDims in the range of [-${n}, ${n}], but got ${o}`);if(o<0&&(o+=n),o>s)throw new Error(`batchDims (${o}) must be less than rank(x) (
    ${s}).`);if(e<o)throw new Error(`batchDims (${o}) must be less than or equal to axis (${e}).`);for(let p=0;p<o;++p)if(r.shape[p]!==t.shape[p])throw new Error(`x.shape[${p}]: ${r.shape[p]} should be equal to indices.shape[${p}]: ${t.shape[p]}.`);let i=r.shape[e],a=[],l=1,u=1,c=1;for(let p=0;p<o;++p)a.push(r.shape[p]),l*=r.shape[p];for(let p=o;p<e;p++)a.push(r.shape[p]),u*=r.shape[p];for(let p=o;p<n;p++)a.push(t.shape[p]);for(let p=e+1;p<s;p++)a.push(r.shape[p]),c*=r.shape[p];return{batchSize:l,sliceSize:c,outerSize:u,dimSize:i,outputShape:a}}function VW(r){try{return r.map(t=>Cc(t))}catch(t){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${t}`)}}function GW(r){return r.map(t=>wc(t))}var gr={};qt(gr,{nonMaxSuppressionV3Impl:()=>ug,nonMaxSuppressionV4Impl:()=>cg,nonMaxSuppressionV5Impl:()=>pg,whereImpl:()=>og});rI();var Cg={kernelName:gi,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>A(r,Ro(X(e,"float32"),-1))}}};var NI={kernelName:Yn,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>{let o=$t(X(e,"float32")),n=re(tt(st(1),o));return Ft(ot(r,n))}}}};var vI={kernelName:Zn,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>{let o=re(tt($t(X(e,"float32")),1));return ot(r,o)}}}};var TI={kernelName:Yo,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t,n=Tt(e.shape,o.shape);return{a:()=>{let a=r,l=Xt(e.shape,n);return l.length>0&&(a=nt(a,l)),D(a,e.shape)},b:()=>{let a=r,l=Xt(o.shape,n);return l.length>0&&(a=nt(a,l)),D(a,o.shape)}}}};var II={kernelName:xi,saveAllInputs:!0,gradFunc:(r,t)=>{let e={};return t.forEach((o,n)=>{e[n]=()=>r.clone()}),e}};var kI={kernelName:yi,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>dt(e)}}};var EI={kernelName:bi,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>dt(e)}}};var $I={kernelName:Jn,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>ot(r,re(tt(st(1),$t(X(e,"float32")))))}}};var AI={kernelName:Qn,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>{let o=re(U(st(1),$t(X(e,"float32"))));return ot(r,o)}}}};var DI={kernelName:rs,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t,n=Tt(e.shape,o.shape);return{a:()=>{let a=U($t(e),$t(o)),l=A(r,ot(o,a)),u=Xt(e.shape,n);return u.length>0&&(l=nt(l,u)),D(l,e.shape)},b:()=>{let a=U($t(e),$t(o)),l=Ft(A(r,ot(e,a))),u=Xt(o.shape,n);return u.length>0&&(l=nt(l,u)),D(l,o.shape)}}}};var RI={kernelName:ts,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>ot(r,U($t(X(e,"float32")),1))}}};var FI={kernelName:es,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>ot(r,tt(st(1),$t(X(e,"float32"))))}}};function WW(r,t,e,o,n,s){let i=N(r,"dy","avgPool3dGrad"),a=N(t,"input","avgPool3dGrad"),l=i,u=a,c=!1;a.rank===4&&(c=!0,l=D(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]]),u=D(a,[1,a.shape[0],a.shape[1],a.shape[2],a.shape[3]])),E(l.rank===5,()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${l.rank}.`),E(u.rank===5,()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${u.rank}.`),te("avgPool3dGrad",n,s);let p={dy:l,input:u},m={filterSize:e,strides:o,pad:n,dimRoundingMode:s},f=k.runKernel(gu,p,m);return c?D(f,[f.shape[1],f.shape[2],f.shape[3],f.shape[4]]):f}var _I=v({avgPool3dGrad_:WW});var OI={kernelName:Ci,inputsToSave:["x"],gradFunc:(r,t,e)=>{let[o]=t,{filterSize:n,strides:s,pad:i,dimRoundingMode:a}=e;return{x:()=>_I(r,o,n,s,i,a)}}};function UW(r,t,e,o,n){let s=N(r,"dy","avgPoolGrad"),i=N(t,"input","avgPoolGrad");E(i.rank===s.rank,()=>`Rank of input (${i.rank}) does not match rank of dy (${s.rank})`);let a=i,l=s,u=!1;i.rank===3&&(u=!0,a=D(i,[1,i.shape[0],i.shape[1],i.shape[2]]),l=D(s,[1,s.shape[0],s.shape[1],s.shape[2]])),E(l.rank===4,()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`),E(a.rank===4,()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${a.rank}.`);let c={dy:l,input:a},p={filterSize:e,strides:o,pad:n},m=k.runKernel(du,c,p);return u?D(m,[m.shape[1],m.shape[2],m.shape[3]]):m}var LI=v({avgPoolGrad_:UW});var PI={kernelName:wi,inputsToSave:["x"],gradFunc:(r,t,e)=>{let[o]=t,{filterSize:n,strides:s,pad:i}=e;return{x:()=>LI(r,o,n,s,i)}}};var zI={kernelName:Si,inputsToSave:["a","b"],gradFunc:(r,t,e)=>{let[o,n]=t,{transposeA:s,transposeB:i}=e;return!s&&!i?{a:()=>Dt(r,n,!1,!0),b:()=>Dt(o,r,!0,!1)}:!s&&i?{a:()=>Dt(r,n,!1,!1),b:()=>Dt(r,o,!0,!1)}:s&&!i?{a:()=>Dt(n,r,!1,!0),b:()=>Dt(o,r,!1,!1)}:{a:()=>Dt(n,r,!0,!0),b:()=>Dt(r,o,!0,!0)}}};var MI={kernelName:Ni,gradFunc:(r,t,e)=>{let{blockShape:o,crops:n}=e;return{x:()=>Sa(r,o,n)}}};var BI={kernelName:cN,gradFunc:(r,t,e)=>{let o=e,n=o.inputShape,s=o.shape,i=Array.from(s);for(let l=n.length-1;l>=0;l--)if(n[l]===s[l])i[l]=1;else if(n[l]!==1)throw new Error(`broadcastTo(): [${n}] cannot be broadcast to [${s}].`);let a=[];for(let l=0;l<i.length;l++)i[l]>1&&a.push(l);return{x:()=>nt(r,a,!0)}}};var VI={kernelName:xn,gradFunc:r=>({x:()=>r.clone()})};var GI={kernelName:os,gradFunc:r=>({x:()=>dt(r)})};var WI={kernelName:ns,inputsToSave:["x"],gradFunc:(r,t,e)=>{let[o]=t,{clipValueMin:n,clipValueMax:s}=e;return{x:()=>ee(mr(Dr(o,n),so(o,s)),r,dt(r))}}};var UI={kernelName:vi,inputsToSave:["x"],gradFunc:Cg.gradFunc};var HI={kernelName:Ti,saveAllInputs:!0,gradFunc:(r,t,e)=>{let o=t.map(l=>l.shape),{axis:n}=e,s=Me(n,t[0].shape)[0],i=o.map(l=>l[s]);return Ge(r,i,s).map(l=>()=>l)}};var KI={kernelName:Ii,inputsToSave:["x","filter"],gradFunc:(r,t,e)=>{let[o,n]=t,{dilations:s,strides:i,pad:a,dataFormat:l}=e;return E(yo(s),()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`),{x:()=>Dc(o.shape,r,n,i,a,l),filter:()=>Zc(o,r,n.shape,i,a,l)}}};var qI={kernelName:ki,inputsToSave:["dy","filter"],gradFunc:(r,t,e)=>{let[o,n]=t,{strides:s,pad:i,dataFormat:a,dimRoundingMode:l}=e;return{dy:()=>Ur(r,n,s,i,a,1,l),filter:()=>Zc(r,o,n.shape,s,i,a,l)}}};function HW(r,t,e,o,n){let s=r;r.rank===4&&(s=D(r,[1,r.shape[0],r.shape[1],r.shape[2],r.shape[3]]));let i=t;i.rank===4&&(i=D(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),E(s.rank===5,()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${s.shape}.`),E(i.rank===5,()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${i.shape}.`),E(e.length===5,()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${e}.`),E(s.shape[4]===e[3],()=>`Error in conv3dDerFilter: depth of input ${s.shape[4]}) must match input depth in filter (${e[3]}.`),E(i.shape[4]===e[4],()=>`Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${e[4]}).`);let a={x:s,dy:i},l={strides:o,pad:n,filterShape:e};return k.runKernel(Cu,a,l)}var jI=v({conv3DBackpropFilter_:HW});var XI={kernelName:Ei,inputsToSave:["x","filter"],gradFunc:(r,t,e)=>{let{dilations:o,strides:n,pad:s}=e;E(yo(o),()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${o}'`);let[i,a]=t;return{x:()=>vd(i.shape,r,a,n,s),filter:()=>jI(i,r,a.shape,n,s)}}};var YI={kernelName:ss,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>A(Ft(Wc(X(e,"float32"))),r)}}};var ZI={kernelName:is,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>A(Uc(X(e,"float32")),r)}}};var JI={kernelName:$i,inputsToSave:["x"],gradFunc:(r,t,e)=>{let[o]=t,{axis:n,exclusive:s,reverse:i}=e;return{x:()=>{let a=Yw([n],o.rank),l=_c(r,n,s,!i);return a!=null&&(l=Rt(l,a)),l}}}};var QI={kernelName:Ai,inputsToSave:["x","filter"],gradFunc:(r,t,e)=>{let{dilations:o,strides:n,pad:s,dimRoundingMode:i}=e,a=o??[1,1];E(yo(a),()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`);let[l,u]=t;return E(l.rank===4,()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`),E(u.rank===4,()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`),E(l.shape[3]===u.shape[2],()=>`Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`),E(nr(n,a),()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${n} and dilations '${a}'.`),te("depthwiseConv2d",s,i),{x:()=>ig(l.shape,r,u,n,s,a,i),filter:()=>sg(l,r,u.shape,n,s,a,i)}}};var t1={kernelName:Di,inputsToSave:["x","filter"],gradFunc:(r,t,e)=>{let[o,n]=t,s={x:o,filter:n,dy:r},i={x:o,filter:n,dy:r};return{x:()=>k.runKernel(cm,s,e),filter:()=>k.runKernel(pm,i,e)}}};var e1={kernelName:ls,outputsToSave:[!0],gradFunc:(r,t)=>{let[e]=t,o={dy:r,y:e};return{x:()=>k.runKernel(Du,o)}}};var r1={kernelName:us,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t,o=A(Fe(Ft($t(e))),2/Math.sqrt(Math.PI));return{x:()=>A(r,o)}}};var o1={kernelName:cs,outputsToSave:[!0],gradFunc:(r,t)=>{let[e]=t;return{x:()=>A(r,e)}}};var n1={kernelName:Ri,inputsToSave:["input"],gradFunc:(r,t)=>{let[e]=t;return{input:()=>D(r,e.shape)}}};var s1={kernelName:ps,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>A(r,Fe(e))}}};var i1={kernelName:ms,gradFunc:r=>({x:()=>dt(r)})};var a1={kernelName:fs,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t,n=Tt(e.shape,o.shape);return{a:()=>{let a=ot(r,X(o,"float32")),l=Xt(e.shape,n);return l.length>0?D(nt(a,l),e.shape):a},b:()=>{let a=A(r,X(e,"float32")),l=Xt(o.shape,n);l.length>0&&(a=D(nt(a,l),o.shape));let u=$t(o);return Ft(ot(a,X(u,"float32")))}}}};var l1={kernelName:Fi,inputsToSave:["x","mean","variance","scale"],gradFunc:(r,t,e)=>{let{varianceEpsilon:o}=e,[n,s,i,a]=t,l=a??st(1),u=Xt(s.shape,n.shape),c=[];if(s.rank===1){for(let w=0;w<n.shape.length-1;++w)c.push(n.shape[w]);c.push(1)}let p=tt(n,s),m=A(r,l),f=Bc(U(i,st(o))),h=A(A(A(f,f),f),st(-.5));return{x:()=>s.rank===1?D(A(A(r,sr(D(f,[1,1,1,s.shape[0]]),c)),l),n.shape):D(A(A(r,f),l),n.shape),mean:()=>{let w=A(A(f,st(-1)),m);return s.rank===1&&(w=nt(w,u)),D(w,s.shape)},variance:()=>{let w=A(A(h,p),m);return s.rank===1&&(w=nt(w,u)),D(w,s.shape)},scale:()=>{let w=A(p,f),T=A(r,w);return s.rank===1&&(T=nt(T,u)),D(T,s.shape)},offset:()=>{let w=r;return s.rank===1&&(w=nt(w,u)),D(w,s.shape)}}}};var p1={kernelName:_i,inputsToSave:["x","indices"],gradFunc:(r,t,e)=>{let[o,n]=t,{axis:s}=e,i=Me(s,o.shape)[0];return{x:()=>{let l=o.shape,u=n.size,c=l.slice(0,i),p=c.length,m=l.slice(s,l.length).slice(1),f=m.length,h=u1(0,p),g=u1(p+1,p+1+f),d=c1([c,[u],m]),x=D(r,d),b=D(n,[u]),S=c1([[p],h,g]),w=Rt(x,S),T=Yc(w,b,o.shape[i]),$=Nm(S);return T=Rt(T,$),T},indices:()=>n}}};function u1(r,t){let e=[];for(let o=r;o<t;++o)e.push(o);return e}function c1(r){let t=[];for(let e=0;e<r.length;++e)for(let o=0;o<r[e].length;++o)t.push(r[e][o]);return t}var m1={kernelName:hs,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t;return{a:()=>dt(e),b:()=>dt(o)}}};var f1={kernelName:yn,gradFunc:r=>({x:()=>X(r,"float32")})};var h1={kernelName:ds,gradFunc:r=>({x:()=>dt(r)})};var d1={kernelName:gs,gradFunc:r=>({x:()=>dt(r)})};var g1={kernelName:xs,gradFunc:r=>({x:()=>dt(r)})};var x1={kernelName:Oi,inputsToSave:["x"],gradFunc:(r,t,e)=>{let[o]=t,{alpha:n}=e,s=ge(o,0);return{x:()=>ee(s,r,A(r,n))}}};var y1={kernelName:bs,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>ot(r,U(e,1))}}};var b1={kernelName:ys,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>ot(r,X(e,"float32"))}}};var w1={kernelName:pN,inputsToSave:[],outputsToSave:[!0],gradFunc:(r,t,e)=>{let[o]=t,{axis:n}=e;return{logits:()=>{let i=Fe(o);return tt(r,A(nt(r,n,!0),i))}}}};function KW(r,t,e,o=5,n=1,s=1,i=.5){let a={x:r,y:t,dy:e},l={depthRadius:o,bias:n,alpha:s,beta:i};return k.runKernel(Mu,a,l)}var C1=v({localResponseNormalizationBackprop_:KW});var S1={kernelName:Li,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(r,t,e)=>{let[o,n]=t,{depthRadius:s,bias:i,alpha:a,beta:l}=e;return{x:()=>C1(o,n,r,s,i,a,l)}}};function Sg(r,t,e,o){return t.rank<e.rank&&(t=D(t,Do(t.shape,o))),r.rank<e.rank&&(r=D(r,Do(r.shape,o))),{x:()=>A(r,X(Sr(e,t),r.dtype))}}var S0={kernelName:Pi,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(r,t,e)=>{let o=e,{reductionIndices:n}=o,s=t[0],i=t[1],a=Me(n,s.shape),l=Sg(r,i,s,a);return{x:()=>l.x()}}};var N1={kernelName:ws,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t;return{a:()=>A(r,X(Dr(e,o),"float32")),b:()=>A(r,X(Ks(e,o),"float32"))}}};function qW(r,t,e,o,n,s,i){let a=N(r,"dy","maxPool3dGrad"),l=N(t,"input","maxPool3dGrad"),u=N(e,"output","maxPool3dGrad"),c=a,p=l,m=u,f=!1;l.rank===4&&(f=!0,c=D(a,[1,a.shape[0],a.shape[1],a.shape[2],a.shape[3]]),p=D(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),m=D(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]])),E(c.rank===5,()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${c.rank}.`),E(p.rank===5,()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${p.rank}.`),E(m.rank===5,()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${m.rank}.`),te("maxPool3dGrad",s,i);let h={dy:c,input:p,output:m},g={filterSize:o,strides:n,pad:s,dimRoundingMode:i},d=k.runKernel(Vu,h,g);return f?D(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}var v1=v({maxPool3dGrad_:qW});var T1={kernelName:Mi,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(r,t,e)=>{let[o,n]=t,{filterSize:s,strides:i,pad:a,dimRoundingMode:l}=e;return{x:()=>v1(r,o,n,s,i,a,l)}}};function jW(r,t,e,o,n,s,i){let a=N(r,"dy","maxPoolGrad"),l=N(t,"input","maxPoolGrad"),u=N(e,"output","maxPoolGrad");E(l.rank===a.rank,()=>`Rank of input (${l.rank}) does not match rank of dy (${a.rank})`),E(a.rank===4,()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${a.rank}.`),E(l.rank===4,()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`),te("maxPoolGrad",s,i);let c={dy:a,input:l,output:u},p={filterSize:o,strides:n,pad:s,dimRoundingMode:i};return k.runKernel(Bu,c,p)}var I1=v({maxPoolGrad_:jW});var k1={kernelName:zi,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(r,t,e)=>{let[o,n]=t,{filterSize:s,strides:i,pad:a}=e;return{x:()=>I1(r,o,n,s,i,a)}}};var E1={kernelName:Bi,inputsToSave:["x"],gradFunc:(r,t,e)=>{let[o]=t,{axis:n}=e,s=Me(n,o.shape),a=Xw(o.shape,s)[1],l=Pt(a);return{x:()=>{let c=o.shape.slice();s.forEach(f=>{c[f]=1});let p=D(r,c);return ot(A(p,Be(o.shape,"float32")),l)}}}};var $1={kernelName:Vi,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(r,t,e)=>{let o=e,{axis:n}=o,[s,i]=t,a=Me(n,s.shape),l=Sg(r,i,s,a);return{x:()=>l.x()}}};var A1={kernelName:Cs,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t;return{a:()=>A(r,X(so(e,o),"float32")),b:()=>A(r,X(ge(e,o),"float32"))}}};var D1={kernelName:Gi,inputsToSave:["x"],gradFunc:(r,t,e)=>{let o=t[0],{paddings:n}=e,s=n.map(i=>i[0]);return{x:()=>Nt(r,s,o.shape)}}};var R1={kernelName:Ss,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t,n=Tt(e.shape,o.shape);return{a:()=>{let a=Xt(e.shape,n);return a.length>0?D(nt(r,a),e.shape):r},b:()=>{let a=A(r,Ft(Rn(ot(e,o)))),l=Xt(o.shape,n);return l.length>0?D(nt(a,l),o.shape):a}}}};var F1={kernelName:Ns,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t,n=Tt(e.shape,o.shape);return{a:()=>{let a=A(r,X(o,"float32")),l=Xt(e.shape,n);return l.length>0?D(nt(a,l),e.shape):a},b:()=>{let a=A(r,X(e,"float32")),l=Xt(o.shape,n);return l.length>0?D(nt(a,l),o.shape):a}}}};var _1={kernelName:Wi,gradFunc:r=>({x:()=>Ft(r)})};var O1={kernelName:Hi,inputsToSave:["indices"],gradFunc:(r,t)=>{let e=t[0];return{indices:()=>ne(e.shape,"float32")}}};var L1={kernelName:Ui,gradFunc:r=>({x:()=>dt(r)})};var P1={kernelName:Ki,saveAllInputs:!0,gradFunc:(r,t,e)=>{let{axis:o}=e;return We(r,o).map(s=>()=>s)}};var N0={kernelName:qi,inputsToSave:["x"],gradFunc:(r,t,e)=>{let o=t[0],{paddings:n}=e,s=n.map(i=>i[0]);return{x:()=>Nt(r,s,o.shape)}}};var z1={kernelName:vs,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(r,t)=>{let[e,o,n]=t,s=e,i=o,a=Tt(s.shape,i.shape);return{a:()=>{let c=X(i,"float32"),p=A(r,A(c,Ar(s,tt(c,st(1))))),m=Xt(s.shape,a);return m.length>0&&(p=nt(p,m)),D(p,s.shape)},b:()=>{let c=ge(s,0),p=ee(c,Ye(s),dt(s)),m=A(r,A(n,p)),f=Xt(i.shape,a);return f.length>0&&(m=nt(m,f)),D(m,i.shape)}}}};var M1={kernelName:ji,inputsToSave:["x","alpha"],gradFunc:(r,t)=>{let[e,o]=t,n=ge(e,0);return{x:()=>ee(n,r,A(r,o)),alpha:()=>{let s=ee(n,dt(r),A(r,e)),i=Xt(o.shape,r.shape);return i.length>0&&(s=nt(s,i)),D(s,o.shape)}}}};function XW(r,t,e){let o=r.shape.slice();o[e]=1;let n=D(t,o),s=wl(r,e,!0,!1),i=wl(r,e,!0,!0),a=A(s,i);return A(n,a)}function YW(r,t,e){let o=r.shape.length,n=o-e.length,s=I.getAxesPermutation(e,o),i=r;s!=null&&(i=Rt(r,s));let a=i.shape.slice(),u=a.splice(o-e.length,e.length).reduce((m,f)=>m*f,1);a.push(u);let c=i.reshape(a),p=XW(c,t,n);if(p=p.reshape(i.shape),s!=null){let m=I.getUndoAxesPermutation(s);p=Rt(p,m)}return p}var B1={kernelName:Xi,inputsToSave:["x"],gradFunc:(r,t,e)=>{let[o]=t,{axis:n}=e,s=[];return n==null?s=o.shape.map((i,a)=>a):typeof n=="number"?s=[n]:s=n,{x:()=>YW(o,r,s)}}};var V1={kernelName:as,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t,n=Tt(e.shape,o.shape);return{a:()=>{let a=ot(r,X(o,"float32")),l=Xt(e.shape,n);return l.length>0?D(nt(a,l),e.shape):a},b:()=>{let a=A(r,X(e,"float32")),l=Xt(o.shape,n);l.length>0&&(a=D(nt(a,l),o.shape));let u=$t(o);return Ft(ot(a,X(u,"float32")))}}}};var G1={kernelName:Ts,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>ot(r,Ft($t(e)))}}};var W1={kernelName:ks,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t,o=A(so(e,6),Ro(e));return{x:()=>A(r,X(o,"float32"))}}};var U1={kernelName:Is,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>A(r,X(Ro(e),"float32"))}}};var H1={kernelName:Yi,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>D(r,e.shape)}}};var K1={kernelName:Ji,inputsToSave:["images"],gradFunc:(r,t,e)=>{let[o]=t,n={dy:r,images:o};return{images:()=>k.runKernel(Qu,n,e)}}};var q1={kernelName:Zi,inputsToSave:["images"],gradFunc:(r,t,e)=>{let[o]=t,n={dy:r,images:o};return{images:()=>k.runKernel(Ju,n,e)}}};var j1={kernelName:Qi,gradFunc:(r,t,e)=>{let{dims:o}=e,n=Me(o,r.shape);return{x:()=>Ve(r,n)}}};var X1={kernelName:Es,gradFunc:r=>({x:()=>dt(r)})};var Y1={kernelName:$s,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>Ft(ot(r,A(Ar(e,1.5),2)))}}};var Z1={kernelName:ta,inputsToSave:["condition"],gradFunc:(r,t)=>{let[e]=t;return{condition:()=>X(dt(e),"float32"),t:()=>A(r,X(e,r.dtype)),e:()=>A(r,X(wa(e),r.dtype))}}};var J1={kernelName:As,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>{let o=ge(e,st(0)),n=st(y0),s=st(b0),i=A(r,s),a=A(A(r,n),Fe(X(e,"float32")));return ee(o,i,a)}}}};var Q1={kernelName:_s,outputsToSave:[!0],gradFunc:(r,t)=>{let[e]=t;return{x:()=>A(r,A(e,tt(st(1),e)))}}};var tk={kernelName:Fs,gradFunc:r=>({x:()=>dt(r)})};var ek={kernelName:Ds,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>A(ga(X(e,"float32")),r)}}};var rk={kernelName:Rs,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>A(Fc(X(e,"float32")),r)}}};var ok={kernelName:ea,inputsToSave:["x"],gradFunc:(r,t,e)=>{let[o]=t,{begin:n,size:s}=e,i=o.shape,[a,l]=x0(o,n,s),u=[];for(let c=0;c<r.rank;c++)u.push([a[c],i[c]-a[c]-l[c]]);return{x:()=>Rr(r,u)}}};var nk={kernelName:sa,outputsToSave:[!0],gradFunc:(r,t,e)=>{let[o]=t,{dim:n}=e,s=!0,i=A(r,o);return{logits:()=>tt(i,A(nt(i,[n],s),o))}}};var sk={kernelName:Os,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>A(r,Cr(e))}}};var v0={kernelName:oa,gradFunc:(r,t,e)=>{let{blockShape:o,paddings:n}=e;return{x:()=>da(r,o,n)}}};var T0={kernelName:na,gradFunc:(r,t,e)=>{let{axis:o}=e;return{x:()=>Vt(r,o)}}};var ik={kernelName:Ls,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>ot(r,A(re(X(e,"float32")),2))}}};var ak={kernelName:lc,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>A(r,A(X(e,"float32"),2))}}};var lk={kernelName:Ps,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t,n=st(2);return{a:()=>A(r,A(n,tt(e,o))),b:()=>A(r,A(n,tt(o,e)))}}};var uk={kernelName:Vs,gradFunc:r=>({x:()=>dt(r)})};var ck={kernelName:zs,inputsToSave:["a","b"],gradFunc:(r,t)=>{let[e,o]=t,n=Tt(e.shape,o.shape);return{a:()=>{let a=r,l=Xt(e.shape,n);return l.length>0&&(a=nt(a,l)),D(a,e.shape)},b:()=>{let a=r,l=Xt(o.shape,n);return l.length>0&&(a=nt(a,l)),D(Ft(a),o.shape)}}}};var pk={kernelName:ra,inputsToSave:["x"],gradFunc:(r,t,e)=>{let[o]=t,n=o.shape.slice(),{axis:s}=e;Me(s,o.shape).forEach(u=>{n[u]=1});let a=D(r,n),l=A(a,Be(o.shape,"float32"));return{x:()=>l}}};var mk={kernelName:Ms,inputsToSave:["x"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>ot(r,$t(ga(e)))}}};var fk={kernelName:Bs,outputsToSave:[!0],gradFunc:(r,t)=>{let[e]=t;return{x:()=>A(tt(st(1),$t(e)),r)}}};var hk={kernelName:bn,inputsToSave:["x"],gradFunc:(r,t,e)=>{let[o]=t,{reps:n}=e;return{x:()=>{let i=dt(o);if(o.rank===1)for(let a=0;a<n[0];++a)i=U(i,Nt(r,[a*o.shape[0]],[o.shape[0]]));else if(o.rank===2)for(let a=0;a<n[0];++a)for(let l=0;l<n[1];++l)i=U(i,Nt(r,[a*o.shape[0],l*o.shape[1]],[o.shape[0],o.shape[1]]));else if(o.rank===3)for(let a=0;a<n[0];++a)for(let l=0;l<n[1];++l)for(let u=0;u<n[2];++u)i=U(i,Nt(r,[a*o.shape[0],l*o.shape[1],u*o.shape[2]],[o.shape[0],o.shape[1],o.shape[2]]));else if(o.rank===4)for(let a=0;a<n[0];++a)for(let l=0;l<n[1];++l)for(let u=0;u<n[2];++u)for(let c=0;c<n[3];++c)i=U(i,Nt(r,[a*o.shape[0],l*o.shape[1],u*o.shape[2],c*o.shape[3]],[o.shape[0],o.shape[1],o.shape[2],o.shape[3]]));else throw new Error(`Gradient for tile operation is not implemented for rank-${o.rank} tensors yet.`);return i}}}};var dk={kernelName:wn,gradFunc:(r,t,e)=>{let o=e,{perm:n}=o,s=Nm(n);return{x:()=>Rt(r,s)}}};var gk={kernelName:ia,gradFunc:(r,t,e)=>{let o=e,{axis:n}=o;return{value:()=>Ne(r,n)}}};var xk={kernelName:aa,inputsToSave:["segmentIds"],gradFunc:(r,t)=>{let[e]=t;return{x:()=>ZW(r,e)}}};function ZW(r,t){let e=Kr(t,dt(t)),o=Fn(r,e),n=Dr(t,st(0,"int32")),s=o.rank-n.rank;for(let a=0;a<s;++a)n=Ie(n,a+1);n=mr(n,Be(o.shape,"bool"));let i=dt(o);return ee(n,o,i)}var yk={kernelName:la,gradFunc:r=>({x:()=>dt(r)})};var JW=[Cg,NI,vI,TI,II,kI,EI,$I,AI,DI,RI,FI,OI,PI,zI,MI,BI,VI,GI,WI,UI,HI,qI,KI,XI,YI,ZI,JI,QI,t1,V1,e1,r1,o1,n1,s1,a1,i1,l1,p1,m1,f1,h1,d1,g1,x1,y1,b1,w1,S1,S0,S0,N1,T1,k1,E1,$1,A1,D1,R1,F1,_1,O1,L1,P1,N0,N0,z1,M1,B1,G1,W1,U1,H1,K1,q1,j1,X1,Y1,Z1,J1,Q1,tk,ek,rk,ok,nk,sk,v0,v0,T0,T0,ik,lk,ak,uk,ck,pk,mk,fk,hk,dk,gk,xk,yk];for(let r of JW)fN(r);_().prototype.abs=function(){return this.throwIfDisposed(),ae(this)};_().prototype.acos=function(){return this.throwIfDisposed(),sd(this)};_().prototype.acosh=function(){return this.throwIfDisposed(),id(this)};_().prototype.add=function(r){return this.throwIfDisposed(),U(this,r)};_().prototype.all=function(r,t){return this.throwIfDisposed(),Ec(this,r,t)};_().prototype.any=function(r,t){return this.throwIfDisposed(),yl(this,r,t)};_().prototype.argMax=function(r){return this.throwIfDisposed(),Tn(this,r)};_().prototype.argMin=function(r){return this.throwIfDisposed(),ad(this,r)};_().prototype.asScalar=function(){return this.throwIfDisposed(),E(this.size===1,()=>"The array must have only 1 element."),D(this,[])};_().prototype.asType=function(r){return this.throwIfDisposed(),X(this,r)};_().prototype.as1D=function(){return this.throwIfDisposed(),D(this,[this.size])};_().prototype.as2D=function(r,t){return this.throwIfDisposed(),D(this,[r,t])};_().prototype.as3D=function(r,t,e){return this.throwIfDisposed(),D(this,[r,t,e])};_().prototype.as4D=function(r,t,e,o){return this.throwIfDisposed(),D(this,[r,t,e,o])};_().prototype.as5D=function(r,t,e,o,n){return this.throwIfDisposed(),D(this,[r,t,e,o,n])};_().prototype.asin=function(){return this.throwIfDisposed(),ld(this)};_().prototype.asinh=function(){return this.throwIfDisposed(),ud(this)};_().prototype.atan=function(){return this.throwIfDisposed(),cd(this)};_().prototype.atan2=function(r){return this.throwIfDisposed(),pd(this,r)};_().prototype.atanh=function(){return this.throwIfDisposed(),md(this)};_().prototype.avgPool=function(r,t,e,o){return this.throwIfDisposed(),ha(this,r,t,e,o)};_().prototype.batchToSpaceND=function(r,t){return this.throwIfDisposed(),da(this,r,t)};_().prototype.batchNorm=function(r,t,e,o,n){return this.throwIfDisposed(),En(this,r,t,e,o,n)};_().prototype.broadcastTo=function(r){return this.throwIfDisposed(),$n(this,r)};_().prototype.cast=function(r){return this.throwIfDisposed(),X(this,r)};_().prototype.ceil=function(){return this.throwIfDisposed(),yd(this)};_().prototype.clipByValue=function(r,t){return this.throwIfDisposed(),je(this,r,t)};_().prototype.concat=function(r,t){return this.throwIfDisposed(),r instanceof At&&(r=[r]),Vt([this,...r],t)};_().prototype.conv1d=function(r,t,e,o,n,s){return this.throwIfDisposed(),Ac(this,r,t,e,o,n,s)};_().prototype.conv2dTranspose=function(r,t,e,o,n){return this.throwIfDisposed(),Rc(this,r,t,e,o,n)};_().prototype.conv2d=function(r,t,e,o,n,s){return this.throwIfDisposed(),Ur(this,r,t,e,o,n,s)};_().prototype.cos=function(){return this.throwIfDisposed(),ga(this)};_().prototype.cosh=function(){return this.throwIfDisposed(),Fc(this)};_().prototype.cumprod=function(r,t,e){return this.throwIfDisposed(),wl(this,r,t,e)};_().prototype.cumsum=function(r,t,e){return this.throwIfDisposed(),_c(this,r,t,e)};_().prototype.depthToSpace=function(r,t){return this.throwIfDisposed(),Id(this,r,t)};_().prototype.depthwiseConv2d=function(r,t,e,o,n,s){return this.throwIfDisposed(),An(this,r,t,e,o,n,s)};_().prototype.dilation2d=function(r,t,e,o,n){return this.throwIfDisposed(),kd(this,r,t,e,o,n)};_().prototype.divNoNan=function(r){return this.throwIfDisposed(),Ed(this,r)};_().prototype.div=function(r){return this.throwIfDisposed(),ot(this,r)};_().prototype.dot=function(r){return this.throwIfDisposed(),$d(this,r)};_().prototype.elu=function(){return this.throwIfDisposed(),Dn(this)};_().prototype.equal=function(r){return this.throwIfDisposed(),Sr(this,r)};_().prototype.erf=function(){return this.throwIfDisposed(),Ad(this)};_().prototype.euclideanNorm=function(r,t){return this.throwIfDisposed(),Dd(this,r,t)};_().prototype.exp=function(){return this.throwIfDisposed(),Fe(this)};_().prototype.expandDims=function(r){return this.throwIfDisposed(),Ie(this,r)};_().prototype.expm1=function(){return this.throwIfDisposed(),Rd(this)};_().prototype.fft=function(){return this.throwIfDisposed(),Ta(this)};_().prototype.flatten=function(){return this.throwIfDisposed(),D(this,[this.size])};_().prototype.floor=function(){return this.throwIfDisposed(),Rn(this)};_().prototype.floorDiv=function(r){return this.throwIfDisposed(),kc(this,r)};_().prototype.gather=function(r,t,e){return this.throwIfDisposed(),Fn(this,r,t,e)};_().prototype.greaterEqual=function(r){return this.throwIfDisposed(),Dr(this,r)};_().prototype.greater=function(r){return this.throwIfDisposed(),ge(this,r)};_().prototype.ifft=function(){return this.throwIfDisposed(),js(this)};_().prototype.irfft=function(){return this.throwIfDisposed(),qc(this)};_().prototype.isFinite=function(){return this.throwIfDisposed(),Fd(this)};_().prototype.isInf=function(){return this.throwIfDisposed(),_d(this)};_().prototype.isNaN=function(){return this.throwIfDisposed(),Od(this)};_().prototype.leakyRelu=function(r){return this.throwIfDisposed(),ya(this,r)};_().prototype.lessEqual=function(r){return this.throwIfDisposed(),so(this,r)};_().prototype.less=function(r){return this.throwIfDisposed(),Ks(this,r)};_().prototype.localResponseNormalization=function(r,t,e,o){return this.throwIfDisposed(),Ld(this,r,t,e,o)};_().prototype.logSigmoid=function(){return this.throwIfDisposed(),Pd(this)};_().prototype.logSoftmax=function(r){return this.throwIfDisposed(),Oc(this,r)};_().prototype.logSumExp=function(r,t){return this.throwIfDisposed(),Lc(this,r,t)};_().prototype.log=function(){return this.throwIfDisposed(),Ye(this)};_().prototype.log1p=function(){return this.throwIfDisposed(),ba(this)};_().prototype.logicalAnd=function(r){return this.throwIfDisposed(),mr(this,r)};_().prototype.logicalNot=function(){return this.throwIfDisposed(),wa(this)};_().prototype.logicalOr=function(r){return this.throwIfDisposed(),Pc(this,r)};_().prototype.logicalXor=function(r){return this.throwIfDisposed(),zd(this,r)};_().prototype.matMul=function(r,t,e){return this.throwIfDisposed(),Dt(this,r,t,e)};_().prototype.maxPool=function(r,t,e,o){return this.throwIfDisposed(),Ca(this,r,t,e,o)};_().prototype.max=function(r,t){return this.throwIfDisposed(),Xe(this,r,t)};_().prototype.maximum=function(r){return this.throwIfDisposed(),Kr(this,r)};_().prototype.mean=function(r,t){return this.throwIfDisposed(),oe(this,r,t)};_().prototype.min=function(r,t){return this.throwIfDisposed(),Us(this,r,t)};_().prototype.minimum=function(r){return this.throwIfDisposed(),wo(this,r)};_().prototype.mirrorPad=function(r,t){return this.throwIfDisposed(),Vd(this,r,t)};_().prototype.mod=function(r){return this.throwIfDisposed(),Gd(this,r)};_().prototype.mul=function(r){return this.throwIfDisposed(),A(this,r)};_().prototype.neg=function(){return this.throwIfDisposed(),Ft(this)};_().prototype.norm=function(r,t,e){return this.throwIfDisposed(),Hs(this,r,t,e)};_().prototype.notEqual=function(r){return this.throwIfDisposed(),tn(this,r)};_().prototype.oneHot=function(r,t=1,e=0){return this.throwIfDisposed(),Nl(this,r,t,e)};_().prototype.onesLike=function(){return this.throwIfDisposed(),Ke(this)};_().prototype.pad=function(r,t){return this.throwIfDisposed(),Rr(this,r,t)};_().prototype.pool=function(r,t,e,o,n,s){return this.throwIfDisposed(),Wd(this,r,t,e,o,n,s)};_().prototype.pow=function(r){return this.throwIfDisposed(),Ar(this,r)};_().prototype.prelu=function(r){return this.throwIfDisposed(),Na(this,r)};_().prototype.prod=function(r,t){return this.throwIfDisposed(),Ud(this,r,t)};_().prototype.reciprocal=function(){return this.throwIfDisposed(),Xd(this)};_().prototype.relu=function(){return this.throwIfDisposed(),ir(this)};_().prototype.relu6=function(){return this.throwIfDisposed(),zc(this)};_().prototype.reshapeAs=function(r){return this.throwIfDisposed(),D(this,r.shape)};_().prototype.reshape=function(r){return this.throwIfDisposed(),D(this,r)};_().prototype.resizeBilinear=function(r,t,e){return this.throwIfDisposed(),mg(this,r,t,e)};_().prototype.resizeNearestNeighbor=function(r,t,e){return this.throwIfDisposed(),fg(this,r,t,e)};_().prototype.reverse=function(r){return this.throwIfDisposed(),Ve(this,r)};_().prototype.rfft=function(){return this.throwIfDisposed(),Ia(this)};_().prototype.round=function(){return this.throwIfDisposed(),Mc(this)};_().prototype.rsqrt=function(){return this.throwIfDisposed(),Bc(this)};_().prototype.selu=function(){return this.throwIfDisposed(),Vc(this)};_().prototype.separableConv2d=function(r,t,e,o,n,s){return this.throwIfDisposed(),Gc(this,r,t,e,o,n,s)};_().prototype.sigmoid=function(){return this.throwIfDisposed(),Cr(this)};_().prototype.sign=function(){return this.throwIfDisposed(),Yd(this)};_().prototype.sin=function(){return this.throwIfDisposed(),Wc(this)};_().prototype.sinh=function(){return this.throwIfDisposed(),Uc(this)};_().prototype.slice=function(r,t){return this.throwIfDisposed(),Nt(this,r,t)};_().prototype.softmax=function(r){return this.throwIfDisposed(),va(this,r)};_().prototype.softplus=function(){return this.throwIfDisposed(),Qo(this)};_().prototype.spaceToBatchND=function(r,t){return this.throwIfDisposed(),Sa(this,r,t)};_().prototype.split=function(r,t){return this.throwIfDisposed(),Ge(this,r,t)};_().prototype.sqrt=function(){return this.throwIfDisposed(),re(this)};_().prototype.square=function(){return this.throwIfDisposed(),$t(this)};_().prototype.squaredDifference=function(r){return this.throwIfDisposed(),jc(this,r)};_().prototype.squeeze=function(r){return this.throwIfDisposed(),ao(this,r)};_().prototype.stack=function(r,t){this.throwIfDisposed();let e=r instanceof At?[this,r]:[this,...r];return Ne(e,t)};_().prototype.step=function(r){return this.throwIfDisposed(),Ro(this,r)};_().prototype.stridedSlice=function(r,t,e,o,n,s,i,a){return this.throwIfDisposed(),Zd(this,r,t,e,o,n,s,i,a)};_().prototype.sub=function(r){return this.throwIfDisposed(),tt(this,r)};_().prototype.sum=function(r,t){return this.throwIfDisposed(),nt(this,r,t)};_().prototype.tan=function(){return this.throwIfDisposed(),Jd(this)};_().prototype.tanh=function(){return this.throwIfDisposed(),kn(this)};_().prototype.tile=function(r){return this.throwIfDisposed(),sr(this,r)};_().prototype.toBool=function(){return this.throwIfDisposed(),X(this,"bool")};_().prototype.toFloat=function(){return this.throwIfDisposed(),X(this,"float32")};_().prototype.toInt=function(){return this.throwIfDisposed(),X(this,"int32")};_().prototype.topk=function(r,t){return this.throwIfDisposed(),tg(this,r,t)};_().prototype.transpose=function(r){return this.throwIfDisposed(),Rt(this,r)};_().prototype.unique=function(r){return this.throwIfDisposed(),eg(this,r)};_().prototype.unsortedSegmentSum=function(r,t){return this.throwIfDisposed(),Yc(this,r,t)};_().prototype.unstack=function(r){return this.throwIfDisposed(),We(this,r)};_().prototype.where=function(r,t){return this.throwIfDisposed(),ee(r,this,t)};_().prototype.zerosLike=function(){return this.throwIfDisposed(),dt(this)};var qr=class extends Error{constructor(t){super(t),Object.setPrototypeOf(this,qr.prototype)}},xr=class extends Error{constructor(t){super(t),Object.setPrototypeOf(this,xr.prototype)}},L=class extends Error{constructor(t){super(t),Object.setPrototypeOf(this,L.prototype)}},yt=class extends Error{constructor(t){super(t),Object.setPrototypeOf(this,yt.prototype)}},sp=class extends Error{constructor(t){super(t),Object.setPrototypeOf(this,sp.prototype)}};var Fm=class{constructor(t){this.maxEntries=t||100,this.cache=new Map}get(t){let e;return this.cache.has(t)&&(e=this.cache.get(t),this.cache.delete(t),this.cache.set(t,e)),e}put(t,e){if(this.cache.has(t))this.cache.delete(t);else if(this.cache.size>=this.maxEntries){let o=this.cache.keys().next().value;this.cache.delete(o)}this.cache.set(t,e)}getMaxEntries(){return this.maxEntries}setMaxEntries(t){if(t<0)throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${t}.`);if(this.maxEntries>t)for(let e=0;e<this.maxEntries-t;e++){let o=this.cache.keys().next().value;this.cache.delete(o)}this.maxEntries=t}};function Oo(r,t){if(Array.isArray(r)){let e=[];for(let o=0;o<t;o++)e=e.concat(r);return e}else{let e=new Array(t);return e.fill(r),e}}function Co(r,t){if(!r)throw new sp(t)}function k0(r,t){let e=0;for(let o of r)o===t&&e++;return e}function Je(r){return r.length===1?r[0]:r}function Yt(r){return Array.isArray(r)?r:[r]}function Lo(r){let e=r.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return e[0]!=="_"?e:"private"+e}function Zs(r){return r.length<=1||r.indexOf("_")===-1?r:r.replace(/[_]+(\w|$)/g,(t,e)=>e.toUpperCase())}var _o={};function ip(r){if(r==null)return null;let t={};return t.className=r.getClassName(),t.config=r.getConfig(),t}function I0(r){if(!(r==null||typeof r!="object"))if(Array.isArray(r))r.forEach(t=>I0(t));else{let t=Object.keys(r);for(let e of t){let o=r[e];o!=null&&typeof o=="object"&&(!Array.isArray(o)&&o.type==="ndarray"&&typeof o.value=="number"?r[e]=o.value:I0(o))}}}function Pn(r,t={},e={},o="object",n=!1){if(typeof r=="string"){let s=r,i;if(s in e)i=e[s];else if(s in _o)i=_o[s];else if(i=t[s],i==null)throw new L(`Unknown ${o}: ${r}. This may be due to one of the following reasons:
1. The ${o} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${o} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return i}else{let s=r;if(s.className==null||s.config==null)throw new L(`${o}: Improper config format: ${JSON.stringify(s)}.
'className' and 'config' must set.`);let i=s.className,a,l;if(i in e?[a,l]=e[i]:i in _o?[a,l]=_o.className:i in t&&([a,l]=t[i]),a==null)throw new L(`Unknown ${o}: ${i}. This may be due to one of the following reasons:
1. The ${o} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${o} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(l!=null){let u={};for(let f of Object.keys(_o))u[f]=_o[f];for(let f of Object.keys(e))u[f]=e[f];let c=s.config;c.customObjects=u;let p=Object.assign({},_o);for(let f of Object.keys(e))_o[f]=e[f];I0(s.config);let m=l(a,s.config,e,n);return _o=Object.assign({},p),m}else{let u=Object.assign({},_o);for(let p of Object.keys(e))_o[p]=e[p];let c=new a(s.config);return _o=Object.assign({},u),c}}}function QW(r,t){return r<t?-1:r>t?1:0}function _m(r,t){return-1*QW(r,t)}function Po(r){if(r==null)return r;let t=[];for(let e of r)t.indexOf(e)===-1&&t.push(e);return t}function bk(r){if(r==null)throw new L(`Invalid value in obj: ${JSON.stringify(r)}`);for(let t in r)if(r.hasOwnProperty(t))return!1;return!0}function zn(r,t,e){if(e!=null&&r.indexOf(e)<0)throw new L(`${e} is not a valid ${t}.  Valid values are ${r} or null/undefined.`)}function Ng(r,t,e=0,o=1/0){return Co(e>=0),Co(o>=e),Array.isArray(r)&&r.length>=e&&r.length<=o&&r.every(n=>typeof n===t)}function $e(r,t){Array.isArray(r)?(y.assert(r.length>0,()=>`${t} is unexpectedly an empty array.`),r.forEach((e,o)=>$e(e,`element ${o+1} of ${t}`))):y.assert(Number.isInteger(r)&&r>0,()=>`Expected ${t} to be a positive integer, but got ${wk(r)}.`)}function wk(r){return r===null?"null":Array.isArray(r)?"["+r.map(t=>wk(t)).join(",")+"]":typeof r=="string"?`"${r}"`:`${r}`}function Ck(r,t,e){let o=e!=null?e():y.now(),n;return(...i)=>{let a=e!=null?e():y.now();return a-o<t||(o=a,n=r(...i)),n}}function vg(r){return r==="relu"?"relu":r==="linear"?"linear":r==="elu"?"elu":null}var tU=0;function Ig(){return tU++}var Tg={};function $a(r=""){return r in Tg||(Tg[r]=0),Tg[r]+=1,r+Tg[r].toString()}var Sk=["channelsFirst","channelsLast"],Nk=["nearest","bilinear"],vk=["valid","same","causal"],Tk=["max","avg"],Ik=["sum","mul","concat","ave"];var ap=new Map;function ce(r){zn(Sk,"DataFormat",r)}function Ek(r){zn(Nk,"InterpolationFormat",r)}function Fr(r){zn(vk,"PaddingMode",r)}function E0(r){zn(Tk,"PoolMode",r)}var Om=[],kk="/";function on(r,t){Om.push(r);try{let e=t();return Om.pop(),e}catch(e){throw Om.pop(),e}}function eU(){return Om.length===0?"":Om.join(kk)+kk}function kg(r){if(!$k(r))throw new Error("Not a valid tensor name: '"+r+"'");return eU()+r}function Eg(r){if(!$k(r))throw new Error("Not a valid tensor name: '"+r+"'");ap.has(r)||ap.set(r,0);let t=ap.get(r);if(ap.set(r,ap.get(r)+1),t>0){let e=`${r}_${t}`;return ap.set(e,1),e}else return r}var rU=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function $k(r){return!!r.match(rU)}function Ak(r){return r===parseInt(r.toString(),10)}function zo(r,t,e){t==null&&(t=0),e==null&&(e=r.length);let o=1;for(let n=t;n<e;++n)o*=r[n];return o}function _l(r){if(r.length===0)return Number.NaN;let t=Number.POSITIVE_INFINITY;for(let e=0;e<r.length;e++){let o=r[e];o<t&&(t=o)}return t}function nn(r){if(r.length===0)return Number.NaN;let t=Number.NEGATIVE_INFINITY;for(let e=0;e<r.length;e++){let o=r[e];o>t&&(t=o)}return t}function _r(r,t){if(t<r)throw new L(`end (${t}) < begin (${r}) is forbidden.`);let e=[];for(let o=r;o<t;++o)e.push(o);return e}var $0;function Pe(){return $0==null&&($0=uv().epsilon()),$0}function Or(){return"channelsLast"}function Nr(r,t){return X(r,t)}function Qs(r,t=-1){let e=r.shape.slice();return t<0&&(t=e.length+t+1),e.splice(t,0,1),D(r,e)}function Dk(r,t){return M(()=>{if(r.shape.length!==2)throw new L(`repeat() expects a rank-2 tensor, but received a rank-${r.shape.length} tensor.`);let e=Qs(r,1);return Ag(e,[1,t,1])})}function Rk(r){let t=[zo(r.shape)];return D(r,t)}function Fk(r){if(r.rank<=1)throw new L(`batchFlatten requires a minimum rank of 2. Got rank: ${r.rank}.`);let t=[r.shape[0],zo(r.shape,1)];return D(r,t)}function Js(r,t,e){return M(()=>{switch(r.rank){case 1:return Hc(r,t,e);case 2:return Im(r,[t,0],[e,r.shape[1]]);case 3:return Kc(r,[t,0,0],[e,r.shape[1],r.shape[2]]);case 4:return kl(r,[t,0,0,0],[e,r.shape[1],r.shape[2],r.shape[3]]);case 5:return Nt(r,[t,0,0,0,0],[e,r.shape[1],r.shape[2],r.shape[3],r.shape[4]]);case 6:return Nt(r,[t,0,0,0,0,0],[e,r.shape[1],r.shape[2],r.shape[3],r.shape[4],r.shape[5]]);default:throw new L(`sliceAlongFirstAxis() received an unsupported tensor rank: ${r.rank}`)}})}function A0(r,t,e){return M(()=>{switch(r.rank){case 1:return Hc(r,t,e);case 2:return Im(r,[0,t],[r.shape[0],e]);case 3:return Kc(r,[0,0,t],[r.shape[0],r.shape[1],e]);case 4:return kl(r,[0,0,0,t],[r.shape[0],r.shape[1],r.shape[2],e]);default:throw new L(`sliceAlongLastAxis() received an unsupported tensor rank: ${r.rank}`)}})}function Lm(r,t,e,o){return M(()=>{switch(r.rank){case 1:return Hc(r,t,e);case 2:switch(o){case 1:return Js(r,t,e);case 2:return A0(r,t,e);default:throw new L(`The axis is not within the rank of the tensor ${o}`)}case 3:switch(o){case 1:return Js(r,t,e);case 2:return Kc(r,[0,t,0],[r.shape[0],e,r.shape[2]]);case 3:return A0(r,t,e);default:throw new L(`The axis is not within the rank of the tensor ${o}`)}case 4:switch(o){case 1:return Js(r,t,e);case 2:return kl(r,[0,t,0,0],[r.shape[0],e,r.shape[2],r.shape[3]]);case 3:return kl(r,[0,0,t,0],[r.shape[0],r.shape[1],e,r.shape[3]]);case 4:return A0(r,t,e);default:throw new L(`The axis is not within the rank of the tensor ${o}`)}default:throw new L(`sliceAlongLastAxis() received an unsupported tensor rank: ${r.rank}`)}})}function lp(r,t=-1){let e;return t<0&&(e=r[0].rank,e!==0?t=e:t=0),t===r[0].rank&&(t=-1),Vt(r,t)}function R0(r,t){switch(r.rank){case 1:return bd([r,t]);case 2:return wd([r,t],0);case 3:return Cd([r,t],0);case 4:return Sd([r,t],0);default:throw new L(`concatAlongFirstAxis() received an unsupported tensor rank: ${r.rank}`)}}function Ag(r,t){if(Array.isArray(t)||(t=[t]),r.rank!==t.length)throw new L(`The length of input n (${t.length}) does not match the number of dimensions in input x (${r.rank})`);return sr(r,t)}function up(r,t=0,e=1,o,n){return Il(r,t,e,o,n)}function Mo(r,t,e,o){if(r.rank<2||t.rank<2)throw new yt(`dot requires both inputs to be rank >= 2 but got x shape = ${r.shape} and y shape = ${t.shape}`);if(t.rank>=3){let n=r.shape.slice(-1)[0],s=t.shape.slice(-2)[0];if(n!==s)throw new yt(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${r.shape} and  y shape = ${t.shape}`)}if(r.rank===2&&t.rank===2)return ka.matMul({a:r,b:t,transposeA:!1,transposeB:!1,bias:o?D0(r.rank,o,Or()):null,activation:e});{let n=r.shape.slice(),s=n.pop();r=D(r,[-1,s]);let i=t.shape.slice(),a=i.pop(),l=i.pop(),u=[...i,a],c=Array.from({length:t.rank},(h,g)=>g===0?t.rank-2:g<=t.rank-2?g-1:g);t=D(Rt(t,c),[l,-1]);let p=[...n,...u],m=!1,f=!1;return D(ka.matMul({a:r,b:t,transposeA:m,transposeB:f,bias:o?D0(r.rank,o,Or()):null,activation:e}),p)}}function Dg(r,t,e){return M(()=>(Array.isArray(t)?t=ke(t,"int32"):t=X(t,"int32"),Fn(r,t,e)))}function Ol(r){return A(r,r)}function D0(r,t,e){let o=t.shape;if(t.rank!==1&&t.rank!==r)throw new L(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${r}`);if(r===5){if(e==="channelsFirst")return o.length===1?D(t,[1,o[0],1,1,1]):D(t,[1,o[3],o[0],o[1],o[2]]);if(e==="channelsLast")return o.length===1?D(t,[1,1,1,1,o[0]]):D(t,[1].concat(o))}else if(r===4){if(e==="channelsFirst")return o.length===1?D(t,[1,o[0],1,1]):D(t,[1,o[2],o[0],o[1]]);if(e==="channelsLast")return o.length===1?D(t,[1,1,1,o[0]]):D(t,[1].concat(o))}else if(r===3){if(e==="channelsFirst")return o.length===1?D(t,[1,o[0],1]):D(t,[1,o[1],o[0]]);if(e==="channelsLast")return o.length===1?D(t,[1,1,o[0]]):D(t,[1].concat(o))}else if(r<3)return t;throw new L(`Unsupported input rank by biasAdd: ${t.rank}`)}function Lr(r,t,e){return M(()=>(e==null&&(e=Or()),ce(e),U(r,D0(r.rank,t,e))))}function _k(r,t=1){if(t!==1)throw new yt(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return Dn(r)}function Ok(r){return M(()=>ot(r,U(ae(r),1)))}function Rg(r,t,e,o){return M(()=>s0(r,t,e,o))}function Lk(r){return M(()=>{let t=U(.5,A(.2,r));return je(t,0,1)})}function Aa(r,t,e=!1){return e?r():t()}var Pk=["fanIn","fanOut","fanAvg"],zk=["normal","uniform","truncatedNormal"];function oU(r){zn(Pk,"FanMode",r)}function nU(r){zn(zk,"Distribution",r)}var Pr=class extends K.Serializable{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}},Pm=class extends Pr{apply(t,e){return ne(t,e)}};Pm.className="Zeros";K.registerClass(Pm);var Ll=class extends Pr{apply(t,e){return Be(t,e)}};Ll.className="Ones";K.registerClass(Ll);var zm=class extends Pr{constructor(t){if(super(),typeof t!="object")throw new L(`Expected argument of type ConstantConfig but got ${t}`);if(t.value===void 0)throw new L(`config must have value set but got ${t}`);this.value=t.value}apply(t,e){return M(()=>A(st(this.value),Be(t,e)))}getConfig(){return{value:this.value}}};zm.className="Constant";K.registerClass(zm);var Mm=class extends Pr{constructor(t){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=t.minval||this.DEFAULT_MINVAL,this.maxval=t.maxval||this.DEFAULT_MAXVAL,this.seed=t.seed}apply(t,e){return io(t,this.minval,this.maxval,e,this.seed)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}};Mm.className="RandomUniform";K.registerClass(Mm);var Bm=class extends Pr{constructor(t){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=t.mean||this.DEFAULT_MEAN,this.stddev=t.stddev||this.DEFAULT_STDDEV,this.seed=t.seed}apply(t,e){if(e=e||"float32",e!=="float32"&&e!=="int32")throw new yt(`randomNormal does not support dType ${e}.`);return up(t,this.mean,this.stddev,e,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}};Bm.className="RandomNormal";K.registerClass(Bm);var Vm=class extends Pr{constructor(t){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=t.mean||this.DEFAULT_MEAN,this.stddev=t.stddev||this.DEFAULT_STDDEV,this.seed=t.seed}apply(t,e){if(e=e||"float32",e!=="float32"&&e!=="int32")throw new yt(`truncatedNormal does not support dType ${e}.`);return Xc(t,this.mean,this.stddev,e,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}};Vm.className="TruncatedNormal";K.registerClass(Vm);var Gm=class extends Pr{constructor(t){super(),this.gain=t.gain!=null?t.gain:1}apply(t,e){return M(()=>{if(t.length!==2||t[0]!==t[1])throw new L("Identity matrix initializer can only be used for 2D square matrices.");return A(this.gain,Cl(t[0]))})}getConfig(){return{gain:this.gain}}};Gm.className="Identity";K.registerClass(Gm);function sU(r,t="channelsLast"){let e,o;if(ce(t),r.length===2)e=r[0],o=r[1];else if([3,4,5].indexOf(r.length)!==-1){if(t==="channelsFirst"){let n=zo(r,2);e=r[1]*n,o=r[0]*n}else if(t==="channelsLast"){let n=zo(r,0,r.length-2);e=r[r.length-2]*n,o=r[r.length-1]*n}}else{let n=zo(r);e=Math.sqrt(n),o=Math.sqrt(n)}return[e,o]}var vr=class extends Pr{constructor(t){if(super(),t.scale<0)throw new L(`scale must be a positive float. Got: ${t.scale}`);this.scale=t.scale==null?1:t.scale,this.mode=t.mode==null?"fanIn":t.mode,oU(this.mode),this.distribution=t.distribution==null?"normal":t.distribution,nU(this.distribution),this.seed=t.seed}apply(t,e){let o=sU(t),n=o[0],s=o[1],i=this.scale;if(this.mode==="fanIn"?i/=Math.max(1,n):this.mode==="fanOut"?i/=Math.max(1,s):i/=Math.max(1,(n+s)/2),this.distribution==="normal"){let a=Math.sqrt(i);if(e=e||"float32",e!=="float32"&&e!=="int32")throw new yt(`${this.getClassName()} does not support dType ${e}.`);return Xc(t,0,a,e,this.seed)}else{let a=Math.sqrt(3*i);return io(t,-a,a,e,this.seed)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}};vr.className="VarianceScaling";K.registerClass(vr);var cp=class extends vr{constructor(t){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:t==null?null:t.seed})}getClassName(){return vr.className}};cp.className="GlorotUniform";K.registerClass(cp);var pp=class extends vr{constructor(t){super({scale:1,mode:"fanAvg",distribution:"normal",seed:t==null?null:t.seed})}getClassName(){return vr.className}};pp.className="GlorotNormal";K.registerClass(pp);var mp=class extends vr{constructor(t){super({scale:2,mode:"fanIn",distribution:"normal",seed:t==null?null:t.seed})}getClassName(){return vr.className}};mp.className="HeNormal";K.registerClass(mp);var fp=class extends vr{constructor(t){super({scale:2,mode:"fanIn",distribution:"uniform",seed:t==null?null:t.seed})}getClassName(){return vr.className}};fp.className="HeUniform";K.registerClass(fp);var hp=class extends vr{constructor(t){super({scale:1,mode:"fanIn",distribution:"normal",seed:t==null?null:t.seed})}getClassName(){return vr.className}};hp.className="LeCunNormal";K.registerClass(hp);var dp=class extends vr{constructor(t){super({scale:1,mode:"fanIn",distribution:"uniform",seed:t==null?null:t.seed})}getClassName(){return vr.className}};dp.className="LeCunUniform";K.registerClass(dp);var Wm=class extends Pr{constructor(t){super(),this.DEFAULT_GAIN=1,this.ELEMENTS_WARN_SLOW=2e3,this.gain=t.gain==null?this.DEFAULT_GAIN:t.gain,this.seed=t.seed}apply(t,e){return M(()=>{if(t.length<2)throw new yt("Shape must be at least 2D.");if(e!=="int32"&&e!=="float32"&&e!==void 0)throw new TypeError(`Unsupported data type ${e}.`);e=e;let o=y.sizeFromShape(t.slice(0,-1)),n=t[t.length-1],s=o*n;s>this.ELEMENTS_WARN_SLOW&&console.warn(`Orthogonal initializer is being called on a matrix with more than ${this.ELEMENTS_WARN_SLOW} (${s}) elements: Slowness may result.`);let i=[Math.max(n,o),Math.min(n,o)],a=up(i,0,1,e,this.seed),l=l0.qr(a,!1),u=l[0],p=l[1].flatten().stridedSlice([0],[Math.min(n,o)*Math.min(n,o)],[Math.min(n,o)+1]);return u=A(u,p.sign()),o<n&&(u=u.transpose()),A(st(this.gain),u.reshape(t))})}getConfig(){return{gain:this.gain,seed:this.seed}}};Wm.className="Orthogonal";K.registerClass(Wm);var Mk={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function Bk(r,t={}){return Pn(r,K.SerializationMap.getMap().classNameMap,t,"initializer")}function se(r){return ip(r)}function jt(r){if(typeof r=="string"){let t=r in Mk?Mk[r]:r;if(t==="GlorotNormal")return new pp;if(t==="GlorotUniform")return new cp;if(t==="HeNormal")return new mp;if(t==="HeUniform")return new fp;if(t==="LeCunNormal")return new hp;if(t==="LeCunUniform")return new dp;{let e={};return e.className=t,e.config={},Bk(e)}}else return r instanceof Pr?r:Bk(r)}function Fg(r){return Array.isArray(r)&&Array.isArray(r[0])}function gp(r){return r.length===0?[]:Array.isArray(r[0])?r:[r]}function gt(r){let t;if(Array.isArray(r)){if(r.length!==1)throw new L(`Expected Tensor length to be 1; got ${r.length}`);t=r[0]}else t=r;return t}function Et(r){if(Array.isArray(r)&&Array.isArray(r[0])){if(r.length===1)return r=r,r[0];throw new L(`Expected exactly 1 Shape; got ${r.length}`)}else return r}function xp(r){let t=0;for(let e of r)e.shape.length===0?t+=1:t+=e.shape.reduce((o,n)=>o*n);return t}var Gk="Variable",Um=class{constructor(t,e="float32",o=Gk,n=!0,s=null){this.dtype=e??"float32",this.shape=t.shape,this.id=Ig(),o=o??Gk,this.originalName=kg(o),this.name=Eg(this.originalName),this.trainable_=n,this.constraint=s,this.val=rg(t,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(t){return this.assertNotDisposed(),aU(this.val,t),this.val.id!==t.id&&(this.val.assign(t),this.constraint!=null&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(t){this.trainable_=t,this.val.trainable=t}};function aU(r,t){if(r.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(r.shape)+" vs. "+JSON.stringify(t.shape))}function Hm(r){return r.map(t=>t.read())}function yp(r){r.forEach(t=>{t[0].write(t[1])})}var Zt=class{constructor(t){this.dtype=t.dtype,this.shape=t.shape,t.shape!=null?this.ndim=t.shape.length:this.ndim=t.ndim,this.maxNDim=t.maxNDim,this.minNDim=t.minNDim,this.axes=t.axes||{}}},Tr=class{constructor(t,e,o,n,s,i,a){this.dtype=t,this.shape=e,this.sourceLayer=o,this.inputs=n,this.callArgs=s,this.outputTensorIndex=a,this.id=Ig(),i!=null&&(this.originalName=kg(i),this.name=Eg(this.originalName)),this.rank=e.length}},lU=0,ti=class{constructor(t,e){this.callArgs=e,this.id=lU++,this.outboundLayer=t.outboundLayer,this.inboundLayers=t.inboundLayers,this.nodeIndices=t.nodeIndices,this.tensorIndices=t.tensorIndices,this.inputTensors=t.inputTensors,this.outputTensors=t.outputTensors,this.inputMasks=t.inputMasks,this.outputMasks=t.outputMasks,this.inputShapes=t.inputShapes,this.outputShapes=t.outputShapes;for(let o of t.inboundLayers)o?.outboundNodes.push(this);t.outboundLayer.inboundNodes.push(this)}getConfig(){let t=[];for(let e of this.inboundLayers)e!=null?t.push(e.name):t.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:t,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}},uU=0,wt=class extends K.Serializable{constructor(t={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=uU++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let e=t.name;if(!e){let o=this.getClassName();e=Lo(o)+"_"+$a(o)}if(this.name=e,this.trainable_=t.trainable==null?!0:t.trainable,t.inputShape!=null||t.batchInputShape!=null){let o;if(t.batchInputShape!=null)o=t.batchInputShape;else if(t.inputShape!=null){let s=null;t.batchSize!=null&&(s=t.batchSize),o=[s].concat(t.inputShape)}this.batchInputShape=o;let n=t.dtype;n==null&&(n=t.inputDType),n==null&&(n="float32"),this.dtype=n}t.weights!=null?this.initialWeights=t.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(t,e){return t.name+"_ib-"+e.toString()}getNodeAtIndex(t,e){if(this.inboundNodes.length===0)throw new xr(`The layer has never been called and thus has no defined ${e}.`);if(this.inboundNodes.length<=t)throw new L(`Asked to get ${e} at node ${t}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[t]}getInputAt(t){return Je(this.getNodeAtIndex(t,"input").inputTensors)}getOutputAt(t){return Je(this.getNodeAtIndex(t,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new qr(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(this.inboundNodes.length===0)throw new qr(`Layer ${this.name} is not connected, no input to return.`);return Je(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(this.inboundNodes.length===0)throw new qr(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new qr(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return Je(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map(t=>t())}get updates(){return this._updates}get built(){return this._built}set built(t){this._built=t}get trainable(){return this.trainable_}set trainable(t){this._trainableWeights.forEach(e=>e.trainable=t),this.trainable_=t}get trainableWeights(){return this.trainable_?this._trainableWeights.filter(t=>t.trainable):[]}set trainableWeights(t){this._trainableWeights=t}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter(t=>!t.trainable).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(t){this._nonTrainableWeights=t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(t){if(t=Yt(t),this.inputSpec==null||this.inputSpec.length===0)return;let e=Yt(this.inputSpec);if(t.length!==e.length)throw new L(`Layer ${this.name} expects ${e.length} inputs, but it received ${t.length} input tensors. Input received: ${t}`);for(let o=0;o<t.length;o++){let n=t[o],s=e[o];if(s==null)continue;let i=n.rank;if(s.ndim!=null&&i!==s.ndim)throw new L(`Input ${o} is incompatible with layer ${this.name}: expected ndim=${s.ndim}, found ndim=${i}`);if(s.maxNDim!=null&&i>s.maxNDim)throw new L(`Input ${o} is incompatible with layer ${this.name}: expected max_ndim=${s.maxNDim}, found ndim=${i}`);if(s.minNDim!=null&&i<s.minNDim)throw new L(`Input ${o} is incompatible with layer ${this.name}: expected min_ndim=${s.minNDim}, found ndim=${i}.`);if(s.dtype!=null&&n.dtype!==s.dtype)throw new L(`Input ${o} is incompatible with layer ${this.name} : expected dtype=${s.dtype}, found dtype=${n.dtype}.`);if(s.axes){let a=n.shape;for(let l in s.axes){let u=Number(l),c=s.axes[l],p=u>=0?a[u]:a[a.length+u];if(c!=null&&[c,null].indexOf(p)===-1)throw new L(`Input ${o} is incompatible with layer ${this.name}: expected axis ${u} of input shape to have value ${c} but got shape ${a}.`)}}if(s.shape!=null)for(let a=0;a<s.shape.length;++a){let l=s.shape[a],u=n.shape[a];if(l!=null&&u!=null&&l!==u)throw new L(`Input ${o} is incompatible with layer ${this.name}: expected shape=${s.shape}, found shape=${n.shape}.`)}}}call(t,e){return t}invokeCallHook(t,e){this._callHook!=null&&this._callHook(t,e)}setCallHook(t){this._callHook=t}clearCallHook(){this._callHook=null}apply(t,e){e=e||{},this.assertNotDisposed();let o=Yt(t),n=!0;for(let i of o)if(!(i instanceof Tr)){n=!1;break}let s=!0;for(let i of o)if(i instanceof Tr){s=!1;break}if(n===s)throw new L("Arguments to apply() must be all SymbolicTensors or all Tensors");return on(this.name,()=>{if(!this.built){this.assertInputCompatibility(t);let i=[];for(let a of Yt(t))i.push(a.shape);this.build(Je(i)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),this._refCount===null&&s&&(this._refCount=1)}if(this.assertInputCompatibility(t),s){let i=this.call(t,e),a=Yt(i),l=[];for(let u of a)o.indexOf(u)!==-1&&(u=u.clone()),l.push(u);if(i=Je(l),this.activityRegularizer!=null)throw new yt("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return i}else{let i=cU(t),a=this.computeOutputShape(i),l,u=pU(t);if(this.warnOnIncompatibleInputShape(Array.isArray(t)?i[0]:i),a!=null&&a.length>0&&Array.isArray(a[0])?l=a.map((c,p)=>new Tr(u,c,this,Yt(t),e,this.name,p)):l=new Tr(u,a,this,Yt(t),e,this.name),this.addInboundNode(t,l,null,null,i,a,e),this._refCount++,this.activityRegularizer!=null)throw new yt("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return l}})}warnOnIncompatibleInputShape(t){if(this.batchInputShape!=null)if(t.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(t)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let e=!1;this.batchInputShape.forEach((o,n)=>{o!=null&&t[n]!=null&&t[n]!==o&&(e=!0)}),e&&console.warn(`The shape of the input tensor (${JSON.stringify(t)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(this.inboundNodes==null||this.inboundNodes.length===0)throw new qr(`The layer ${this.name} has never been called and thus has no defined output shape.`);let t=[];for(let e of this.inboundNodes){let o=JSON.stringify(e.outputShapes);t.indexOf(o)===-1&&t.push(o)}if(t.length===1){let e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&e.length===1?e[0]:e}else throw new qr(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new xr(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return xp(this.weights)}build(t){this.built=!0}getWeights(t=!1){return Hm(t?this.trainableWeights:this.weights)}setWeights(t){M(()=>{let e=this.weights;if(e.length!==t.length)throw new L(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${t.length}, but the layer was expecting ${e.length} weights. Provided weights: ${t}...`);if(e.length===0)return;let o=[],n=Hm(e);for(let s=0;s<n.length;++s){let i=n[s],a=e[s],l=t[s];if(!y.arraysEqual(i.shape,l.shape))throw new L(`Layer weight shape ${i.shape} not compatible with provided weight shape ${l.shape}`);o.push([a,l])}yp(o)})}addWeight(t,e,o,n,s,i,a,l){if(this._addedWeightNames.indexOf(t)!==-1)throw new L(`Duplicate weight name ${t} for layer ${this.name}`);this._addedWeightNames.push(t),o==null&&(o="float32"),this.fastWeightInitDuringBuild&&(n=l!=null?l():jt("zeros"));let u=n.apply(e,o),c=new Um(u,o,t,i,a);return u.dispose(),s!=null&&this.addLoss(()=>s.apply(c.read())),i==null&&(i=!0),i?this._trainableWeights.push(c):this._nonTrainableWeights.push(c),c}setFastWeightInitDuringBuild(t){this.fastWeightInitDuringBuild=t}addLoss(t){t==null||Array.isArray(t)&&t.length===0||(t=Yt(t),this._losses!==void 0&&this._losses!==null&&this.losses.push(...t))}computeOutputShape(t){return t}computeMask(t,e){if(!this.supportsMasking){if(e!=null)if(Array.isArray(e))e.forEach(o=>{if(o!=null)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)});else throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);return null}return e}addInboundNode(t,e,o,n,s,i,a=null){let l=Yt(t);e=Yt(e),o=Yt(o),n=Yt(n),s=gp(s),i=gp(i);let u=[],c=[],p=[];for(let m of l)u.push(m.sourceLayer),c.push(m.nodeIndex),p.push(m.tensorIndex);new ti({outboundLayer:this,inboundLayers:u,nodeIndices:c,tensorIndices:p,inputTensors:l,outputTensors:e,inputMasks:o,outputMasks:n,inputShapes:s,outputShapes:i},a);for(let m=0;m<e.length;m++)e[m].sourceLayer=this,e[m].nodeIndex=this.inboundNodes.length-1,e[m].tensorIndex=m}getConfig(){let t={name:this.name,trainable:this.trainable};return this.batchInputShape!=null&&(t.batchInputShape=this.batchInputShape),this.dtype!=null&&(t.dtype=this.dtype),t}disposeWeights(){return this.weights.forEach(t=>t.dispose()),this.weights.length}assertNotDisposed(){if(this._refCount===0)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(this._refCount===null)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let t=0;return--this._refCount===0&&(t=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:t}}};function cU(r){r=Yt(r);let t=[];for(let e of r)t.push(e.shape);return Je(t)}function pU(r){return"float32"}function F0(r,t,e){if((t==null||e!=null&&e>0)&&(t=r.sourceLayer,e=r.nodeIndex),t.inboundNodes.length===0)return[r];{let o=t.inboundNodes[e];if(o.inboundLayers.length===0)return o.inputTensors;{let n=[];for(let s=0;s<o.inboundLayers.length;s++){let i=o.inputTensors[s],a=o.inboundLayers[s],l=o.nodeIndices[s],u=F0(i,a,l);for(let c of u)n.indexOf(c)===-1&&n.push(c)}return n}}}var Mn=class extends wt{constructor(t){if(super({dtype:t.dtype,name:t.name!=null?t.name:$a("input").toString()}),t.batchSize==null&&(t.batchSize=null),t.sparse==null&&(t.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=t.sparse,t.inputShape!=null&&t.batchInputShape!=null)throw new L("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let e=t.batchInputShape;if(e==null){if(t.inputShape==null)throw new L("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");e=[t.batchSize].concat(t.inputShape)}else if(t.batchSize!=null)throw new L("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");let o=t.dtype||"float32";this.batchInputShape=e,this.dtype=o,this.inputSpec=[{shape:e}];let n=new Tr(this.dtype,this.batchInputShape,this,[],{},this.name);n.nodeIndex=0,n.tensorIndex=0,new ti({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[n],outputTensors:[n],inputMasks:[null],outputMasks:[null],inputShapes:[e],outputShapes:[e]})}apply(t,e){throw new L(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}};Mn.className="InputLayer";K.registerClass(Mn);function _0(r){if(r.batchShape==null&&r.shape==null)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(r.batchShape!=null&&r.shape!=null)throw new L("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=r.batchShape;r.shape!=null&&t==null&&(t=[null].concat(r.shape));let e=r.dtype;return e==null&&(e="float32"),new Mn({batchInputShape:t,name:r.name,dtype:e,sparse:r.sparse}).inboundNodes[0].outputTensors[0]}function mU(r,t){if(r.dtype==null||r.dtype===t.dtype)return t;try{return X(t,r.dtype)}catch{throw new L(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${r.name}' (${r.dtype}).`)}}var Bo=class{constructor(t){if(this.id2Value={},this.id2Mask={},this.name2Id={},t instanceof Bo)for(let e in t.id2Value)this.id2Value[e]=t.id2Value[e],e in t.id2Mask&&(this.id2Mask[e]=t.id2Mask[e]);else{if(t==null)return;for(let e of t)this.add(e.key,e.value)}}add(t,e,o){if(this.id2Value[t.id]==null)this.id2Value[t.id]=mU(t,e),this.name2Id[t.name]=t.id,o!=null&&(this.id2Mask[t.id]=o);else throw new L(`Duplicate key: name=${t.name}, id=${t.id}`);return this}addFeed(t){this.add(t.key,t.value)}hasKey(t){return this.id2Value[t.id]!=null}names(){return Object.keys(this.name2Id)}getValue(t){if(t instanceof Tr){if(this.id2Value[t.id]==null)throw new L(`Nonexistent key: ${t.name}`);return this.id2Value[t.id]}else{let e=this.name2Id[t];if(e==null)throw new L(`Feed dict has no SymbolicTensor name: ${t}`);return this.id2Value[e]}}getMask(t){if(t instanceof Tr){if(this.id2Value[t.id]==null)throw new L(`Nonexistent key: ${t.name}`);return this.id2Mask[t.id]}else{let e=this.name2Id[t];if(e==null)throw new L(`Feed dict has no SymbolicTensor name: ${t}`);return this.id2Mask[e]}}disposeMasks(){this.id2Mask!=null&&xt(this.id2Mask)}},_g=new Fm,Og=new Fm;function Uk(r){_g?.setMaxEntries(r),Og?.setMaxEntries(r)}function Pl(r,t,e,o){let n=e==null?!1:e.training,s=Array.isArray(r),i=s?r:[r],a=i.map(h=>h.name),l=[],u=t.names();for(let h of a)u.indexOf(h)!==-1?l.push(t.getValue(h)):l.push(null);o!=null&&(o.maxNumTensors=-1/0,o.minNumTensors=1/0);let c=a.join(",")+"|"+t.names().sort().join(","),p=_g.get(c),m;if(p==null){let h=fU(i,t);p=h.sorted,m=h.recipientCounts,_g.put(c,p),Og.put(c,m)}m={},n||Object.assign(m,Og.get(c));let f=new Bo(t);for(let h=0;h<p.length;++h){if(o!=null){let O=xl().numTensors;O>o.maxNumTensors&&(o.maxNumTensors=O),O<o.minNumTensors&&(o.minNumTensors=O)}let g=p[h],d=g.sourceLayer;if(d instanceof Mn)continue;let x=[],b=[],S=[],w=!1;for(let O of g.inputs){let P=f.getValue(O),B=f.getMask(O);x.push(P),b.push(B),B!=null&&(w=!0),n||(m[O.name]--,m[O.name]===0&&!t.hasKey(O)&&a.indexOf(O.name)===-1&&!P.isDisposed&&O.sourceLayer.stateful!==!0&&S.push(P))}w&&(e=e||{},e.mask=b[0]);let T=Yt(d.apply(x,e)),$=null;d.supportsMasking&&($=d.computeMask(x,b));let R=dU(g),F=Array.isArray(R)?R:[R];for(let O=0;O<F.length;++O){f.hasKey(F[O])||f.add(F[O],T[O],Array.isArray($)?$[0]:$);let P=a.indexOf(F[O].name);P!==-1&&(l[P]=T[O])}n||xt(S)}return f.disposeMasks(),s?l:l[0]}function fU(r,t){y.assert(r!=null&&r.length>0,()=>"Expected at least one fetch, got none");let e=[],o={};if(r.length===1){let n=Wk(r[0],t);e=n.sorted,o=n.recipientMap}else{let n=new Set;for(let s of r){let{sorted:i,recipientMap:a}=Wk(s,t);for(let l of i)n.has(l.name)||(e.push(l),n.add(l.name));for(let l in a)o[l]==null&&(o[l]=new Set),a[l].forEach(u=>o[l].add(u))}}return{sorted:e,recipientCounts:hU(o)}}function hU(r){let t={};for(let e in r)t[e]=r[e].size;return t}function Wk(r,t){let e=new Set,o=[],n={};for(let a of t.names())e.add(a);let s=[],i=[];for(s.push(r);s.length>0;){let a=s[s.length-1];if(e.has(a.name)){s.pop();continue}let l=i[i.length-1]===s.length-1;if(a.inputs.length===0||l)s.pop(),o.push(a),e.add(a.name),l&&i.pop();else{i.push(s.length-1);for(let u of a.inputs)n[u.name]==null&&(n[u.name]=new Set),n[u.name].add(a.name),!e.has(u.name)&&s.push(u)}}return{sorted:o,recipientMap:n}}function dU(r){let t;if(r.sourceLayer.inboundNodes.length===1)t=r.sourceLayer.output;else{let e=null;for(let o=0;o<r.sourceLayer.inboundNodes.length;++o)for(let n of r.sourceLayer.inboundNodes[o].outputTensors)if(n.id===r.id){e=o;break}t=r.sourceLayer.getOutputAt(e)}return t}var gU=z();gU.registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES",()=>100,Uk);function O0(r,t){return M(()=>re(nt(A(r,r),t,!0)))}var zl=class extends K.Serializable{getConfig(){return{}}},Km=class extends zl{constructor(t){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=t.maxValue!=null?t.maxValue:this.defaultMaxValue,this.axis=t.axis!=null?t.axis:this.defaultAxis}apply(t){return M(()=>{let e=O0(t,this.axis),o=je(e,0,this.maxValue);return A(t,ot(o,U(Pe(),e)))})}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}};Km.className="MaxNorm";K.registerClass(Km);var qm=class extends zl{constructor(t){super(),this.defaultAxis=0,this.axis=t.axis!=null?t.axis:this.defaultAxis}apply(t){return M(()=>ot(t,U(Pe(),O0(t,this.axis))))}getConfig(){return{axis:this.axis}}};qm.className="UnitNorm";K.registerClass(qm);var jm=class extends zl{apply(t){return ir(t)}};jm.className="NonNeg";K.registerClass(jm);var Xm=class extends zl{constructor(t){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=t.minValue!=null?t.minValue:this.defaultMinValue,this.maxValue=t.maxValue!=null?t.maxValue:this.defaultMaxValue,this.rate=t.rate!=null?t.rate:this.defaultRate,this.axis=t.axis!=null?t.axis:this.defaultAxis}apply(t){return M(()=>{let e=O0(t,this.axis),o=U(A(this.rate,je(e,this.minValue,this.maxValue)),A(1-this.rate,e));return A(t,ot(o,U(Pe(),e)))})}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}};Xm.className="MinMaxNorm";K.registerClass(Xm);var Hk={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function xe(r){return ip(r)}function Kk(r,t={}){return Pn(r,K.SerializationMap.getMap().classNameMap,t,"constraint")}function ye(r){if(r==null)return null;if(typeof r=="string"){let e={className:r in Hk?Hk[r]:r,config:{}};return Kk(e)}else return r instanceof zl?r:Kk(r)}async function ei(r){if(r==null)return;let t=[],e=[],o=[];for(let n in r){let s=r[n];if(typeof s!="number"){let i=s;t.push(i.data()),e.push(n),o.push(i)}}if(t.length>0){let n=await Promise.all(t);for(let s=0;s<n.length;++s)r[e[s]]=n[s][0];xt(o)}}function Lg(r){if(r!=null)for(let t in r){let e=r[t];typeof e!="number"&&e.dispose()}}var qk;(function(r){r[r.SILENT=0]="SILENT",r[r.VERBOSE=1]="VERBOSE"})(qk||(qk={}));var bU=125,Da=class{constructor(){this.validationData=null}setParams(t){this.params=t}async onEpochBegin(t,e){}async onEpochEnd(t,e){}async onBatchBegin(t,e){}async onBatchEnd(t,e){}async onTrainBegin(t){}async onTrainEnd(t){}setModel(t){}},Pg=class{constructor(t,e=10){t==null&&(t=[]),this.callbacks=t,this.queueLength=e}append(t){this.callbacks.push(t)}setParams(t){for(let e of this.callbacks)e.setParams(t)}setModel(t){for(let e of this.callbacks)e.setModel(t)}async onEpochBegin(t,e){e==null&&(e={});for(let o of this.callbacks)await o.onEpochBegin(t,e)}async onEpochEnd(t,e){e==null&&(e={});for(let o of this.callbacks)await o.onEpochEnd(t,e)}async onBatchBegin(t,e){e==null&&(e={});for(let o of this.callbacks)await o.onBatchBegin(t,e)}async onBatchEnd(t,e){e==null&&(e={});for(let o of this.callbacks)await o.onBatchEnd(t,e)}async onTrainBegin(t){t==null&&(t={});for(let e of this.callbacks)await e.onTrainBegin(t)}async onTrainEnd(t){t==null&&(t={});for(let e of this.callbacks)await e.onTrainEnd(t)}},L0=class extends Da{constructor(){super()}async onEpochBegin(t){this.seen=0,this.totals={}}async onBatchEnd(t,e){e==null&&(e={});let o=e.size==null?0:e.size;this.seen+=o;for(let n in e){let s=e[n];if(typeof s=="number")this.totals.hasOwnProperty(n)||(this.totals[n]=0),this.totals[n]=this.totals[n]+s*o;else{let i;n in this.totals?i=this.totals[n]:this.totals[n]=0;let a=M(()=>U(this.totals[n],A(s,o)));this.totals[n]=a,i?.dispose()}}}async onEpochEnd(t,e){if(e!=null)for(let o of this.params.metrics)this.totals[o]!=null&&(typeof this.totals[o]=="number"?e[o]=this.totals[o]/this.seen:M(()=>{let n=A(ot(1,this.seen),this.totals[o]);e[o]=n,this.totals[o].dispose(),ue(e[o])}))}},zg=class extends Da{async onTrainBegin(t){this.epoch=[],this.history={}}async onEpochEnd(t,e){e==null&&(e={}),this.epoch.push(t);for(let o in e)this.history[o]==null&&(this.history[o]=[]),this.history[o].push(e[o])}async syncData(){let t=[],e=[],o=[];for(let s in this.history){let i=this.history[s];for(let a=0;a<i.length;++a)if(typeof i[a]!="number"){let l=i[a];t.push(l.data()),e.push(s),o.push(a)}}let n=await Promise.all(t);for(let s=0;s<n.length;++s)this.history[e[s]][o[s]].dispose(),this.history[e[s]][o[s]]=n[s][0]}},Mg=class extends Da{constructor(t,e){if(super(),this.currentEpoch=0,this.nowFunc=t.nowFunc,this.nextFrameFunc=t.nextFrameFunc||Rm,this.yieldEvery=e||"auto",this.yieldEvery==="auto"&&(this.yieldEvery=bU),this.yieldEvery==="never"&&t.onYield!=null)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");y.isNumber(this.yieldEvery)&&(this.maybeWait=Ck(this.maybeWait.bind(this),this.yieldEvery,this.nowFunc)),this.trainBegin=t.onTrainBegin,this.trainEnd=t.onTrainEnd,this.epochBegin=t.onEpochBegin,this.epochEnd=t.onEpochEnd,this.batchBegin=t.onBatchBegin,this.batchEnd=t.onBatchEnd,this.yield=t.onYield}async maybeWait(t,e,o){let n=[];this.yield!=null&&(await ei(o),n.push(this.yield(t,e,o))),n.push(this.nextFrameFunc()),await Promise.all(n)}async onEpochBegin(t,e){this.currentEpoch=t,this.epochBegin!=null&&(await ei(e),await this.epochBegin(t,e))}async onEpochEnd(t,e){let o=[];this.epochEnd!=null&&(await ei(e),o.push(this.epochEnd(t,e))),this.yieldEvery==="epoch"&&o.push(this.nextFrameFunc()),await Promise.all(o)}async onBatchBegin(t,e){this.batchBegin!=null&&(await ei(e),await this.batchBegin(t,e))}async onBatchEnd(t,e){let o=[];this.batchEnd!=null&&(await ei(e),o.push(this.batchEnd(t,e))),this.yieldEvery==="batch"?o.push(this.nextFrameFunc()):y.isNumber(this.yieldEvery)&&o.push(this.maybeWait(this.currentEpoch,t,e)),await Promise.all(o)}async onTrainBegin(t){this.trainBegin!=null&&(await ei(t),await this.trainBegin(t))}async onTrainEnd(t){this.trainEnd!=null&&(await ei(t),await this.trainEnd(t))}};function Bg(r,t){return r==null&&(r={}),r instanceof Da?[r]:Array.isArray(r)&&r[0]instanceof Da?r:Yt(r).map(o=>new Mg(o,t))}var jr=class{constructor(){}static registerCallbackConstructor(t,e){y.assert(t>=0&&Number.isInteger(t),()=>`Verbosity level is expected to be an integer >= 0, but got ${t}`),jr.checkForDuplicate(e),jr.constructors[t]==null&&(jr.constructors[t]=[]),jr.constructors[t].push(e)}static checkForDuplicate(t){for(let e in jr.constructors)jr.constructors[+e].forEach(n=>{if(n===t)throw new L("Duplicate callback constructor.")})}static clear(){jr.constructors={}}static createCallbacks(t){let e=[];for(let o in jr.constructors){let n=+o;t>=n&&e.push(...jr.constructors[n])}return e.map(o=>new o)}};jr.constructors={};function Vg(r,t,e,o,n,s,i,a,l){let u=new zg,c=[new L0,...jr.createCallbacks(t)];r!=null&&c.push(...r),c.push(u);let p=new Pg(c);return p.setParams({epochs:e,initialEpoch:o,samples:n,steps:s,batchSize:i,verbose:t,doValidation:a,metrics:l}),{callbackList:p,history:u}}function lo(r,t={},e=!1){return Pn(r,K.SerializationMap.getMap().classNameMap,t,"layer",e)}function Ym(r,t){return M(()=>{r.dtype!=="float32"&&(r=X(r,"float32"));let e=nt(Ol(r),t,!0),o=Ao(e.shape,Pe()),n=re(Kr(e,o));return ot(r,n)})}function Ml(r,t){return M(()=>oe(Ol(tt(t,r)),-1))}function Jm(r,t){return M(()=>oe(ae(tt(t,r)),-1))}function Qm(r,t){return M(()=>{let e=tt(r,t),o=je(ae(r),Pe(),Number.MAX_VALUE),n=ae(ot(e,o));return A(100,oe(n,-1))})}function wU(r,t){return M(()=>{let e=je(t,Pe(),Number.MAX_VALUE),o=Ye(U(1,e)),n=je(r,Pe(),Number.MAX_VALUE),s=Ye(U(1,n));return oe(Ol(tt(o,s)),-1)})}function CU(r,t){return M(()=>{let e=Kr(0,tt(1,A(r,t)));return oe(Ol(e),-1)})}function SU(r,t){return M(()=>{let e=Kr(0,tt(1,A(r,t)));return oe(e,-1)})}function NU(r,t){return M(()=>{let e=nt(A(r,t),-1),o=Xe(A(tt(1,r),t),-1);return Kr(0,U(1,tt(o,e)))})}function vU(r,t){return M(()=>{let e=Math.log(2),o=tt(t,r),n=tt(U(o,Qo(A(-2,o))),e);return oe(n,-1)})}function Bl(r,t,e=!1){return M(()=>{if(e)t=va(t);else{let o=nt(t,t.shape.length-1,!0);t=ot(t,o)}return t=je(t,Pe(),1-Pe()),Ft(nt(A(X(r,"float32"),Ye(t)),t.shape.length-1))})}function bp(r,t,e=!1){return M(()=>{let o=X(Rn(Rk(r)),"int32");t=je(t,Pe(),1-Pe());let n=t.shape,s=D(Nl(o,n[n.length-1]),n);return Bl(s,t,e)})}function TU(r,t){if(!y.arraysEqual(r.shape,t.shape))throw new L(`logits and labels must have the same shape, but got shapes ${JSON.stringify(r.shape)} and ${JSON.stringify(t.shape)}`);return M(()=>{let e=ir(t),o=Ft(ae(t));return U(tt(e,A(t,r)),ba(Fe(o)))})}function wp(r,t){return M(()=>{let e;return e=je(t,Pe(),1-Pe()),e=Ye(ot(e,tt(1,e))),oe(TU(r,e),-1)})}function IU(r,t){return M(()=>{let e=je(r,Pe(),1),o=je(t,Pe(),1);return nt(A(r,Ye(ot(e,o))),-1)})}function kU(r,t){return M(()=>{let e=Ye(U(Pe(),t));return oe(tt(t,A(r,e)),-1)})}function Gg(r,t){return M(()=>{let e=Ym(r,-1),o=Ym(t,-1),n=A(e,o);return Ft(nt(n,-1))})}var Zm={meanSquaredError:Ml,meanAbsoluteError:Jm,meanAbsolutePercentageError:Qm,meanSquaredLogarithmicError:wU,squaredHinge:CU,hinge:SU,categoricalHinge:NU,logcosh:vU,categoricalCrossentropy:Bl,sparseCategoricalCrossentropy:bp,binaryCrossentropy:wp,kullbackLeiblerDivergence:IU,poisson:kU,cosineProximity:Gg};function Wg(r){if(typeof r=="string"){if(r in Zm)return Zm[r];let t=`Unknown loss ${r}`;throw r.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${r}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new L(t)}else return r}function Hg(r,t){return M(()=>{let e=A(.5,Ke(t)),o=Nr(ge(t,e),r.dtype);return oe(Sr(r,o),-1)})}function Kg(r,t){return M(()=>Nr(Sr(Tn(r,-1),Tn(t,-1)),"float32"))}function EU(r,t){return M(()=>X(nt(mr(Sr(r,1),Sr(t,1))),"float32"))}function $U(r,t){return M(()=>X(nt(mr(Sr(r,0),Sr(t,1))),"float32"))}function Xk(r,t){return M(()=>{let e=EU(r,t),o=$U(r,t),n=U(e,o);return X(ee(ge(n,0),ot(e,n),0),"float32")})}function P0(r,t){return wp(r,t)}function z0(r,t){return r.rank===t.rank&&(r=ao(r,[r.rank-1])),t=Tn(t,-1),t.dtype!==r.dtype&&(t=X(t,r.dtype)),X(Sr(r,t),"float32")}var AU=Ml,DU=Ml,RU=Jm,FU=Jm,_U=Qm,OU=Qm,qg=Bl,LU=Gg,M0=bp,Ug={binaryAccuracy:Hg,categoricalAccuracy:Kg,precision:Xk,categoricalCrossentropy:qg,sparseCategoricalCrossentropy:M0,mse:AU,MSE:DU,mae:RU,MAE:FU,mape:_U,MAPE:OU,cosine:LU};function Yk(r){if(typeof r=="string"&&r in Ug)return Ug[r];if(typeof r!="string"&&r!=null)return r;throw new L(`Unknown metric ${r}`)}function tf(r){if(Co(r!==null,`Unknown LossOrMetricFn ${r}`),typeof r=="string")return r;{let t;for(let e of Object.keys(Zm))if(Zm[e]===r){t=e;break}if(t!==void 0)return t;for(let e of Object.keys(Ug))if(Ug[e]===r){t=e;break}return t!==void 0?t:r.name}}function Jk(r){let t={Adagrad:()=>Fl.adagrad(.01),Adadelta:()=>Fl.adadelta(1,.95,Pe()),Adam:()=>Fl.adam(.001,.9,.999,Pe()),Adamax:()=>Fl.adamax(.002,.9,.999,Pe(),0),RMSProp:()=>Fl.rmsprop(.001,.9,0,Pe()),SGD:()=>Fl.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,r in t)return t[r]();throw new L(`Unknown Optimizer ${r}`)}function V0(r,t,e=!1){if(r==null||typeof r!="object"||Object.getPrototypeOf(r)!==Object.prototype||!B0(r))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(e){let o=JSON.stringify(r);o.length>1048576&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${o.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function B0(r){if(r===null)return!0;if(typeof r=="object")if(Object.getPrototypeOf(r)===Object.prototype){let t=Object.keys(r);for(let e of t)if(typeof e!="string"||!B0(r[e]))return!1;return!0}else if(Array.isArray(r)){for(let t of r)if(!B0(t))return!1;return!0}else return!1;else{let t=typeof r;return t==="string"||t==="number"||t==="boolean"}}function Qk(r,t,e,o=console.log){let n=MU(r),s=["Layer (type)","Input Shape","Output shape","Param #"];n?(t=t||90,e=e||[.32,.61,.89,1]):(t=t||115,e=e||[.24,.48,.7,.8,1]),e[e.length-1]<=1&&(e=e.map(c=>Math.floor(t*c)));let i;if(!n){s.push("Receives inputs"),i=[];for(let c in r.nodesByDepth)i.push(...r.nodesByDepth[c])}o("_".repeat(t)),jg(s,e,o),o("=".repeat(t));let a=r.layers;for(let c=0;c<a.length;++c)n?BU(a[c],e,o):VU(a[c],e,i,o),o((c===a.length-1?"=":"_").repeat(t));r.checkTrainableWeightsConsistency();let l=zU(r),u=xp(r.nonTrainableWeights);o(`Total params: ${l+u}`),o(`Trainable params: ${l}`),o(`Non-trainable params: ${u}`),o("_".repeat(t))}function zU(r){let t;return r.collectedTrainableWeights!=null?t=xp(r.collectedTrainableWeights):t=xp(r.trainableWeights),t}function MU(r){let t=!0,e=[],o=[];for(let n in r.nodesByDepth)e.push(r.nodesByDepth[n]);for(let n of e){if(n.length>1||n.length===1&&n[0].inboundLayers.length>1){t=!1;break}o.push(...n)}if(t)for(let n of r.layers){let s=!1;for(let i of n.inboundNodes)if(o.indexOf(i)!==-1)if(s){t=!1;break}else s=!0;if(!t)break}return t}function jg(r,t,e=console.log){let o="";for(let n=0;n<r.length;++n)n>0&&(o=o.slice(0,o.length-1)+" "),o+=r[n],o=o.slice(0,t[n]),o+=" ".repeat(t[n]-o.length);e(o)}function BU(r,t,e){let o,n;try{n=r.inboundNodes.map(l=>JSON.stringify(l.inputShapes)).join(",")}catch{n="multiple"}try{o=JSON.stringify(r.outputShape)}catch{o="multiple"}let s=r.name,i=r.getClassName(),a=[`${s} (${i})`,n,o,r.countParams().toString()];jg(a,t,e)}function VU(r,t,e,o){let n,s;try{s=r.inboundNodes.map(p=>JSON.stringify(p.inputShapes)).join(",")}catch{s="multiple"}try{n=JSON.stringify(r.outputShape)}catch{n="multiple"}let i=[];for(let p of r.inboundNodes)if(!(e!=null&&e.length>0&&e.indexOf(p)===-1))for(let m=0;m<p.inboundLayers.length;++m){let f=p.inboundLayers[m].name,h=p.nodeIndices[m],g=p.tensorIndices[m];i.push(`${f}[${h}][${g}]`)}let a=r.name,l=r.getClassName(),u=i.length===0?"":i[0],c=[`${a} (${l})`,s,n,r.countParams().toString(),u];jg(c,t,o);for(let p=1;p<i.length;++p)jg(["","","","",i[p]],t,o)}function tE(r,t,e){return(r==="inboundNodes"||r==="outputLayers"||r==="inputLayers")&&t===0&&typeof e=="string"}function ef(r,t){if(r===null)return null;if(typeof r=="string")return Zs(r);if(typeof r=="number"||typeof r=="boolean")return r;if(r instanceof Array){let e=[],o=r.length;for(let n=0;n<o;++n){let s=r[n];tE(t,n,s)?e.push(s):e.push(ef(s,t))}return e}else{let e={};for(let o of Object.keys(r)){let n=r[o];if(o==="name"&&typeof n=="string")e[o]=n;else{let s=Zs(o);e[s]=ef(n,s)}}return e}}function Xg(r,t){if(r==null)return null;if(typeof r=="string")return Lo(r);if(typeof r=="number"||typeof r=="boolean")return r;if(r instanceof Array){let e=[],o=r.length;for(let n=0;n<o;++n){let s=r[n];tE(t,n,s)?e.push(s):e.push(Xg(s,t))}return e}else{let e={};for(let o of Object.keys(r)){let n=r[o],s=Lo(o);(o==="name"||o==="className")&&typeof n=="string"?e[s]=n:e[s]=Xg(n,o)}return e}}var Cp="4.5.0";var uo=class extends wt{constructor(t){if(super({}),this.containerNodes=new Set,this.name=t.name,this.name==null){let b=this.getClassName().toLowerCase();this.name=$a(b)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(t.inputs)?this.inputs=t.inputs.slice():this.inputs=[t.inputs],Array.isArray(t.outputs)?this.outputs=t.outputs.slice():this.outputs=[t.outputs],Po(this.inputs).length!==this.inputs.length)throw new L(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map(b=>b.name)}`);Po(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map(b=>b.name)}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(let b of this.outputs){let S=b.sourceLayer,w=b.nodeIndex,T=b.tensorIndex;this.outputLayers.push(S),this.outputLayersNodeIndices.push(w),this.outputLayersTensorIndices.push(T)}for(let b of this.inputs){let S=b.sourceLayer,w=b.nodeIndex,T=b.tensorIndex;Co(w===0,"input layer has >1 nodes"),Co(T===0,"input layer has >1 tensors"),this.inputLayers.push(S),this.inputLayersNodeIndices.push(w),this.inputLayersTensorIndices.push(T)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let b=0;b<this.inputLayers.length;b++){let S=this.inputLayers[b];if(!(S instanceof Mn))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${t.inputs}. Input ${b} (0-based) originates from layer type ${S.getClassName()}.`);this.inputNames.push(S.name),this.feedInputShapes.push(S.batchInputShape),this.feedInputNames.push(S.name)}for(let b of this.outputLayers)this.outputNames.push(b.name);this.internalInputShapes=this.inputs.map(b=>b.shape),this.internalOutputShapes=this.outputs.map(b=>b.shape);let e={},o={},n={},s={},i={},a=[],l=(b,S,w,T,$,R)=>{(T==null||$==null||R==null)&&(T=b.sourceLayer,$=b.nodeIndex,R=b.tensorIndex);let F=T.inboundNodes[$];if(w.indexOf(F)!==-1)throw new xr(`The tensor ${b.name} at layer "${T.name}" is part of a cycle.`);if(S.indexOf(F)!==-1)return;this.containerNodes.add(uo.nodeKey(T,$)),T.id in i||(i[T.id]=Object.keys(i).length),w.indexOf(F)===-1&&w.push(F);let O=F.inboundLayers.length;for(let P=0;P<O;P++){let B=F.inputTensors[P],V=F.inboundLayers[P],G=F.nodeIndices[P],H=F.tensorIndices[P];l(B,S,w,V,G,H)}for(S.push(F);w.indexOf(F)>=0;)w.splice(w.indexOf(F),1);a.push(F)},u=[],c=[];for(let b of this.outputs)l(b,u,c);let p=a.slice().reverse();for(let b of p){o[b.id]=b,b.id in e||(e[b.id]=0);let S=e[b.id],w=n[b.outboundLayer.id]==null?0:n[b.outboundLayer.id];S=Math.max(S,w),n[b.outboundLayer.id]=S,s[b.outboundLayer.id]=b.outboundLayer,e[b.id]=S;for(let T=0;T<b.inboundLayers.length;T++){let $=b.inboundLayers[T],R=b.nodeIndices[T],F=$.inboundNodes[R],O=e[F.id]==null?0:e[F.id];e[F.id]=Math.max(S+1,O),o[F.id]=F}}let m={};for(let b in e){let S=e[b];S in m||(m[S]=[]),m[S].push(o[b])}let f={};for(let b in n){let S=n[b];S in f||(f[S]=[]),f[S].push(s[b])}let h=Object.keys(f).map(b=>parseInt(b,10)).sort(_m);this.layers=[];for(let b of h){let S=f[b];S.sort((w,T)=>{let $=i[w.id],R=i[T.id];return $<R?-1:$>R?1:0});for(let w of S)w instanceof uo&&this.internalContainerRefs.push(w),this.layers.push(w)}this.layersByDepth=f,h=Object.keys(m).map(b=>parseInt(b,10)).sort(_m);let g=this.inputs.slice(),d=[];for(let b of h)for(let S of m[b]){let w=S.outboundLayer;if(w!=null){for(let T of S.inputTensors)if(g.indexOf(T)===-1)throw new xr(`Graph disconnected: cannot obtain value for tensor ${T} at layer "${w.name}". The following previous layers were accessed without issue: ${d}`);for(let T of S.outputTensors)g.push(T);d.push(w.name)}}this.nodesByDepth=m;let x=this.layers.map(b=>b.name);for(let b of x){let S=x.filter(w=>w===b).length;if(S!==1)throw new xr(`The name "${b}" is used ${S} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(x))}this.outboundNodes=[],this.inboundNodes=[],new ti({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map(b=>null),outputMasks:this.outputs.map(b=>null),inputShapes:this.inputs.map(b=>b.shape),outputShapes:this.outputs.map(b=>b.shape)}),this.built=!0,this._refCount=1}assertNotDisposed(){if(this._refCount===0)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();let t={refCountAfterDispose:null,numDisposedVariables:0};if(--this._refCount===0){for(let e of this.layers)t.numDisposedVariables+=e.dispose().numDisposedVariables;for(let e of this.internalContainerRefs)t.numDisposedVariables+=e.dispose().numDisposedVariables}return t.refCountAfterDispose=this._refCount,t}get trainable(){return this.trainable_}set trainable(t){this.layers.forEach(e=>{e._trainableWeights.forEach(o=>o.trainable=t)}),this.trainable_=t}get trainableWeights(){if(this._trainableWeights.length>0)throw new L("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let t=[];for(let e of this.layers)t=t.concat(e.trainableWeights);return t}get nonTrainableWeights(){let t=[];for(let e of this.layers)t.push(...e.nonTrainableWeights);if(!this.trainable){let e=[];for(let o of this.layers)e.push(...o.trainableWeights);return e.concat(t)}return t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(t,e=!0){let o={},n=0;for(let i of this.layers)for(let a of i.weights){if(o[a.originalName]!=null)throw new L(`Duplicate weight name: ${a.originalName}`);o[a.originalName]=a,n++}let s=[];for(let i in t){let a=i;if(o[i]==null){let l=i.split("/");a=l.slice(0,-2).concat([l[l.length-1]]).join("/")}if(o[a]!=null)s.push([o[a],t[i]]);else if(e)throw new L(`Provided weight data has no target variable: ${i}`);delete o[a]}if(e){let i=[];for(let a in o)i.push(a);if(i.length>0)throw new L(`${i.length} of ${n} weights are not set: ${i}`)}yp(s)}updatedConfig(){let t=this.getConfig(),e={};return e.className=this.getClassName(),e.config=t,e.kerasVersion=`tfjs-layers ${Cp}`,e.backend="TensorFlow.js",e}toJSON(t,e=!0){let o=Xg(this.updatedConfig());return e?JSON.stringify(o):o}call(t,e){return M(()=>{t=Yt(t);let o=new Bo;for(let n=0;n<this.inputs.length;++n)o.add(this.inputs[n],t[n]);return Pl(this.outputs,o,e)})}computeMask(t,e){return M(()=>{t=Yt(t);let o;return e==null?o=Oo(null,t.length):o=Yt(e),this.runInternalGraph(t,o)[1]})}computeOutputShape(t){let e=gp(t);if(e.length!==this.inputLayers.length)throw new L(`Invalid inputShape argument ${t}: model has ${this.inputLayers.length} tensor inputs.`);let o={};for(let a=0;a<e.length;a++){let l=this.inputLayers[a],u=e[a],c=l.name+"_0_0";o[c]=u}let n=Object.keys(this.nodesByDepth).map(a=>parseInt(a,10)).sort(_m);if(n.length>1)for(let a of n){let l=this.nodesByDepth[a];for(let u of l){let c=u.outboundLayer;if(this.inputLayers.map(g=>g.id).indexOf(c.id)!==-1)continue;let p=[];for(let g=0;g<u.inboundLayers.length;g++){let d=u.inboundLayers[g],x=u.nodeIndices[g],b=u.tensorIndices[g],S=`${d.name}_${x}_${b}`,w=o[S];p.push(w)}let m=c.computeOutputShape(Je(p)),f=gp(m),h=c.inboundNodes.indexOf(u);for(let g=0;g<f.length;g++){let d=`${c.name}_${h}_${g}`;o[d]=f[g]}}}let s=[],i=[];for(let a=0;a<this.outputLayers.length;a++){let l=this.outputLayers[a],u=this.outputLayersNodeIndices[a],c=this.outputLayersTensorIndices[a],p=`${l.name}_${u}_${c}`;i.push(p)}for(let a=0;a<i.length;a++){let l=i[a];Co(l in o),s.push(o[l])}return Je(s)}runInternalGraph(t,e){e==null&&(e=Oo(null,t.length));let o={};for(let l=0;l<this.inputs.length;++l){let u=this.inputs[l],c=t[l],p=e[l];o[u.id]=[c,p]}let n=Object.keys(this.nodesByDepth).map(l=>parseInt(l,10)).sort(_m);for(let l of n){let u=this.nodesByDepth[l];for(let c of u){let p=c.outboundLayer,m=c.inputTensors,f=c.outputTensors,h=new Array;for(let g of m)g.id in o&&h.push(o[g.id]);if(h.length===m.length){let g={},d,x,b,S;if(c.callArgs!=null&&(g=c.callArgs),h.length===1){let[w,T]=h[0];g.mask==null&&(g.mask=T),b=Yt(p.call(w,g)),S=Yt(p.computeMask(w,T)),d=[w],x=[T]}else d=h.map(w=>w[0]),x=h.map(w=>w[1]),g.mask==null&&(g.mask=x),b=Yt(p.call(d,g)),S=Yt(p.computeMask(d,x));if(p.activityRegularizer)throw new yt("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let w=0;w<f.length;++w){let T=f[w],$=b[w],R=S[w];o[T.id]=[$,R]}}}}let s=[],i=[],a=[];for(let l of this.outputs){Co(l.id in o,`Could not compute output ${l.name} : ${l.id}`);let[u,c]=o[l.id];a.push(u.shape),s.push(u),i.push(c)}return[s,i,a]}buildNodeConversionMap(t){let e={},o;for(let n of this.layers){o=n instanceof uo?1:0;for(let s=0;s<n.inboundNodes.length;s++){let i=uo.nodeKey(n,s);this.containerNodes.has(i)&&(e[i]=o,o+=1)}}return e}getLayer(t,e){if(e!=null){if(this.layers.length<=e)throw new L(`Was asked to retrieve layer at index ${e}, but model only has ${this.layers.length} layer(s).`);return this.layers[e]}else if(t==null)throw new L("Provide either a layer name or layer index");for(let o of this.layers)if(o.name===t)return o;throw new L(`No such layer: ${t}`)}calculateLosses(){return M(()=>{let t=[];for(let e of this.layers)for(let o=0;o<e.inboundNodes.length;++o){let n=uo.nodeKey(e,o);this.containerNodes.has(n)&&t.push(...e.calculateLosses())}return t})}getConfig(){let t={name:this.name},e=this.buildNodeConversionMap(this.layers),o=[];for(let i of this.layers){let a=i.getClassName(),l=i.getConfig(),u=[];for(let p=0;p<i.inboundNodes.length;p++){let m=i.inboundNodes[p],f=uo.nodeKey(i,p),h={};if(this.containerNodes.has(f)){if(m.callArgs)try{JSON.stringify(m.callArgs),h=m.callArgs}catch{console.warn(`Layer ${i.name} was passed non-serializable keyword arguments: ${m.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),h={}}if(m.inboundLayers.length>0){let g=[];for(let d=0;d<m.inboundLayers.length;d++){let x=m.inboundLayers[d],b=m.nodeIndices[d],S=m.tensorIndices[d],w=uo.nodeKey(x,b),T=e[w];T==null&&(T=0),g.push([x.name,T,S,h])}u.push(g)}}}let c={};c.name=i.name,c.className=a,c.config=l,c.inboundNodes=u,o.push(c)}t.layers=o;let n=[];for(let i=0;i<this.inputLayers.length;i++){let a=this.inputLayers[i],l=this.inputLayersNodeIndices[i],u=uo.nodeKey(a,l);if(!this.containerNodes.has(u))continue;let c=e[u];c==null&&(c=0);let p=this.inputLayersTensorIndices[i];n.push([a.name,c,p])}t.inputLayers=n;let s=[];for(let i=0;i<this.outputLayers.length;i++){let a=this.outputLayers[i],l=this.outputLayersNodeIndices[i],u=uo.nodeKey(a,l);if(!this.containerNodes.has(u))continue;let c=e[u];c==null&&(c=0);let p=this.outputLayersTensorIndices[i];s.push([a.name,c,p])}return t.outputLayers=s,t}static fromConfig(t,e,o={},n=!1){let s={},i={};function a(d,x){d.name in i?i[d.name].push(x):i[d.name]=[x]}function l(d,x){let b=[],S;for(let w of x){let T=w[0],$=w[1],R=w[2];if(S=w[3]==null?{}:w[3],!(T in s)){a(d,x);return}let F=s[T];if(F.inboundNodes.length<=$){a(d,x);return}let O=F.inboundNodes[$];b.push(O.outputTensors[R])}b.length>0&&d.apply(Je(b),S)}function u(d){let x=d.name,b=lo(d,e.customObjects!=null?e.customObjects:{});b.setFastWeightInitDuringBuild(n),s[x]=b,d.inboundNodes.forEach(w=>{if(!(w instanceof Array))throw new L(`Corrupted configuration, expected array for nodeData: ${w}`);a(b,w)})}let c=e.name,p=e.layers;for(let d of p)u(d);for(;!bk(i);)for(let d of p){let x=s[d.name];if(x.name in i){let b=i[x.name];delete i[x.name];for(let S of b)l(x,S)}}let m=[],f=[],h=e.inputLayers;for(let d of h){let x=d[0],b=d[1],S=d[2];Co(x in s);let T=s[x].inboundNodes[b].outputTensors;m.push(T[S])}let g=e.outputLayers;for(let d of g){let x=d[0],b=d[1],S=d[2];Co(x in s);let T=s[x].inboundNodes[b].outputTensors;f.push(T[S])}return new t({inputs:m,outputs:f,name:c})}get stateful(){if(this._stateful)throw new L("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(let t of this.layers)if(t.stateful)return!0;return!1}resetStates(){M(()=>{this.layers.forEach(t=>{t.stateful&&t.resetStates()})})}};function GU(r,t,e){let o=t.length;if(r==null||Array.isArray(r)&&r.length===0)return t.map(n=>null);if(o===1)return Array.isArray(r)&&r.length===1?r:typeof r=="object"&&t[0]in r?[r[t[0]]]:[r];if(Array.isArray(r)){if(r.length!==o)throw new Error(`Provided ${e} is an array of ${r.length} element(s), but the model has ${o} outputs. Make sure a set of weights is provided for each model output.`);return r}else if(typeof r=="object"&&Object.keys(r).length>0&&typeof r[Object.keys(r)[0]]=="object"){let n=[];return t.forEach(s=>{s in r?n.push(r[s]):n.push(null)}),n}else throw new Error(`The model has multiple (${o}) outputs, so ${e} must be either an array with ${o} elements or an object with ${t} keys. Provided ${e} not understood: ${JSON.stringify(r)}`)}function Yg(r,t){return GU(r,t,"classWeight")}async function Zg(r,t,e,o){if(t!=null||o!=null)throw new Error("Support sampleWeight is not implemented yet");if(e!=null){let n=M(()=>{if(r.shape.length===1)return $r(r);if(r.shape.length===2){if(r.shape[1]>1)return Tn(r,1);if(r.shape[1]===1)return D(r,[r.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${r.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}else throw new Error(`Unexpected rank of target (y) tensor (${r.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)}),s=Array.from(await n.data());xt(n);let i=[];return s.forEach(a=>{if(e[a]==null)throw new Error(`classWeight must contain all classes in the training data. The class ${a} exists in the data but not in classWeight`);i.push(e[a])}),ke(i,"float32")}else return null}function eE(r,t){return A(r,t)}var WU=32;function nE(r,t){let e,o,n=t;e=n.xs,o=n.ys,y.assert(e!=null&&o!=null,()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`);let s=rE("input",r.inputNames,e),i=rE("output",r.outputNames,o),a=s[0].shape[0];y.assert(s.length===r.inputs.length,()=>`LayersModel has ${r.inputs.length} inputs, but the dataset provides ${s.length} inputs.  (Expected input keys: ${JSON.stringify(r.inputNames)})`),y.assert(i.length===r.outputs.length,()=>`LayersModel has ${r.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: ${JSON.stringify(r.outputNames)})`);for(let l=0;l<s.length;l++)y.assert(s[l].shape[0]===a,()=>`Batch size mismatch: input ${r.inputNames[l]} has ${s[l].shape[0]}; expected  ${a} based on input ${r.inputNames[0]}.`);for(let l=0;l<i.length;l++)y.assert(i[l].shape[0]===a,()=>`Batch size mismatch: output ${r.outputNames[l]} has ${i[l].shape[0]}; expected  ${a} based on input ${r.inputNames[0]}.`);return{xs:s,ys:i}}function rE(r,t,e){if(e instanceof At)return[e];if(Array.isArray(e))return y.assert(e.length===t.length,()=>`Received an array of ${e.length} Tensors, but expected ${t.length} to match the ${r} keys ${t}.`),e;{let o=[];for(let n of t){if(e[n]==null)throw new L(`The feature data generated by the dataset lacks the required ${r} key '${n}'.`);o.push(e[n])}return o}}function UU(r){if(r.length===3)throw new yt("Validation with sample weights is not implemented yet.");return{xs:r[0],ys:r[1]}}async function sE(r,t,e){let o=e.batchesPerEpoch!=null;if(y.assert(r.optimizer!=null,()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."),y.assert(e!=null,()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."),y.assert(e.epochs!=null&&e.epochs>0&&Number.isInteger(e.epochs),()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${e.epochs}`),y.assert(!o||e.batchesPerEpoch>0&&Number.isInteger(e.batchesPerEpoch),()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${e.batchesPerEpoch}`),y.assert(e.validationSplit==null,()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead."),r.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");r.isTraining=!0;try{let n=e.validationData!=null,s,i;if(n)if(oE(e.validationData))y.assert(e.validationBatches==null||e.validationBatches>0&&Number.isInteger(e.validationBatches),()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${e.validationBatches}`);else{let d=UU(e.validationData);s=d.xs,i=d.ys}let a=r.makeTrainFunction(),l=r.getDedupedMetricsNames(),u;n?u=l.slice().concat(l.map(d=>"val_"+d)):u=l.slice();let c=Bg(e.callbacks,e.yieldEvery),p=e.verbose==null?1:e.verbose,{callbackList:m,history:f}=Vg(c,p,e.epochs,null,null,HU(t,e),null,n,u);m.setModel(r),r.history=f,await m.onTrainBegin(),r.stopTraining_=!1;let h=e.initialEpoch==null?0:e.initialEpoch,g=await t.iterator();for(;h<e.epochs;){let d={};await m.onEpochBegin(h);let x=0,b=0;for(o||(g=await t.iterator());!o||x<e.batchesPerEpoch;){let S=await g.next();if(o&&S.done){console.warn(`You provided \`batchesPerEpoch\` as ${e.batchesPerEpoch}, but your dataset iterator ran out of data after ${x} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, ${e.batchesPerEpoch*e.epochs} batches). You may need to use the repeat() function when building your dataset.`);break}if(S.value!=null){let{xs:w,ys:T}=nE(r,S.value),$={};$.batch=b,$.size=w[0].shape[0],await m.onBatchBegin(b,$);let R=[];if(e.classWeight!=null){let P=Yg(e.classWeight,r.outputNames);for(let B=0;B<P.length;++B)R.push(await Zg(T[B],null,P[B]))}let F=w.concat(T).concat(R),O=a(F);xt(F);for(let P=0;P<l.length;++P){let B=l[P],V=O[P];$[B]=V,ue(V)}await m.onBatchEnd(b,$),Lg($),b++,x++}if(o?x>=e.batchesPerEpoch:S.done){if(n){let w;oE(e.validationData)?w=Yt(await r.evaluateDataset(e.validationData,{batches:e.validationBatches})):w=Yt(r.evaluate(s,i,{batchSize:e.validationBatchSize==null?WU:e.validationBatchSize,verbose:0}));for(let T=0;T<r.metricsNames.length;++T)d[`val_${r.metricsNames[T]}`]=w[T]}break}if(r.stopTraining_)break}if(await m.onEpochEnd(h,d),h++,r.stopTraining_)break}return await m.onTrainEnd(),await r.history.syncData(),r.history}finally{r.isTraining=!1}}function HU(r,t){let e=null;return t.batchesPerEpoch!=null?e=t.batchesPerEpoch:Number.isFinite(r.size)&&(e=r.size),e}function oE(r){return typeof r.iterator=="function"}function KU(r){return typeof r.next=="function"}async function iE(r,t,e){e=e||{};let o=e.batches!=null,n=r.testFunction,s=[];if(e.verbose>0)throw new yt("Verbose mode is not implemented yet.");y.assert(!o||e.batches>0&&Number.isInteger(e.batches),()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(e.batches)}`);let i=KU(t)?t:await t.iterator(),a=0,l=0;for(;!o||l<e.batches;){let u=await i.next();if(s=M(()=>{if(u.value){let{xs:c,ys:p}=nE(r,u.value),m=c.concat(p),f=M(()=>n(m));if(xt(m),l===0)for(let g=0;g<f.length;++g)s.push(st(0));let h=m[0].shape[0];for(let g=0;g<f.length;++g){let d=f[g],x=s[g];s[g]=M(()=>U(s[g],A(h,d))),l>0&&xt(x)}xt(f),a+=h,++l}return s}),u.done){o&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${e.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let u=0;u<s.length;++u){let c=s[u];s[u]=ot(s[u],a),xt(c)}return Je(s)}function Jg(r){y.assert(r>0&&Number.isInteger(r),()=>`batchSize is required to be a positive integer, but got ${r}`)}function Sp(r,t,e){return r==null?[null]:Array.isArray(r)?r.map(o=>Js(o,t,e-t)):Js(r,t,e-t)}function Qg(r,t){return M(()=>r==null?null:Array.isArray(r)?r.map(e=>Qg(e,t)):Dg(r,t.dtype==="int32"?t:X(t,"int32")))}function tx(r,t){let e=[],o=0,n=null;for(;o<r;)n=o+t,n>=r&&(n=r),e.push([o,n]),o=n;return e}function G0(r){let t=[];r instanceof At&&(r=[r]);for(let e=0;e<r.length;++e){let o=r[e];if(o.rank===1)t.push(Qs(o,1));else{if(o.rank===0)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(o)}}return t}function Vo(r,t){if(r==null)return;let e=[];if(t instanceof At)e.push(t.id);else if(Array.isArray(t))t.forEach(n=>e.push(n.id));else if(t!=null)for(let n in t){let s=t[n];e.push(s.id)}let o=[];if(r instanceof At)e.indexOf(r.id)===-1&&o.push(r);else if(Array.isArray(r))r.forEach(n=>{e.indexOf(n.id)===-1&&o.push(n)});else if(r!=null)for(let n in r){let s=r[n];e.indexOf(s.id)===-1&&o.push(s)}o.forEach(n=>{n.isDisposed||n.dispose()})}function qU(r){return r instanceof At}function W0(r){return Array.isArray(r)}function aE(r){return!qU(r)&&!W0(r)}function lE(r,t,e,o=!0,n=""){if(t==null||t.length===0){if(r!=null){let i=!1;if(W0(r)&&r.length>0)i=!0;else if(aE(r)){for(let a in r)if(r.hasOwnProperty(a)){i=!0;break}}else i=!0;if(i)throw new L(`Error when checking model ${n} expected no data, but got ${r}`)}return[]}if(r==null)return t.map(i=>null);let s;if(aE(r)){r=r,s=[];for(let i of t){if(r[i]==null)throw new L(`No data provided for "${i}". Need data for each key in: ${t}`);s.push(r[i])}}else if(W0(r)){if(r=r,r.length!==t.length)throw new L(`Error when checking model ${n}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${r}`);s=r}else{if(r=r,t.length>1)throw new L(`The model ${n} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${r.shape}`);s=[r]}if(s=G0(s),e!=null)for(let i=0;i<t.length;++i){if(e[i]==null)continue;let a=s[i];if(a.shape.length!==e[i].length)throw new L(`Error when checking ${n}: expected ${t[i]} to have ${e[i].length} dimension(s). but got array with shape ${a.shape}`);for(let l=0;l<e[i].length;++l){if(l===0&&!o)continue;let u=a.shape[l],c=e[i][l];if(c!=null&&c>=0&&u!==c)throw new L(`${n} expected a batch of elements where each example has shape [${e[i].slice(1,e[i].length)}] (i.e.,tensor shape [*,${e[i].slice(1,e[i].length)}]) but the ${n} received an input with ${a.shape[0]} examples, each with shape [${a.shape.slice(1,a.shape.length)}] (tensor shape [${a.shape}])`)}}return s}function jU(r,t,e){let o=Po(r.map(s=>s.shape[0]));o.sort();let n=Po(t.map(s=>s.shape[0]));if(n.sort(),o.length>1)throw new L(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(r.map(s=>s.shape))}`);if(n.length>1)throw new L(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map(s=>s.shape))}`);if(o.length>0&&n.length>0&&!y.arraysEqual(o,n))throw new L(`Input Tensors should have the same number of samples as target Tensors. Found ${o[0]} input sample(s) and ${n[0]} target sample(s).`)}function XU(r,t,e){let o=[Ml,wp,Bl];for(let n=0;n<r.length;++n){let s=r[n],i=t[n],a=e[n];if(i!=null){if(i===Bl&&s.shape[s.shape.length-1]===1)throw new L(`You are passing a target array of shape ${s.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(o.indexOf(i)!==-1){let l=s.shape.slice(1),u=a.slice(1);for(let c=0;c<l.length;++c){let p=l[c],m=u[c];if(m!=null&&p!==m)throw new L(`A target Tensor with shape ${s.shape} was passed for an output of shape ${a}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}function uE(r,t,e,o=!0,n=""){let s;if(Array.isArray(r)){if(r.length!==t.length)throw new L(`Error when checking model ${n}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${r.length} Tensors(s).`);s=r}else{if(t.length>1)throw new L(`The model expects ${t.length} ${n} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(r.shape)}.`);s=[r]}if(e!=null)for(let i=0;i<t.length;++i){if(e[i]==null)continue;let a=s[i];if(a.shape.length!==e[i].length)throw new L(`Error when checking ${n}: expected ${t[i]} to have ${e[i].length} dimension(s), but got array with shape ${JSON.stringify(a.shape)}`);for(let l=0;l<e[i].length;++l){if(l===0&&!o)continue;let u=a.shape[l],c=e[i][l];if(c!=null&&c!==u)throw new L(`Error when checking ${n}: expected ${t[i]} to have shape ${JSON.stringify(e[i])} but got array with shape ${JSON.stringify(a.shape)}.`)}}}function YU(r,t){if(r==null||Array.isArray(r)&&r.length===0)return t.map(o=>[]);let e;if(typeof r=="string"||typeof r=="function")e=[r];else if(Array.isArray(r)||typeof r=="object")e=r;else throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${r}`);if(Array.isArray(e))return t.map(o=>e);{let o=[];for(let n of t){let s=e.hasOwnProperty(n)?e[n]:[];Array.isArray(s)||(s=[s]),o.push(s)}return o}}var ZU="layers-model",Go=class extends uo{constructor(t){super(t),this.isTraining=!1}summary(t,e,o=console.log){if(!this.built)throw new L("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");Qk(this,t,e,o)}compile(t){if(t.loss==null&&(t.loss=[]),this.loss=t.loss,typeof t.optimizer=="string")this.optimizer_=Jk(t.optimizer),this.isOptimizerOwned=!0;else{if(!(t.optimizer instanceof dr))throw new L("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=t.optimizer,this.isOptimizerOwned=!1}let e=[];if(!Array.isArray(t.loss)&&typeof t.loss!="string"&&typeof t.loss!="function"){t.loss=t.loss;for(let i in t.loss)if(this.outputNames.indexOf(i)===-1)throw new L(`Unknown entry in loss dictionary: "${i}". Only expected the following keys: ${this.outputNames}`);for(let i of this.outputNames)t.loss[i]==null&&console.warn(`Output "${i}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${i} during training`),e.push(Wg(t.loss[i]))}else if(Array.isArray(t.loss)){if(t.loss.length!==this.outputs.length)throw new L(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${t.loss}.`);e=t.loss.map(a=>Wg(a))}else{let i=Wg(t.loss);this.outputs.forEach(a=>{e.push(i)})}this.lossFunctions=e,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let i=0;i<this.outputs.length;++i){let a=this.internalOutputShapes[i],l=this.outputNames[i];this.feedOutputNames.push(l),this.feedOutputShapes.push(a),this.feedLossFns.push(this.lossFunctions[i])}let o=[];this.metrics=t.metrics,this.metricsNames=["loss"],this.metricsTensors=[],on("loss",()=>{for(let i=0;i<this.outputs.length;++i){if(o.indexOf(i)!==-1)continue;let a=this.lossFunctions[i];this.outputs.length>1&&(this.metricsTensors.push([a,i]),this.metricsNames.push(this.outputNames[i]+"_loss"))}});let n=YU(t.metrics,this.outputNames),s=(i,a,l)=>{this.outputNames.length>1&&(a=this.outputNames[i]+"_"+a),this.metricsNames.push(a),this.metricsTensors.push([l,i])};on("metric",()=>{for(let i=0;i<this.outputs.length;++i){if(o.indexOf(i)!==-1)continue;let a=n[i];(u=>{let c="",p,m,f;for(let h of u){if(typeof h=="string"&&["accuracy","acc","crossentropy","ce"].indexOf(h)!==-1){let d=this.internalOutputShapes[i];d[d.length-1]===1||this.lossFunctions[i]===wp?["accuracy","acc"].indexOf(h)!==-1?m=Hg:["crossentropy","ce"].indexOf(h)!==-1&&(m=P0):this.lossFunctions[i]===bp?["accuracy","acc"].indexOf(h)!==-1?m=z0:["crossentropy","ce"].indexOf(h)!==-1&&(m=M0):["accuracy","acc"].indexOf(h)!==-1?m=Kg:["crossentropy","ce"].indexOf(h)!==-1&&(m=qg);let x;["accuracy","acc"].indexOf(h)!==-1?x="acc":["crossentropy","ce"].indexOf(h)!==-1&&(x="ce"),f=m,p=c+x}else f=Yk(h),p=c+tf(h);let g;on(p,()=>{g=f}),s(i,p,g)}})(a)}}),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){this.collectedTrainableWeights!=null&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(t,e,o={}){let n=o.batchSize==null?32:o.batchSize;Jg(n);let s=!0,i=this.standardizeUserDataXY(t,e,s,n);try{let a=i[0].concat(i[1]);this.makeTestFunction();let l=this.testFunction,u=this.testLoop(l,a,n,o.verbose,o.steps);return Je(u)}finally{Vo(i[0],t),Vo(i[1],e)}}async evaluateDataset(t,e){return this.makeTestFunction(),iE(this,t,e)}checkNumSamples(t,e,o,n="steps"){let s;if(o!=null){if(s=null,e!=null)throw new L(`If ${n} is set, batchSize must be null or undefined.Got batchSize = ${e}`)}else if(t!=null)Array.isArray(t)?s=t[0].shape[0]:s=t.shape[0];else throw new L(`Either the input data should have a defined shape, or ${n} shoud be specified.`);return s}execute(t,e){if(Array.isArray(e)&&e.length===0)throw new L("`outputs` is an empty Array, which is not allowed.");let o=Array.isArray(e),n=o?e:[e],s=this.retrieveSymbolicTensors(n),i=new Bo;if(t instanceof At&&(t=[t]),Array.isArray(t)){if(t.length!==this.inputs.length)throw new L(`The number of inputs provided (${t.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let l=0;l<this.inputs.length;++l)i.add(this.inputs[l],t[l])}else for(let l of this.inputs){let u=t[l.name];if(u==null)throw new L(`No value is provided for the model's input ${l.name}`);i.add(l,u)}let a=Pl(s,i);return o?a:a[0]}retrieveSymbolicTensors(t){let e=Oo(null,t.length),o=t.length;for(let n of this.layers){let s=Array.isArray(n.output)?n.output:[n.output],i=s.map(a=>a.name);for(let a=0;a<t.length;++a){let l=i.indexOf(t[a]);if(l!==-1&&(e[a]=s[l],o--),o===0)break}if(o===0)break}if(o>0){let n=[];throw e.forEach((s,i)=>{s==null&&n.push(t[i])}),new L(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(n)}`)}return e}predictLoop(t,e=32,o=!1){return M(()=>{let n=this.checkNumSamples(t);if(o)throw new yt("Verbose predictLoop() is not implemented yet.");let s=tx(n,e),i=this.outputs.map(a=>[]);for(let a=0;a<s.length;++a)M(()=>{let u=s[a][0],c=s[a][1],p=Sp(t,u,c),m=[];if(Array.isArray(p))for(let h=0;h<p.length;++h)m.push({key:this.inputs[h],value:p[h]});else m.push({key:this.inputs[0],value:p});let f=new Bo(m);return Pl(this.outputs,f)}).forEach((u,c)=>i[c].push(u));return Je(i.map(a=>Vt(a,0)))})}predict(t,e={}){let o=G0(t);uE(o,this.inputNames,this.feedInputShapes,!1);try{let n=e.batchSize==null?32:e.batchSize;return Jg(n),this.predictLoop(o,n)}finally{Vo(o,t)}}predictOnBatch(t){uE(t,this.inputNames,this.feedInputShapes,!0);let e=(Array.isArray(t)?t[0]:t).shape[0];return this.predictLoop(t,e)}standardizeUserDataXY(t,e,o=!0,n){if(this.optimizer_==null)throw new xr("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");let s=[];for(let i=0;i<this.feedOutputShapes.length;++i){let a=this.feedOutputShapes[i];this.feedLossFns[i]===bp?s.push(a.slice(0,a.length-1).concat([1])):s.push(a)}if(t=lE(t,this.feedInputNames,this.feedInputShapes,!1,"input"),e=lE(e,this.feedOutputNames,s,!1,"target"),jU(t,e,null),XU(e,this.feedLossFns,this.feedOutputShapes),this.stateful&&n!=null&&n>0&&t[0].shape[0]%n!==0)throw new L(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${n}. Found: ${t[0].shape[0]} sample(s).`);return[t,e]}async standardizeUserData(t,e,o,n,s=!0,i){let[a,l]=this.standardizeUserDataXY(t,e,s,i);if(o!=null)throw new Error("sample weight is not supported yet.");let u=null;if(n!=null){let c=Yg(n,this.outputNames);u=[];for(let p=0;p<c.length;++p)u.push(await Zg(l[p],null,c[p]))}return[a,l,u]}testLoop(t,e,o,n=0,s){return M(()=>{let i=this.checkNumSamples(e,o,s,"steps"),a=[];if(n>0)throw new yt("Verbose mode is not implemented yet.");if(s!=null)throw new yt("steps mode in testLoop() is not implemented yet");{let l=tx(i,o),u=ke(_r(0,i));for(let c=0;c<l.length;++c){let p=l[c][0],m=l[c][1],f=Js(u,p,m-p),h=Qg(e,f),g=t(h);if(c===0)for(let d=0;d<g.length;++d)a.push(st(0));for(let d=0;d<g.length;++d){let x=g[d];a[d]=U(a[d],A(m-p,x))}}for(let c=0;c<a.length;++c)a[c]=ot(a[c],i)}return a})}getDedupedMetricsNames(){let t=this.metricsNames,e=[];for(let o=0;o<t.length;++o){let n=t[o],s=n;if(k0(t,n)>1){let i=k0(t.slice(0,o),n);s+=`_${i}`}e.push(s)}return e}makeTrainFunction(){return t=>{let e=[],o=t.slice(0,this.inputs.length),n=t.slice(this.inputs.length,this.inputs.length+this.outputs.length),s=t.slice(this.inputs.length+this.outputs.length,this.inputs.length+this.outputs.length*2),i=[],a=()=>{let p=[];for(let g=0;g<this.inputs.length;++g)p.push({key:this.inputs[g],value:o[g]});let m=new Bo(p),f=Pl(this.outputs,m,{training:!0}),h;for(let g=0;g<this.lossFunctions.length;++g){let d=this.lossFunctions[g],x=d(n[g],f[g]);s[g]!=null&&(x=eE(x,s[g]));let b=oe(x);e.push(b),g===0?h=x:h=U(h,x)}for(let g=0;g<this.metricsTensors.length;++g){let d;if(this.outputs.length>1&&g<this.outputs.length)d=e[g];else{let x=this.metricsTensors[g][0],b=this.metricsTensors[g][1];d=oe(x(n[b],f[b]))}ue(d),i.push(d)}return h=oe(h),this.calculateLosses().forEach(g=>{h=U(h,g)}),h},l=this.collectedTrainableWeights.map(p=>p.read()),u=!0;return[this.optimizer_.minimize(a,u,l)].concat(i)}}makeTestFunction(){this.testFunction=t=>M(()=>{let e=[],o,n=t.slice(0,this.inputs.length),s=t.slice(this.inputs.length,this.inputs.length+this.outputs.length),i=[];for(let u=0;u<this.inputs.length;++u)i.push({key:this.inputs[u],value:n[u]});let a=new Bo(i),l=Pl(this.outputs,a);for(let u=0;u<this.lossFunctions.length;++u){let c=this.lossFunctions[u],p=oe(c(s[u],l[u]));u===0?o=p:o=U(o,p),e.push(o)}for(let u=0;u<this.metricsTensors.length;++u){let c=this.metricsTensors[u][0],p=this.metricsTensors[u][1],m=oe(c(s[p],l[p]));e.push(m)}return e})}async fit(t,e,o={}){if(this.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");this.isTraining=!0;let n,s,i,a,l,u,c,p,m;try{let f=o.batchSize==null?32:o.batchSize;Jg(f);let h=!1,g=await this.standardizeUserData(t,e,o.sampleWeight,o.classWeight,h,f);n=g[0],s=g[1],m=g[2];let d=!1,x;if(o.validationData!=null&&o.validationData.length>0){if(d=!0,o.validationData.length===2)l=o.validationData[0],u=o.validationData[1];else throw o.validationData.length===3?new yt("validationData including sample weights is not supported yet."):new L(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${o.validationData} is invalid.`);let O=!0,P=await this.standardizeUserData(l,u,null,null,O,f);c=P[0],p=P[1],x=c.concat(p)}else if(o.validationSplit!=null&&o.validationSplit>0&&o.validationSplit<1){d=!0;let O=Math.floor(n[0].shape[0]*(1-o.validationSplit)),P=n[0].shape[0];c=Sp(n,O,P),i=n,n=Sp(n,0,O),p=Sp(s,O,P),a=s,s=Sp(s,0,O),x=c.concat(p)}else o.validationSteps!=null&&(d=!0);let b=n.concat(s).concat(m);this.checkTrainableWeightsConsistency();let S=this.makeTrainFunction(),w=this.getDedupedMetricsNames(),T,$;d?(this.makeTestFunction(),T=this.testFunction,$=w.slice().concat(w.map(O=>"val_"+O))):(T=null,x=[],$=w.slice());let R=Bg(o.callbacks,o.yieldEvery);return await this.fitLoop(S,b,w,f,o.epochs,o.verbose,R,T,x,o.shuffle,$,o.initialEpoch,null,null)}finally{this.isTraining=!1,Vo(n,t),Vo(s,e),Vo(i,t),Vo(a,e),Vo(c,l),Vo(p,u),m!=null&&xt(m)}}async fitLoop(t,e,o,n,s,i,a,l,u,c,p,m,f,h){n==null&&(n=32),s==null&&(s=1),c==null&&(c=!0),m==null&&(m=0);let g=!1;if(l!=null&&u!=null&&(g=!0),h!=null&&(g=!0,f==null))throw new L("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");let d=this.checkNumSamples(e,n,f,"steps_per_epoch"),x;d!=null&&(x=_r(0,d)),i==null&&(i=1);let{callbackList:b,history:S}=Vg(a,i,s,m,d,f,n,g,p);b.setModel(this),this.history=S,await b.onTrainBegin(),this.stopTraining_=!1;for(let w=m;w<s;++w){await b.onEpochBegin(w);let T={};if(f!=null)throw new yt("stepsPerEpoch mode is not implemented yet.");{if(c==="batch")throw new yt("batch shuffling is not implemneted yet");c&&y.shuffle(x);let $=ke(x),R=tx(d,n);for(let F=0;F<R.length;++F){let O={};if(await b.onBatchBegin(F,O),M(()=>{let P=R[F][0],B=R[F][1],V=Js($,P,B-P);O.batch=F,O.size=B-P;let G=Qg(e,V),H=t(G);for(let W=0;W<o.length;++W){let j=o[W],Z=H[W];O[j]=Z,ue(Z)}if(F===R.length-1&&g){let W=this.testLoop(l,u,n);for(let j=0;j<o.length;++j){let Z=o[j],q=W[j];ue(q),T["val_"+Z]=q}}}),await b.onBatchEnd(F,O),Lg(O),this.stopTraining_)break}$.dispose()}if(await b.onEpochEnd(w,T),this.stopTraining_)break}return await b.onTrainEnd(),await this.history.syncData(),this.history}async fitDataset(t,e){return sE(this,t,e)}async trainOnBatch(t,e){let o=await this.standardizeUserData(t,e),n=o[0],s=o[1],a=this.makeTrainFunction()(n.concat(s)),l=[];for(let u of a){let c=await u.data();l.push(c[0])}return xt(a),Vo(o[0],t),Vo(o[1],e),Je(l)}getNamedWeights(t){let e=[],o=t!=null&&t.trainableOnly,n=o?this.trainableWeights:this.weights,s=this.getWeights(o);for(let i=0;i<n.length;++i)o&&!n[i].trainable||e.push({name:n[i].originalName,tensor:s[i]});return e}set stopTraining(t){this.stopTraining_=t}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(t){this.optimizer_!==t&&(this.optimizer_=t,this.isOptimizerOwned=!1)}dispose(){let t=super.dispose();if(t.refCountAfterDispose===0&&this.optimizer!=null&&this.isOptimizerOwned){let e=xl().numTensors;this.optimizer_.dispose(),t.numDisposedVariables+=e-xl().numTensors}return t}getLossIdentifiers(){let t;if(typeof this.loss=="string")t=Lo(this.loss);else if(Array.isArray(this.loss)){for(let e of this.loss)if(typeof e!="string")throw new Error("Serialization of non-string loss is not supported.");t=this.loss.map(e=>Lo(e))}else{let e=Object.keys(this.loss);t={};let o=this.loss;for(let n of e)if(typeof o[n]=="string")t[n]=Lo(o[n]);else throw new Error("Serialization of non-string loss is not supported.")}return t}getMetricIdentifiers(){if(typeof this.metrics=="string"||typeof this.metrics=="function")return[Lo(tf(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map(t=>Lo(tf(t)));{let t={};for(let e in this.metrics)t[e]=Lo(tf(this.metrics[e]));return t}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(t){if(t.weighted_metrics!=null)throw new Error("Loading weight_metrics is not supported yet.");if(t.loss_weights!=null)throw new Error("Loading loss_weights is not supported yet.");if(t.sample_weight_mode!=null)throw new Error("Loading sample_weight_mode is not supported yet.");let e=ef(t.optimizer_config),o=lo(e),n;if(typeof t.loss=="string")n=Zs(t.loss);else if(Array.isArray(t.loss))n=t.loss.map(i=>Zs(i));else if(t.loss!=null){n={};for(let i in t.loss)n[i]=Zs(t.loss[i])}let s;if(Array.isArray(t.metrics))s=t.metrics.map(i=>Zs(i));else if(t.metrics!=null){s={};for(let i in t.metrics)s[i]=Zs(t.metrics[i])}this.compile({loss:n,metrics:s,optimizer:o})}async save(t,e){if(typeof t=="string"){let u=en.getSaveHandlers(t);if(u.length===0)throw new L(`Cannot find any save handlers for URL '${t}'`);if(u.length>1)throw new L(`Found more than one (${u.length}) save handlers for URL '${t}'`);t=u[0]}if(t.save==null)throw new L("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");let o=await en.encodeWeights(this.getNamedWeights(e)),n=!1,s=null,a={modelTopology:this.toJSON(s,n),format:ZU,generatedBy:`TensorFlow.js tfjs-layers v${Cp}`,convertedBy:null};if((e==null?!1:e.includeOptimizer)&&this.optimizer!=null){a.trainingConfig=this.getTrainingConfig();let u="optimizer",{data:c,specs:p}=await en.encodeWeights(await this.optimizer.getWeights(),u);o.specs.push(...p),o.data=en.concatenateArrayBuffers([o.data,c])}return this.userDefinedMetadata!=null&&(V0(this.userDefinedMetadata,this.name,!0),a.userDefinedMetadata=this.userDefinedMetadata),a.weightData=o.data,a.weightSpecs=o.specs,t.save(a)}setUserDefinedMetadata(t){V0(t,this.name),this.userDefinedMetadata=t}getUserDefinedMetadata(){return this.userDefinedMetadata}};Go.className="Model";K.registerClass(Go);var ex=class extends Go{};ex.className="Functional";K.registerClass(ex);var ri=class extends Go{constructor(t){if(super({inputs:[],outputs:[]}),t=t||{},this.trainable=!0,this.built=!1,this.name=t.name!=null?t.name:$a("sequential_"),t.layers!=null)for(let e of t.layers)this.add(e)}checkShape(t){if(t.inboundNodes[0].outputTensors[0].shape.some(o=>o<0))throw new L(`Negative dimension size caused by adding layer ${t.name} with input shape [${t.inboundNodes[0].inputTensors[0].shape}]`)}add(t){let e=t instanceof ri||t instanceof Go,o;if(e){if(o=t,o.outputs.length!==1)throw new L("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(o.inputs.length!==1)throw new L("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(this.outputs.length===0){if(t.inboundNodes.length===0){if(t.batchInputShape==null)throw new L("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");let n=_0({batchShape:t.batchInputShape,dtype:t.dtype,name:t.name+"_input"});t.apply(n)}if(e)this.outputs=o.outputs,this.inputs=o.inputs;else{if(t.inboundNodes.length!==1)throw new L(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${t.name} which has ${t.inboundNodes.length} pre-existing inbound connections.`);if(t.inboundNodes[0].outputTensors.length!==1)throw new L("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(t),this.outputs=[t.inboundNodes[0].outputTensors[0]],this.inputs=F0(this.outputs[0])}this.inboundNodes=[],new ti({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:Oo(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map(n=>n.shape),outputShapes:this.outputs[0].shape})}else{let n=t.apply(this.outputs[0]);if(Array.isArray(n))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(t),this.outputs=[n],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(t),this.built=!1}pop(){if(this.layers.length===0)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),this.layers.length===0)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{let t=this.layers.length-1;this.layers[t].outboundNodes=[],this.outputs=[this.layers[t].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(t,e){return this.model==null&&this.build(),this.model.call(t,e)}build(t){if(Et(t),this.inputs.length===0||this.outputs.length===0)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new Go({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(t,e,o=console.log){this.built||this.build(),super.summary(t,e,o)}setWeights(t){this.model==null&&this.build(),this.model.setWeights(t)}evaluate(t,e,o={}){if(!this.built)throw new xr("The model needs to be compiled before being used.");return this.model.evaluate(t,e,o)}async evaluateDataset(t,e){if(!this.built)throw new xr("The model needs to be compiled before being used.");return this.model.evaluateDataset(t,e)}predict(t,e={}){return this.model==null&&this.build(),this.model.predict(t,e)}predictOnBatch(t){return this.model==null&&this.build(),this.model.predictOnBatch(t)}compile(t){this.build(),this.model.compile(t),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return this.model==null?void 0:this.model.optimizer}set optimizer(t){this.model.optimizer=t}async fit(t,e,o={}){if(!this.built)throw new xr("The model needs to be compiled before being used.");return this.model.fit(t,e,o)}async fitDataset(t,e){if(!this.built)throw new xr("The model needs to be compiled before being used.");return this.model.fitDataset(t,e)}async trainOnBatch(t,e){return this.model.trainOnBatch(t,e)}static fromConfig(t,e,o={},n=!1){let s,i={};if(e instanceof Array){if(e[0].className==null||e[0].className==="Merge")throw new L("Legacy serialization format not supported yet.");s=e}else y.assert(e.layers!=null,()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."),s=e.layers,delete e.layers,i=e;let a=new t(i);if(!(a instanceof ri))throw new yt(`Sequential.fromConfig called on non-Sequential input: ${a}`);for(let l of s){let c=lo(l,void 0,n);n&&c.setFastWeightInitDuringBuild(!0),a.add(c)}return a}set stopTraining(t){if(this.model==null)throw new L("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=t}get stopTraining(){if(this.model==null)throw new L("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){let t=[];for(let e of this.layers){let o={};o.className=e.getClassName(),o.config=e.getConfig(),t.push(o)}return{name:this.name,layers:t}}};ri.className="Sequential";K.registerClass(ri);var Ir=class extends K.Serializable{getConfig(){return{}}},rx=class extends Ir{apply(t,e=1){return _k(t,e)}};rx.className="elu";K.registerClass(rx);var ox=class extends Ir{apply(t){return Vc(t)}};ox.className="selu";K.registerClass(ox);var nx=class extends Ir{apply(t){return ir(t)}};nx.className="relu";K.registerClass(nx);var sx=class extends Ir{apply(t){return M(()=>wo(6,ir(t)))}};sx.className="relu6";K.registerClass(sx);var ix=class extends Ir{apply(t){return t}};ix.className="linear";K.registerClass(ix);var ax=class extends Ir{apply(t){return Cr(t)}};ax.className="sigmoid";K.registerClass(ax);var lx=class extends Ir{apply(t){return Lk(t)}};lx.className="hardSigmoid";K.registerClass(lx);var ux=class extends Ir{apply(t){return Qo(t)}};ux.className="softplus";K.registerClass(ux);var cx=class extends Ir{apply(t){return Ok(t)}};cx.className="softsign";K.registerClass(cx);var px=class extends Ir{apply(t){return kn(t)}};px.className="tanh";K.registerClass(px);var Np=class extends Ir{apply(t,e=-1){return va(t,e)}};Np.className="softmax";K.registerClass(Np);var mx=class extends Ir{apply(t,e=-1){return Oc(t,e)}};mx.className="logSoftmax";K.registerClass(mx);var fx=class extends Ir{apply(t,e=1){return M(()=>A(Cr(A(t,e)),t))}};fx.className="swish";K.registerClass(fx);var hx=class extends Ir{apply(t){return M(()=>A(t,kn(Qo(t))))}};hx.className="mish";K.registerClass(hx);function sn(r){return r.getClassName()}function U0(r,t={}){return Pn(r,K.SerializationMap.getMap().classNameMap,t,"activation")}function an(r){if(r==null){let t={};return t.className="linear",t.config={},U0(t)}if(typeof r=="string"){let t={};return t.className=r,t.config={},U0(t)}else return r instanceof Ir?r:U0(r)}function QU(r){if(r!=null&&typeof r!="object")throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${r}`)}var dx=class extends K.Serializable{},rf=class extends dx{constructor(t){super(),QU(t),this.l1=t==null||t.l1==null?.01:t.l1,this.l2=t==null||t.l2==null?.01:t.l2,this.hasL1=this.l1!==0,this.hasL2=this.l2!==0}apply(t){return M(()=>{let e=ne([1]);return this.hasL1&&(e=U(e,nt(A(this.l1,ae(t))))),this.hasL2&&(e=U(e,nt(A(this.l2,Ol(t))))),D(e,[])})}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(t,e){return new t({l1:e.l1,l2:e.l2})}};rf.className="L1L2";K.registerClass(rf);var cE={l1l2:"L1L2"};function Ht(r){return ip(r)}function pE(r,t={}){return Pn(r,K.SerializationMap.getMap().classNameMap,t,"regularizer")}function Jt(r){if(r==null)return null;if(typeof r=="string"){let e={className:r in cE?cE[r]:r,config:{}};return pE(e)}else return r instanceof dx?r:pE(r)}var of=class extends wt{constructor(t){super(t??{}),this.supportsMasking=!0,t!=null&&(this.maxValue=t.maxValue)}call(t,e){t=gt(t);let o=ir(t);return this.maxValue!=null&&(o=je(o,0,this.maxValue)),o}computeOutputShape(t){return t}getConfig(){let t={maxValue:this.maxValue},e=super.getConfig();return Object.assign(t,e),t}};of.className="ReLU";K.registerClass(of);var nf=class extends wt{constructor(t){super(t??{}),this.DEFAULT_ALPHA=.3,t==null&&(t={}),this.alpha=t.alpha==null?this.DEFAULT_ALPHA:t.alpha}call(t,e){let o=gt(t);return ya(o,this.alpha)}computeOutputShape(t){return t}getConfig(){let t={alpha:this.alpha},e=super.getConfig();return Object.assign(t,e),t}};nf.className="LeakyReLU";K.registerClass(nf);var sf=class extends wt{constructor(t){if(super(t??{}),this.DEFAULT_ALPHA_INITIALIZER="zeros",t==null&&(t={}),this.supportsMasking=!0,this.alphaInitializer=jt(t.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=Jt(t.alphaRegularizer),this.alphaConstraint=ye(t.alphaConstraint),t.sharedAxes==null)this.sharedAxes=null;else if(Array.isArray(t.sharedAxes))this.sharedAxes=t.sharedAxes;else if(typeof t.sharedAxes=="number")this.sharedAxes=[t.sharedAxes];else throw new L(`Expected sharedAxes to be a number or an array of numbers, but got ${t.sharedAxes}`)}build(t){t=Et(t);let e=t.slice(1);if(this.sharedAxes!=null)for(let n of this.sharedAxes)e[n-1]=1;this.alpha=this.addWeight("alpha",e,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);let o={};if(this.sharedAxes!=null)for(let n=1;n<t.length;++n)o[n]=t[n];this.inputSpec=[new Zt({ndim:t.length,axes:o})],this.built=!0}call(t,e){return t=gt(t),Na(t,this.alpha.read())}getConfig(){let t={alphaInitializer:se(this.alphaInitializer),alphaRegularizer:Ht(this.alphaRegularizer),alphaConstraint:xe(this.alphaConstraint),sharedAxes:this.sharedAxes},e=super.getConfig();return Object.assign(t,e),t}};sf.className="PReLU";K.registerClass(sf);var af=class extends wt{constructor(t){if(super(t??{}),this.DEFAULT_ALPHA=1,t==null&&(t={}),t.alpha!=null&&t.alpha!==this.DEFAULT_ALPHA)throw new yt(`Non-default alpha value (${t.alpha}) is not supported by the ELU layer yet.`);this.alpha=t.alpha==null?this.DEFAULT_ALPHA:t.alpha}call(t,e){let o=gt(t);return Dn(o)}computeOutputShape(t){return t}getConfig(){let t={alpha:this.alpha},e=super.getConfig();return Object.assign(t,e),t}};af.className="ELU";K.registerClass(af);var lf=class extends wt{constructor(t){super(t??{}),this.DEFAULT_THETA=1,t==null&&(t={}),this.theta=t.theta==null?this.DEFAULT_THETA:t.theta}call(t,e){let o=gt(t);return A(o,X(ge(o,this.theta),"float32"))}computeOutputShape(t){return t}getConfig(){let t={theta:this.theta},e=super.getConfig();return Object.assign(t,e),t}};lf.className="ThresholdedReLU";K.registerClass(lf);var uf=class extends wt{constructor(t){super(t??{}),this.DEFAULT_AXIS=1,t==null&&(t={}),this.softmax=new Np().apply,this.axis=t.axis==null?this.DEFAULT_AXIS:t.axis}call(t,e){let o=gt(t);return this.softmax(o,this.axis)}computeOutputShape(t){return t}getConfig(){let t={axis:this.axis},e=super.getConfig();return Object.assign(t,e),t}};uf.className="Softmax";K.registerClass(uf);function Ra(r,t,e){if(typeof r=="number")return Oo(r,t);if(r.length!==t)throw new L(`The ${e} argument must be an integer or tuple of ${t} integers. Received: ${r.length} elements.`);for(let o=0;o<t;++o){let n=r[o];if(!Ak(n))throw new L(`The ${e} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(r)} including a non-integer number ${n}`)}return r}function Xr(r,t,e,o,n=1){if(r==null)return r;let s=t+(t-1)*(n-1),i;return e==="same"?i=r:i=r-s+1,Math.floor((i+o-1)/o)}function ln(r,t,e,o){if(r==null)return null;if(o==="valid")r=r*t+nn([e-t,0]);else if(o==="same")r=r*t;else throw new L(`Unsupport padding mode: ${o}.`);return r}function df(r,t){return M(()=>(ce(t),t==="channelsFirst"?Rt(r,[0,2,3,1]):r))}function H0(r,t){return M(()=>(ce(t),t==="channelsFirst"?Rt(r,[0,2,3,4,1]):r))}function e4(r,t,e,o=1,n="valid",s,i=1){return M(()=>{if(s==null&&(s=Or()),ce(s),r.shape.length!==3)throw new L(`The input of a conv1dWithBias operation should be 3, but is ${r.shape.length} instead.`);if(t.shape.length!==3)throw new L(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);if(e!=null&&e.shape.length!==1)throw new L(`The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`);if(s==="channelsFirst"&&(r=Rt(r,[0,2,1])),n==="causal")throw new yt("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let a=Ac(r,t,o,n==="same"?"same":"valid","NWC",i);return e!=null&&(a=Lr(a,e)),a})}function mE(r,t,e,o=[1,1],n="valid",s,i,a=null){return M(()=>{if(s==null&&(s=Or()),ce(s),r.rank!==3&&r.rank!==4)throw new L(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${r.rank}.`);if(t.rank!==3&&t.rank!==4)throw new L(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${r.rank}.`);let l=df(r,s);if(n==="causal")throw new yt("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=ka.conv2d({x:l,filter:t,strides:o,pad:n==="same"?"same":"valid",dilations:i,dataFormat:"NHWC",bias:e,activation:a}),s==="channelsFirst"&&(l=Rt(l,[0,3,1,2])),l})}function r4(r,t,e,o=[1,1,1],n="valid",s,i){return M(()=>{if(s==null&&(s=Or()),ce(s),r.rank!==4&&r.rank!==5)throw new L(`conv3dWithBias expects input to be of rank 4 or 5, but received ${r.rank}.`);if(t.rank!==4&&t.rank!==5)throw new L(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${r.rank}.`);let a=H0(r,s);if(n==="causal")throw new yt("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return a=Nd(a,t,o,n==="same"?"same":"valid","NDHWC",i),e!=null&&(a=Lr(a,e)),s==="channelsFirst"&&(a=Rt(a,[0,4,1,2,3])),a})}var Vl=class extends wt{constructor(t,e){if(super(e),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",Vl.verifyArgs(e),this.rank=t,$e(this.rank,"rank"),this.rank!==1&&this.rank!==2&&this.rank!==3)throw new yt(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=Ra(e.kernelSize,t,"kernelSize"),this.strides=Ra(e.strides==null?1:e.strides,t,"strides"),this.padding=e.padding==null?"valid":e.padding,Fr(this.padding),this.dataFormat=e.dataFormat==null?"channelsLast":e.dataFormat,ce(this.dataFormat),this.activation=an(e.activation),this.useBias=e.useBias==null?!0:e.useBias,this.biasInitializer=jt(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=ye(e.biasConstraint),this.biasRegularizer=Jt(e.biasRegularizer),this.activityRegularizer=Jt(e.activityRegularizer),this.dilationRate=Ra(e.dilationRate==null?1:e.dilationRate,t,"dilationRate"),this.rank===1&&Array.isArray(this.dilationRate)&&this.dilationRate.length!==1)throw new L(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(this.rank===2){if(typeof this.dilationRate=="number")this.dilationRate=[this.dilationRate,this.dilationRate];else if(this.dilationRate.length!==2)throw new L(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(this.rank===3){if(typeof this.dilationRate=="number")this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(this.dilationRate.length!==3)throw new L(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}}static verifyArgs(t){if(Co("kernelSize"in t,"required key 'kernelSize' not in config"),typeof t.kernelSize!="number"&&!Ng(t.kernelSize,"number",1,3))throw new L(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(t.kernelSize)}.`)}getConfig(){let t={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:sn(this.activation),useBias:this.useBias,biasInitializer:se(this.biasInitializer),biasRegularizer:Ht(this.biasRegularizer),activityRegularizer:Ht(this.activityRegularizer),biasConstraint:xe(this.biasConstraint)},e=super.getConfig();return Object.assign(t,e),t}},Fa=class extends Vl{constructor(t,e){super(t,e),this.kernel=null,Fa.verifyArgs(e),this.filters=e.filters,$e(this.filters,"filters"),this.kernelInitializer=jt(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=ye(e.kernelConstraint),this.kernelRegularizer=Jt(e.kernelRegularizer)}build(t){t=Et(t);let e=this.dataFormat==="channelsFirst"?1:t.length-1;if(t[e]==null)throw new L(`The channel dimension of the input should be defined. Found ${t[e]}`);let o=t[e],n=this.kernelSize.concat([o,this.filters]);this.kernel=this.addWeight("kernel",n,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[e]:o}}],this.built=!0}call(t,e){return M(()=>{t=gt(t);let o,n=this.bias==null?null:this.bias.read(),s=vg(this.activation.getClassName());if(s!=null&&this.rank===2)o=mE(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,s);else{if(this.rank===1)o=e4(t,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(this.rank===2)o=mE(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else if(this.rank===3)o=r4(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else throw new yt("convolutions greater than 3D are not implemented yet.");this.activation!=null&&(o=this.activation.apply(o))}return o})}computeOutputShape(t){t=Et(t);let e=[],o=this.dataFormat==="channelsLast"?t.slice(1,t.length-1):t.slice(2);for(let s=0;s<o.length;++s){let i=Xr(o[s],this.kernelSize[s],this.padding,this.strides[s],typeof this.dilationRate=="number"?this.dilationRate:this.dilationRate[s]);e.push(i)}let n=[t[0]];return this.dataFormat==="channelsLast"?(n=n.concat(e),n.push(this.filters)):(n.push(this.filters),n=n.concat(e)),n}getConfig(){let t={filters:this.filters,kernelInitializer:se(this.kernelInitializer),kernelRegularizer:Ht(this.kernelRegularizer),kernelConstraint:xe(this.kernelConstraint)},e=super.getConfig();return Object.assign(t,e),t}static verifyArgs(t){if(!("filters"in t)||typeof t.filters!="number"||t.filters<1)throw new L(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(t.filters)}`)}},_a=class extends Fa{constructor(t){super(2,t),_a.verifyArgs(t)}getConfig(){let t=super.getConfig();return delete t.rank,t}static verifyArgs(t){if(typeof t.kernelSize!="number"&&!Ng(t.kernelSize,"number",1,2))throw new L(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(t.kernelSize)}.`)}};_a.className="Conv2D";K.registerClass(_a);var Oa=class extends Fa{constructor(t){super(3,t),Oa.verifyArgs(t)}getConfig(){let t=super.getConfig();return delete t.rank,t}static verifyArgs(t){if(typeof t.kernelSize!="number"&&!(Array.isArray(t.kernelSize)&&(t.kernelSize.length===1||t.kernelSize.length===3)))throw new L(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(t.kernelSize)}.`)}};Oa.className="Conv3D";K.registerClass(Oa);var cf=class extends _a{constructor(t){if(super(t),this.inputSpec=[new Zt({ndim:4})],this.padding!=="same"&&this.padding!=="valid")throw new L(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(t){if(t=Et(t),t.length!==4)throw new L("Input should have rank 4; Received input shape: "+JSON.stringify(t));let e=this.dataFormat==="channelsFirst"?1:t.length-1;if(t[e]==null)throw new L("The channel dimension of the inputs should be defined. Found `None`.");let o=t[e],n=this.kernelSize.concat([this.filters,o]);this.kernel=this.addWeight("kernel",n,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new Zt({ndim:4,axes:{[e]:o}})],this.built=!0}call(t,e){return M(()=>{let o=gt(t);if(o.shape.length!==4)throw new L(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${o.shape.length}`);let n=o.shape,s=n[0],i,a;this.dataFormat==="channelsFirst"?(i=2,a=3):(i=1,a=2);let l=n[i],u=n[a],c=this.kernelSize[0],p=this.kernelSize[1],m=this.strides[0],f=this.strides[1],h=ln(l,m,c,this.padding),g=ln(u,f,p,this.padding),d=[s,h,g,this.filters];this.dataFormat!=="channelsLast"&&(o=Rt(o,[0,2,3,1]));let x=Rc(o,this.kernel.read(),d,this.strides,this.padding);return this.dataFormat!=="channelsLast"&&(x=Rt(x,[0,3,1,2])),this.bias!=null&&(x=Lr(x,this.bias.read(),this.dataFormat)),this.activation!=null&&(x=this.activation.apply(x)),x})}computeOutputShape(t){t=Et(t);let e=t.slice(),o,n,s;this.dataFormat==="channelsFirst"?(o=1,n=2,s=3):(o=3,n=1,s=2);let i=this.kernelSize[0],a=this.kernelSize[1],l=this.strides[0],u=this.strides[1];return e[o]=this.filters,e[n]=ln(e[n],l,i,this.padding),e[s]=ln(e[s],u,a,this.padding),e}getConfig(){let t=super.getConfig();return delete t.dilationRate,t}};cf.className="Conv2DTranspose";K.registerClass(cf);var pf=class extends Oa{constructor(t){if(super(t),this.inputSpec=[new Zt({ndim:5})],this.padding!=="same"&&this.padding!=="valid")throw new L(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(t){if(t=Et(t),t.length!==5)throw new L("Input should have rank 5; Received input shape: "+JSON.stringify(t));let e=this.dataFormat==="channelsFirst"?1:t.length-1;if(t[e]==null)throw new L("The channel dimension of the inputs should be defined. Found `None`.");let o=t[e],n=this.kernelSize.concat([this.filters,o]);this.kernel=this.addWeight("kernel",n,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new Zt({ndim:5,axes:{[e]:o}})],this.built=!0}call(t,e){return M(()=>{let o=gt(t);if(o.shape.length!==5)throw new L(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${o.shape.length}`);let n=o.shape,s=n[0],i,a,l;this.dataFormat==="channelsFirst"?(l=2,i=3,a=4):(l=1,i=2,a=3);let u=n[l],c=n[i],p=n[a],m=this.kernelSize[0],f=this.kernelSize[1],h=this.kernelSize[2],g=this.strides[0],d=this.strides[1],x=this.strides[2],b=ln(u,g,m,this.padding),S=ln(c,d,f,this.padding),w=ln(p,x,h,this.padding),T=[s,b,S,w,this.filters];this.dataFormat!=="channelsLast"&&(o=Rt(o,[0,2,3,4,1]));let $=Td(o,this.kernel.read(),T,this.strides,this.padding);return this.dataFormat!=="channelsLast"&&($=Rt($,[0,4,1,2,3])),this.bias!==null&&($=Lr($,this.bias.read(),this.dataFormat)),this.activation!==null&&($=this.activation.apply($)),$})}computeOutputShape(t){t=Et(t);let e=t.slice(),o,n,s,i;this.dataFormat==="channelsFirst"?(o=1,n=2,s=3,i=4):(o=4,n=1,s=2,i=3);let a=this.kernelSize[0],l=this.kernelSize[1],u=this.kernelSize[2],c=this.strides[0],p=this.strides[1],m=this.strides[2];return e[o]=this.filters,e[n]=ln(e[n],c,a,this.padding),e[s]=ln(e[s],p,l,this.padding),e[i]=ln(e[i],m,u,this.padding),e}getConfig(){let t=super.getConfig();return delete t.dilationRate,t}};pf.className="Conv3DTranspose";K.registerClass(pf);var gx=class extends Fa{constructor(t,e){if(super(t,e),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,e.filters==null)throw new L("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(e.kernelInitializer!=null||e.kernelRegularizer!=null||e.kernelConstraint!=null)throw new L("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(e.padding!=null&&e.padding!=="same"&&e.padding!=="valid")throw new L(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(e.padding)}`);this.depthMultiplier=e.depthMultiplier==null?1:e.depthMultiplier,this.depthwiseInitializer=jt(e.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=Jt(e.depthwiseRegularizer),this.depthwiseConstraint=ye(e.depthwiseConstraint),this.pointwiseInitializer=jt(e.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=Jt(e.pointwiseRegularizer),this.pointwiseConstraint=ye(e.pointwiseConstraint)}build(t){if(t=Et(t),t.length<this.rank+2)throw new L(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(t)}`);let e=this.dataFormat==="channelsFirst"?1:t.length-1;if(t[e]==null||t[e]<0)throw new L(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(t[e])}`);let o=t[e],n=this.kernelSize.concat([o,this.depthMultiplier]),s=[];for(let a=0;a<this.rank;++a)s.push(1);s.push(o*this.depthMultiplier,this.filters);let i=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",n,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,i,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",s,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,i,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,i,this.biasConstraint):this.bias=null,this.inputSpec=[new Zt({ndim:this.rank+2,axes:{[e]:o}})],this.built=!0}call(t,e){return M(()=>{t=gt(t);let o;if(this.rank===1)throw new yt("1D separable convolution is not implemented yet.");return this.rank===2&&(this.dataFormat==="channelsFirst"&&(t=Rt(t,[0,2,3,1])),o=Gc(t,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(o=Lr(o,this.bias.read(),this.dataFormat)),this.activation!=null&&(o=this.activation.apply(o)),this.dataFormat==="channelsFirst"&&(o=Rt(o,[0,3,1,2])),o})}getConfig(){let t=super.getConfig();return delete t.rank,delete t.kernelInitializer,delete t.kernelRegularizer,delete t.kernelConstraint,t.depthwiseInitializer=se(this.depthwiseInitializer),t.pointwiseInitializer=se(this.pointwiseInitializer),t.depthwiseRegularizer=Ht(this.depthwiseRegularizer),t.pointwiseRegularizer=Ht(this.pointwiseRegularizer),t.depthwiseConstraint=xe(this.depthwiseConstraint),t.pointwiseConstraint=xe(this.pointwiseConstraint),t}};gx.className="SeparableConv";var mf=class extends gx{constructor(t){super(2,t)}};mf.className="SeparableConv2D";K.registerClass(mf);var Gl=class extends Fa{constructor(t){super(1,t),Gl.verifyArgs(t),this.inputSpec=[{ndim:3}]}getConfig(){let t=super.getConfig();return delete t.rank,delete t.dataFormat,t}static verifyArgs(t){if(typeof t.kernelSize!="number"&&!Ng(t.kernelSize,"number",1,1))throw new L(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(t.kernelSize)}.`)}};Gl.className="Conv1D";K.registerClass(Gl);var ff=class extends wt{constructor(t){super(t),typeof t.cropping=="number"?this.cropping=[[t.cropping,t.cropping],[t.cropping,t.cropping]]:typeof t.cropping[0]=="number"?this.cropping=[[t.cropping[0],t.cropping[0]],[t.cropping[1],t.cropping[1]]]:this.cropping=t.cropping,this.dataFormat=t.dataFormat===void 0?"channelsLast":t.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(t){return this.dataFormat==="channelsFirst"?[t[0],t[1],t[2]-this.cropping[0][0]-this.cropping[0][1],t[3]-this.cropping[1][0]-this.cropping[1][1]]:[t[0],t[1]-this.cropping[0][0]-this.cropping[0][1],t[2]-this.cropping[1][0]-this.cropping[1][1],t[3]]}call(t,e){return M(()=>{if(t=gt(t),this.dataFormat==="channelsLast"){let o=Lm(t,this.cropping[0][0],t.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return Lm(o,this.cropping[1][0],t.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}else{let o=Lm(t,this.cropping[0][0],t.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return Lm(o,this.cropping[1][0],t.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}})}getConfig(){let t={cropping:this.cropping,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}};ff.className="Cropping2D";K.registerClass(ff);var hf=class extends wt{constructor(t){super(t),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=t.size==null?this.DEFAULT_SIZE:t.size,this.dataFormat=t.dataFormat==null?"channelsLast":t.dataFormat,ce(this.dataFormat),this.interpolation=t.interpolation==null?"nearest":t.interpolation,Ek(this.interpolation)}computeOutputShape(t){if(this.dataFormat==="channelsFirst"){let e=t[2]==null?null:this.size[0]*t[2],o=t[3]==null?null:this.size[1]*t[3];return[t[0],t[1],e,o]}else{let e=t[1]==null?null:this.size[0]*t[1],o=t[2]==null?null:this.size[1]*t[2];return[t[0],e,o,t[3]]}}call(t,e){return M(()=>{let o=gt(t),n=o.shape;if(this.dataFormat==="channelsFirst"){o=Rt(o,[0,2,3,1]);let s=this.size[0]*n[2],i=this.size[1]*n[3],a=this.interpolation==="nearest"?hr.resizeNearestNeighbor(o,[s,i]):hr.resizeBilinear(o,[s,i]);return Rt(a,[0,3,1,2])}else{let s=this.size[0]*n[1],i=this.size[1]*n[2];return this.interpolation==="nearest"?hr.resizeNearestNeighbor(o,[s,i]):hr.resizeBilinear(o,[s,i])}})}getConfig(){let t={size:this.size,dataFormat:this.dataFormat,interpolation:this.interpolation},e=super.getConfig();return Object.assign(t,e),t}};hf.className="UpSampling2D";K.registerClass(hf);function o4(r,t,e=[1,1],o="valid",n,s){return M(()=>{n==null&&(n=Or()),ce(n);let i=df(r,n);if(r.rank!==4)throw new L(`Input for depthwiseConv2d is required to be 4-D, but is instead ${r.rank}-D`);if(t.rank!==4)throw new L(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);return i=An(i,t,e,o==="same"?"same":"valid","NHWC",s),n==="channelsFirst"&&(i=Rt(i,[0,3,1,2])),i})}var gf=class extends Vl{constructor(t){super(2,t),this.depthwiseKernel=null,this.depthMultiplier=t.depthMultiplier==null?1:t.depthMultiplier,this.depthwiseInitializer=jt(t.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=ye(t.depthwiseConstraint),this.depthwiseRegularizer=Jt(t.depthwiseRegularizer)}build(t){if(t=Et(t),t.length<4)throw new L(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(t)}.`);let e=this.dataFormat==="channelsFirst"?1:3;if(t[e]==null||t[e]<0)throw new L(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${t[e]}).`);let o=t[e],n=[this.kernelSize[0],this.kernelSize[1],o,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",n,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[o*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return M(()=>{t=gt(t);let o=o4(t,this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(o=Lr(o,this.bias.read(),this.dataFormat)),this.activation!=null&&(o=this.activation.apply(o)),o})}computeOutputShape(t){t=Et(t);let e=this.dataFormat==="channelsFirst"?t[2]:t[1],o=this.dataFormat==="channelsFirst"?t[3]:t[2],n=this.dataFormat==="channelsFirst"?t[1]*this.depthMultiplier:t[3]*this.depthMultiplier,s=Xr(e,this.kernelSize[0],this.padding,this.strides[0]),i=Xr(o,this.kernelSize[1],this.padding,this.strides[1]);return this.dataFormat==="channelsFirst"?[t[0],n,s,i]:[t[0],s,i,n]}getConfig(){let t=super.getConfig();return t.depthMultiplier=this.depthMultiplier,t.depthwiseInitializer=se(this.depthwiseInitializer),t.depthwiseRegularizer=Ht(this.depthwiseRegularizer),t.depthwiseConstraint=xe(this.depthwiseRegularizer),t}};gf.className="DepthwiseConv2D";K.registerClass(gf);function K0(r,t,e,o){if(Array.isArray(r)){if(t!=null||e!=null)throw new L("When inputs is an array, neither initialState or constants should be provided");o!=null&&(e=r.slice(r.length-o,r.length),r=r.slice(0,r.length-o)),r.length>1&&(t=r.slice(1,r.length)),r=r[0]}function n(s){return s==null||Array.isArray(s)?s:[s]}return t=n(t),e=n(e),{inputs:r,initialState:t,constants:e}}function q0(r,t,e,o=!1,n,s,i=!1,a=!1){return M(()=>{let l=t.shape.length;if(l<3)throw new L(`Input should be at least 3D, but is ${l}D.`);let u=[1,0].concat(_r(2,l));if(t=Rt(t,u),s!=null)throw new yt("The rnn() functoin of the deeplearn.js backend does not support constants yet.");i&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),n!=null&&(n=X(X(n,"bool"),"float32"),n.rank===l-1&&(n=Ie(n,-1)),n=Rt(n,u)),o&&(t=Ve(t,0),n!=null&&(n=Ve(n,0)));let c=[],p,m=e,f=t.shape[0],h=We(t),g;n!=null&&(g=We(n));for(let x=0;x<f;++x){let b=h[x],S=M(()=>r(b,m));if(n==null)p=S[0],m=S[1];else{let w=M(()=>{let T=g[x],$=tt(Ke(T),T),R=U(A(S[0],T),A(m[0],$)),F=m.map((O,P)=>U(A(S[1][P],T),A(O,$)));return{output:R,newStates:F}});p=w.output,m=w.newStates}a&&c.push(p)}let d;return a&&(d=Ne(c,1)),[p,d,m]})}var So=class extends wt{constructor(t){super(t);let e;if(t.cell==null)throw new L("cell property is missing for the constructor of RNN.");if(Array.isArray(t.cell)?e=new Ip({cells:t.cell}):e=t.cell,e.stateSize==null)throw new L("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=e,this.returnSequences=t.returnSequences==null?!1:t.returnSequences,this.returnState=t.returnState==null?!1:t.returnState,this.goBackwards=t.goBackwards==null?!1:t.goBackwards,this._stateful=t.stateful==null?!1:t.stateful,this.unroll=t.unroll==null?!1:t.unroll,this.supportsMasking=!0,this.inputSpec=[new Zt({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){if(this.states_==null){let t=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;return _r(0,t).map(e=>null)}else return this.states_}setStates(t){this.states_=t}computeOutputShape(t){Fg(t)&&(t=t[0]),t=t;let e=this.cell.stateSize;Array.isArray(e)||(e=[e]);let o=e[0],n;if(this.returnSequences?n=[t[0],t[1],o]:n=[t[0],o],this.returnState){let s=[];for(let i of e)s.push([t[0],i]);return[n].concat(s)}else return n}computeMask(t,e){return M(()=>{Array.isArray(e)&&(e=e[0]);let o=this.returnSequences?e:null;if(this.returnState){let n=this.states.map(s=>null);return[o].concat(n)}else return o})}get states(){if(this.states_==null){let t=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,e=[];for(let o=0;o<t;++o)e.push(null);return e}else return this.states_}set states(t){this.states_=t}build(t){if(this.numConstants!=null)throw new yt("Constants support is not implemented in RNN yet.");Fg(t)&&(t=t[0]),t=t;let o=this.stateful?t[0]:null,n=t.slice(2);this.inputSpec[0]=new Zt({shape:[o,null,...n]});let s=[t[0]].concat(t.slice(2));this.cell.build(s);let i;if(Array.isArray(this.cell.stateSize)?i=this.cell.stateSize:i=[this.cell.stateSize],this.stateSpec!=null){if(!y.arraysEqual(this.stateSpec.map(a=>a.shape[a.shape.length-1]),i))throw new L(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=i.map(a=>new Zt({shape:[null,a]}));this.stateful&&this.resetStates()}resetStates(t,e=!1){M(()=>{if(!this.stateful)throw new qr("Cannot call resetStates() on an RNN Layer that is not stateful.");let o=this.inputSpec[0].shape[0];if(o==null)throw new L("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(this.states_==null)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(n=>ne([o,n])):this.states_=[ne([o,this.cell.stateSize])];else if(t==null)xt(this.states_),this.keptStates!=null&&(xt(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(n=>ne([o,n])):this.states_[0]=ne([o,this.cell.stateSize]);else{if(Array.isArray(t)||(t=[t]),t.length!==this.states_.length)throw new L(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${t.length} state value(s). Input received: ${t}`);e===!0?this.keptStates.push(this.states_.slice()):xt(this.states_);for(let n=0;n<this.states_.length;++n){let s=t[n],i=Array.isArray(this.cell.stateSize)?this.cell.stateSize[n]:this.cell.stateSize,a=[o,i];if(!y.arraysEqual(s.shape,a))throw new L(`State ${n} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${s.shape}`);this.states_[n]=s}}this.states_=this.states_.map(n=>ue(n.clone()))})}apply(t,e){let o=e==null?null:e.initialState,n=e==null?null:e.constants;e==null&&(e={});let s=K0(t,o,n,this.numConstants);t=s.inputs,o=s.initialState,n=s.constants;let i=[],a=[];if(o!=null){e.initialState=o,i=i.concat(o),this.stateSpec=[];for(let u of o)this.stateSpec.push(new Zt({shape:u.shape}));a=a.concat(this.stateSpec)}if(n!=null&&(e.constants=n,i=i.concat(n),this.numConstants=n.length),i[0]instanceof Tr){let u=[t].concat(i),c=this.inputSpec.concat(a),p=this.inputSpec;this.inputSpec=c;let m=super.apply(u,e);return this.inputSpec=p,m}else return super.apply(t,e)}call(t,e){return M(()=>{let o=e==null?null:e.mask,n=e==null?null:e.training,s=e==null?null:e.initialState;t=gt(t),s==null&&(this.stateful?s=this.states_:s=this.getInitialState(t));let i=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(s.length!==i)throw new L(`RNN Layer has ${i} state(s) but was passed ${s.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");let a={training:n},u=q0((h,g)=>{let d=this.cell.call([h].concat(g),a);return[d[0],d.slice(1)]},t,s,this.goBackwards,o,null,this.unroll,this.returnSequences),c=u[0],p=u[1],m=u[2];this.stateful&&this.resetStates(m,n);let f=this.returnSequences?p:c;return this.returnState?[f].concat(m):f})}getInitialState(t){return M(()=>{let e=ne(t.shape);return e=nt(e,[1,2]),e=Qs(e),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(o=>o>1?Ag(e,[1,o]):e):this.cell.stateSize>1?[Ag(e,[1,this.cell.stateSize])]:[e]})}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),this.cell!=null&&this.cell.setFastWeightInitDuringBuild(t)}getConfig(){let t=super.getConfig(),e={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};this.numConstants!=null&&(e.numConstants=this.numConstants);let o=this.cell.getConfig();return this.getClassName()===So.className&&(e.cell={className:this.cell.getClassName(),config:o}),Object.assign(Object.assign(Object.assign({},o),t),e)}static fromConfig(t,e,o={}){let n=e.cell,s=lo(n,o);return new t(Object.assign(e,{cell:s}))}};So.className="RNN";K.registerClass(So);var La=class extends wt{},vp=class extends La{constructor(t){super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=t.units,$e(this.units,"units"),this.activation=an(t.activation==null?this.DEFAULT_ACTIVATION:t.activation),this.useBias=t.useBias==null?!0:t.useBias,this.kernelInitializer=jt(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=jt(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=jt(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=Jt(t.kernelRegularizer),this.recurrentRegularizer=Jt(t.recurrentRegularizer),this.biasRegularizer=Jt(t.biasRegularizer),this.kernelConstraint=ye(t.kernelConstraint),this.recurrentConstraint=ye(t.recurrentConstraint),this.biasConstraint=ye(t.biasConstraint),this.dropout=_l([1,nn([0,t.dropout==null?0:t.dropout])]),this.recurrentDropout=_l([1,nn([0,t.recurrentDropout==null?0:t.recurrentDropout])]),this.dropoutFunc=t.dropoutFunc,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){t=Et(t),this.kernel=this.addWeight("kernel",[t[t.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return M(()=>{if(t=t,t.length!==2)throw new L(`SimpleRNNCell expects 2 input Tensors, got ${t.length}.`);let o=t[1];t=t[0];let n=e.training==null?!1:e.training;0<this.dropout&&this.dropout<1&&this.dropoutMask==null&&(this.dropoutMask=oi({ones:()=>Ke(t),rate:this.dropout,training:n,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&this.recurrentDropoutMask==null&&(this.recurrentDropoutMask=oi({ones:()=>Ke(o),rate:this.recurrentDropout,training:n,dropoutFunc:this.dropoutFunc}));let s,i=this.dropoutMask,a=this.recurrentDropoutMask;i!=null?s=Mo(A(t,i),this.kernel.read()):s=Mo(t,this.kernel.read()),this.bias!=null&&(s=Lr(s,this.bias.read())),a!=null&&(o=A(o,a));let l=U(s,Mo(o,this.recurrentKernel.read()));return this.activation!=null&&(l=this.activation.apply(l)),[l,l]})}getConfig(){let t=super.getConfig(),e={units:this.units,activation:sn(this.activation),useBias:this.useBias,kernelInitializer:se(this.kernelInitializer),recurrentInitializer:se(this.recurrentInitializer),biasInitializer:se(this.biasInitializer),kernelRegularizer:Ht(this.kernelRegularizer),recurrentRegularizer:Ht(this.recurrentRegularizer),biasRegularizer:Ht(this.biasRegularizer),activityRegularizer:Ht(this.activityRegularizer),kernelConstraint:xe(this.kernelConstraint),recurrentConstraint:xe(this.recurrentConstraint),biasConstraint:xe(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign(Object.assign({},t),e)}};vp.className="SimpleRNNCell";K.registerClass(vp);var xf=class extends So{constructor(t){t.cell=new vp(t),super(t)}call(t,e){return M(()=>{this.cell.dropoutMask!=null&&(xt(this.cell.dropoutMask),this.cell.dropoutMask=null),this.cell.recurrentDropoutMask!=null&&(xt(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);let o=e==null?null:e.mask,n=e==null?null:e.training,s=e==null?null:e.initialState;return super.call(t,{mask:o,training:n,initialState:s})})}static fromConfig(t,e){return new t(e)}};xf.className="SimpleRNN";K.registerClass(xf);var Tp=class extends La{constructor(t){if(super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",t.resetAfter)throw new L("GRUCell does not support reset_after parameter set to true.");this.units=t.units,$e(this.units,"units"),this.activation=an(t.activation===void 0?this.DEFAULT_ACTIVATION:t.activation),this.recurrentActivation=an(t.recurrentActivation===void 0?this.DEFAULT_RECURRENT_ACTIVATION:t.recurrentActivation),this.useBias=t.useBias==null?!0:t.useBias,this.kernelInitializer=jt(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=jt(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=jt(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=Jt(t.kernelRegularizer),this.recurrentRegularizer=Jt(t.recurrentRegularizer),this.biasRegularizer=Jt(t.biasRegularizer),this.kernelConstraint=ye(t.kernelConstraint),this.recurrentConstraint=ye(t.recurrentConstraint),this.biasConstraint=ye(t.biasConstraint),this.dropout=_l([1,nn([0,t.dropout==null?0:t.dropout])]),this.recurrentDropout=_l([1,nn([0,t.recurrentDropout==null?0:t.recurrentDropout])]),this.dropoutFunc=t.dropoutFunc,this.implementation=t.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){t=Et(t);let e=t[t.length-1];this.kernel=this.addWeight("kernel",[e,this.units*3],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units*3],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units*3],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return M(()=>{if(t=t,t.length!==2)throw new L(`GRUCell expects 2 input Tensors (inputs, h, c), got ${t.length}.`);let o=e.training==null?!1:e.training,n=t[1];t=t[0],0<this.dropout&&this.dropout<1&&this.dropoutMask==null&&(this.dropoutMask=oi({ones:()=>Ke(t),rate:this.dropout,training:o,count:3,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&this.recurrentDropoutMask==null&&(this.recurrentDropoutMask=oi({ones:()=>Ke(n),rate:this.recurrentDropout,training:o,count:3,dropoutFunc:this.dropoutFunc}));let s=this.dropoutMask,i=this.recurrentDropoutMask,a,l,u;0<this.dropout&&this.dropout<1&&(t=A(t,s[0]));let c=Mo(t,this.kernel.read());this.useBias&&(c=Lr(c,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(n=A(n,i[0]));let p=this.recurrentKernel.read(),[m,f]=Ge(p,[2*this.units,this.units],p.rank-1),h=Mo(n,m),[g,d,x]=Ge(c,3,c.rank-1),[b,S]=Ge(h,2,h.rank-1);a=this.recurrentActivation.apply(U(g,b)),l=this.recurrentActivation.apply(U(d,S));let w=Mo(A(l,n),f);u=this.activation.apply(U(x,w));let T=U(A(a,n),A(U(1,Ft(a)),u));return[T,T]})}getConfig(){let t=super.getConfig(),e={units:this.units,activation:sn(this.activation),recurrentActivation:sn(this.recurrentActivation),useBias:this.useBias,kernelInitializer:se(this.kernelInitializer),recurrentInitializer:se(this.recurrentInitializer),biasInitializer:se(this.biasInitializer),kernelRegularizer:Ht(this.kernelRegularizer),recurrentRegularizer:Ht(this.recurrentRegularizer),biasRegularizer:Ht(this.biasRegularizer),activityRegularizer:Ht(this.activityRegularizer),kernelConstraint:xe(this.kernelConstraint),recurrentConstraint:xe(this.recurrentConstraint),biasConstraint:xe(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign(Object.assign({},t),e)}};Tp.className="GRUCell";K.registerClass(Tp);var yf=class extends So{constructor(t){t.implementation===0&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),t.cell=new Tp(t),super(t)}call(t,e){return M(()=>{this.cell.dropoutMask!=null&&(xt(this.cell.dropoutMask),this.cell.dropoutMask=null),this.cell.recurrentDropoutMask!=null&&(xt(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);let o=e==null?null:e.mask,n=e==null?null:e.training,s=e==null?null:e.initialState;return super.call(t,{mask:o,training:n,initialState:s})})}static fromConfig(t,e){return e.implmentation===0&&(e.implementation=1),new t(e)}};yf.className="GRU";K.registerClass(yf);var Pa=class extends La{constructor(t){super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=t.units,$e(this.units,"units"),this.activation=an(t.activation===void 0?this.DEFAULT_ACTIVATION:t.activation),this.recurrentActivation=an(t.recurrentActivation===void 0?this.DEFAULT_RECURRENT_ACTIVATION:t.recurrentActivation),this.useBias=t.useBias==null?!0:t.useBias,this.kernelInitializer=jt(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=jt(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=jt(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=t.unitForgetBias,this.kernelRegularizer=Jt(t.kernelRegularizer),this.recurrentRegularizer=Jt(t.recurrentRegularizer),this.biasRegularizer=Jt(t.biasRegularizer),this.kernelConstraint=ye(t.kernelConstraint),this.recurrentConstraint=ye(t.recurrentConstraint),this.biasConstraint=ye(t.biasConstraint),this.dropout=_l([1,nn([0,t.dropout==null?0:t.dropout])]),this.recurrentDropout=_l([1,nn([0,t.recurrentDropout==null?0:t.recurrentDropout])]),this.dropoutFunc=t.dropoutFunc,this.implementation=t.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){var e;t=Et(t);let o=t[t.length-1];this.kernel=this.addWeight("kernel",[o,this.units*4],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units*4],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint);let n;if(this.useBias){if(this.unitForgetBias){let s=this.biasInitializer,i=this.units;n=new(e=class extends Pr{apply(l,u){let c=s.apply([i]),p=new Ll().apply([i]),m=s.apply([i*2]);return R0(R0(c,p),m)}},e.className="CustomInit",e)}else n=this.biasInitializer;this.bias=this.addWeight("bias",[this.units*4],null,n,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(t,e){return M(()=>{let o=e.training==null?!1:e.training;if(t=t,t.length!==3)throw new L(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${t.length}.`);let n=t[1],s=t[2];t=t[0],0<this.dropout&&this.dropout<1&&this.dropoutMask==null&&(this.dropoutMask=oi({ones:()=>Ke(t),rate:this.dropout,training:o,count:4,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&this.recurrentDropoutMask==null&&(this.recurrentDropoutMask=oi({ones:()=>Ke(n),rate:this.recurrentDropout,training:o,count:4,dropoutFunc:this.dropoutFunc}));let i=this.dropoutMask,a=this.recurrentDropoutMask,l,u,c,p;0<this.dropout&&this.dropout<1&&(t=A(t,i[0]));let m=Mo(t,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(n=A(n,a[0])),m=U(m,Mo(n,this.recurrentKernel.read())),this.useBias&&(m=Lr(m,this.bias.read()));let[f,h,g,d]=Ge(m,4,m.rank-1);l=this.recurrentActivation.apply(f),u=this.recurrentActivation.apply(h),c=U(A(u,s),A(l,this.activation.apply(g))),p=this.recurrentActivation.apply(d);let x=A(p,this.activation.apply(c));return[x,x,c]})}getConfig(){let t=super.getConfig(),e={units:this.units,activation:sn(this.activation),recurrentActivation:sn(this.recurrentActivation),useBias:this.useBias,kernelInitializer:se(this.kernelInitializer),recurrentInitializer:se(this.recurrentInitializer),biasInitializer:se(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:Ht(this.kernelRegularizer),recurrentRegularizer:Ht(this.recurrentRegularizer),biasRegularizer:Ht(this.biasRegularizer),activityRegularizer:Ht(this.activityRegularizer),kernelConstraint:xe(this.kernelConstraint),recurrentConstraint:xe(this.recurrentConstraint),biasConstraint:xe(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign(Object.assign({},t),e)}};Pa.className="LSTMCell";K.registerClass(Pa);var bf=class extends So{constructor(t){t.implementation===0&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),t.cell=new Pa(t),super(t)}call(t,e){return M(()=>{this.cell.dropoutMask!=null&&(xt(this.cell.dropoutMask),this.cell.dropoutMask=null),this.cell.recurrentDropoutMask!=null&&(xt(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);let o=e==null?null:e.mask,n=e==null?null:e.training,s=e==null?null:e.initialState;return super.call(t,{mask:o,training:n,initialState:s})})}static fromConfig(t,e){return e.implmentation===0&&(e.implementation=1),new t(e)}};bf.className="LSTM";K.registerClass(bf);var Ip=class extends La{constructor(t){super(t),this.cells=t.cells}get stateSize(){let t=[];for(let e of this.cells.slice().reverse())Array.isArray(e.stateSize)?t.push(...e.stateSize):t.push(e.stateSize);return t}call(t,e){return M(()=>{t=t;let o=t.slice(1),n=[];for(let a of this.cells.slice().reverse())Array.isArray(a.stateSize)?n.push(o.splice(0,a.stateSize.length)):n.push(o.splice(0,1));n.reverse();let s=[],i;for(let a=0;a<this.cells.length;++a){let l=this.cells[a];o=n[a],a===0?i=[t[0]].concat(o):i=[i[0]].concat(o),i=l.call(i,e),s.push(i.slice(1))}o=[];for(let a of s.slice().reverse())o.push(...a);return[i[0]].concat(o)})}build(t){Fg(t)&&(t=t[0]),t=t;let e;this.cells.forEach((o,n)=>{on(`RNNCell_${n}`,()=>{o.build(t),Array.isArray(o.stateSize)?e=o.stateSize[0]:e=o.stateSize,t=[t[0],e]})}),this.built=!0}getConfig(){let t=super.getConfig(),e=s=>({className:s.getClassName(),config:s.getConfig()}),n={cells:this.cells.map(e)};return Object.assign(Object.assign({},t),n)}static fromConfig(t,e,o={}){let n=[];for(let s of e.cells)n.push(lo(s,o));return new t({cells:n})}get trainableWeights(){if(!this.trainable)return[];let t=[];for(let e of this.cells)t.push(...e.trainableWeights);return t}get nonTrainableWeights(){let t=[];for(let e of this.cells)t.push(...e.nonTrainableWeights);if(!this.trainable){let e=[];for(let o of this.cells)e.push(...o.trainableWeights);return e.concat(t)}return t}getWeights(){let t=[];for(let e of this.cells)t.push(...e.weights);return Hm(t)}setWeights(t){let e=[];for(let o of this.cells){let n=o.weights.length,s=t.splice(n);for(let i=0;i<o.weights.length;++i)e.push([o.weights[i],s[i]])}yp(e)}};Ip.className="StackedRNNCells";K.registerClass(Ip);function oi(r){let{ones:t,rate:e,training:o=!1,count:n=1,dropoutFunc:s}=r,i=()=>s!=null?s(t(),e):Rg(t(),e),a=()=>Aa(i,t,o);return!n||n<=1?ue(a().clone()):Array(n).fill(void 0).map(a).map(u=>ue(u.clone()))}var n4=function(r,t){var e={};for(var o in r)Object.prototype.hasOwnProperty.call(r,o)&&t.indexOf(o)<0&&(e[o]=r[o]);if(r!=null&&typeof Object.getOwnPropertySymbols=="function")for(var n=0,o=Object.getOwnPropertySymbols(r);n<o.length;n++)t.indexOf(o[n])<0&&Object.prototype.propertyIsEnumerable.call(r,o[n])&&(e[o[n]]=r[o[n]]);return e};var xx=class extends So{constructor(t){if(t.unroll)throw new yt("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(t.cell))throw new yt("It is not possible at the moment to stack convolutional cells.");super(t),this.inputSpec=[new Zt({ndim:5})]}call(t,e){return M(()=>{if(this.cell.dropoutMask!=null&&(xt(this.cell.dropoutMask),this.cell.dropoutMask=null),this.cell.recurrentDropoutMask!=null&&(xt(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),e&&e.constants)throw new L("ConvRNN2D cell does not support constants");let o=e==null?null:e.mask,n=e==null?null:e.training,s=e==null?null:e.initialState;return super.call(t,{mask:o,training:n,initialState:s})})}computeOutputShape(t){let e=this.computeSingleOutputShape(t);return this.returnSequences||(e=[e[0],...e.slice(2)]),this.returnState&&(e=[e,...Array(2).fill([t[0],...e.slice(-3)])]),e}getInitialState(t){return M(()=>{let{stateSize:e}=this.cell,o=t.shape,n=this.computeSingleOutputShape(o),s=[n[0],...n.slice(2)],i=ne(s);return Array.isArray(e)?Array(e.length).fill(i):[i]})}resetStates(t,e=!1){M(()=>{if(!this.stateful)throw new qr("Cannot call resetStates() on an RNN Layer that is not stateful.");let o=this.inputSpec[0].shape,n=this.computeSingleOutputShape(o),s=[n[0],...n.slice(2)];if(o[0]==null)throw new L("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(this.getStates()==null)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>ne(s)):this.states_=[ne(s)];else if(t==null)xt(this.states_),this.keptStates!=null&&(xt(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>ne(s)):this.states_[0]=ne(s);else{if(Array.isArray(t)||(t=[t]),t.length!==this.states_.length)throw new L(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${t.length} state value(s). Input received: ${t}`);e?this.keptStates.push(this.states_.slice()):xt(this.states_);for(let a=0;a<this.states_.length;++a){let l=t[a],u=s;if(!y.arraysEqual(l.shape,u))throw new L(`State ${a} is incompatible with layer ${this.name}: expected shape=${u}, received shape=${l.shape}`);this.states_[a]=l}}this.states_=this.states_.map(a=>ue(a.clone()))})}computeSingleOutputShape(t){let{dataFormat:e,filters:o,kernelSize:n,padding:s,strides:i,dilationRate:a}=this.cell,l=e==="channelsFirst",u=t[l?3:2],c=t[l?4:3],p=Xr(u,n[0],s,i[0],a[0]),m=Xr(c,n[1],s,i[1],a[1]);return[...t.slice(0,2),...l?[o,p,m]:[p,m,o]]}};xx.className="ConvRNN2D";var kp=class extends Pa{constructor(t){let{filters:e,kernelSize:o,strides:n,padding:s,dataFormat:i,dilationRate:a}=t;super(Object.assign(Object.assign({},t),{units:e})),this.filters=e,$e(this.filters,"filters"),this.kernelSize=Ra(o,2,"kernelSize"),this.kernelSize.forEach(l=>$e(l,"kernelSize")),this.strides=Ra(n||1,2,"strides"),this.strides.forEach(l=>$e(l,"strides")),this.padding=s||"valid",Fr(this.padding),this.dataFormat=i||"channelsLast",ce(this.dataFormat),this.dilationRate=Ra(a||1,2,"dilationRate"),this.dilationRate.forEach(l=>$e(l,"dilationRate"))}build(t){var e;t=Et(t);let o=this.dataFormat==="channelsFirst"?1:t.length-1;if(t[o]==null)throw new L(`The channel dimension of the input should be defined. Found ${t[o]}`);let n=t[o],s=4,i=this.kernelSize.concat([n,this.filters*s]);this.kernel=this.addWeight("kernel",i,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);let a=this.kernelSize.concat([this.filters,this.filters*s]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",a,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let l;if(this.unitForgetBias){let u=this.biasInitializer,c=this.filters;l=new(e=class extends Pr{apply(m,f){let h=u.apply([c]),g=Be([c]),d=u.apply([c*2]);return lp([h,g,d])}},e.className="CustomInit",e)}else l=this.biasInitializer;this.bias=this.addWeight("bias",[this.filters*s],null,l,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(t,e){return M(()=>{if(t.length!==3)throw new L(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${t.length}.`);let o=e.training||!1,n=t[0],s=t[1],i=t[2],a=4;0<this.dropout&&this.dropout<1&&this.dropoutMask==null&&(this.dropoutMask=oi({ones:()=>Ke(n),rate:this.dropout,training:o,count:a,dropoutFunc:this.dropoutFunc}));let l=this.dropoutMask,u=(et,rt,at)=>!rt||!rt[at]?et:A(rt[at],et),c=u(n,l,0),p=u(n,l,1),m=u(n,l,2),f=u(n,l,3);0<this.recurrentDropout&&this.recurrentDropout<1&&this.recurrentDropoutMask==null&&(this.recurrentDropoutMask=oi({ones:()=>Ke(s),rate:this.recurrentDropout,training:o,count:a,dropoutFunc:this.dropoutFunc}));let h=this.recurrentDropoutMask,g=u(s,h,0),d=u(s,h,1),x=u(s,h,2),b=u(s,h,3),S=3,[w,T,$,R]=Ge(this.kernel.read(),a,S),[F,O,P,B]=this.useBias?Ge(this.bias.read(),a):[null,null,null,null];c=this.inputConv(c,w,F,this.padding),p=this.inputConv(p,T,O,this.padding),m=this.inputConv(m,$,P,this.padding),f=this.inputConv(f,R,B,this.padding);let[V,G,H,W]=Ge(this.recurrentKernel.read(),a,S);g=this.recurrentConv(g,V),d=this.recurrentConv(d,G),x=this.recurrentConv(x,H),b=this.recurrentConv(b,W);let j=this.recurrentActivation.apply(U(c,g)),Z=this.recurrentActivation.apply(U(p,d)),q=U(A(Z,i),A(j,this.activation.apply(U(m,x)))),J=A(this.recurrentActivation.apply(U(f,b)),this.activation.apply(q));return[J,J,q]})}getConfig(){let t=super.getConfig(),{units:e}=t,o=n4(t,["units"]),n={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign(Object.assign({},o),n)}inputConv(t,e,o,n){let s=Ur(t,e,this.strides,n||"valid",this.dataFormat==="channelsFirst"?"NCHW":"NHWC",this.dilationRate);return o?Lr(s,o,this.dataFormat):s}recurrentConv(t,e){return Ur(t,e,1,"same",this.dataFormat==="channelsFirst"?"NCHW":"NHWC")}};kp.className="ConvLSTM2DCell";K.registerClass(kp);var wf=class extends xx{constructor(t){let e=new kp(t);super(Object.assign(Object.assign({},t),{cell:e}))}static fromConfig(t,e){return new t(e)}};wf.className="ConvLSTM2D";K.registerClass(wf);var Ep=class extends wt{constructor(t){super(t),this.rate=Math.max(Math.min(t.rate,1),0),this.noiseShape=t.noiseShape,this.seed=t.seed,this.supportsMasking=!0}getNoiseShape(t){if(this.noiseShape==null)return this.noiseShape;let e=t.shape,o=[];for(let n=0;n<this.noiseShape.length;++n)o.push(this.noiseShape[n]==null?e[n]:this.noiseShape[n]);return o}call(t,e){return M(()=>{this.invokeCallHook(t,e);let o=gt(t);if(0<this.rate&&this.rate<1){let n=e.training==null?!1:e.training,s=this.getNoiseShape(o);return Aa(()=>Rg(o,this.rate,s,this.seed),()=>o,n)}return t})}getConfig(){let t={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},e=super.getConfig();return Object.assign(t,e),t}dispose(){return super.dispose()}};Ep.className="Dropout";K.registerClass(Ep);var Cf=class extends Ep{constructor(t){super(t),this.inputSpec=[{ndim:3}]}getNoiseShape(t){let e=t.shape;return[e[0],1,e[2]]}};Cf.className="SpatialDropout1D";K.registerClass(Cf);var Sf=class extends wt{constructor(t){if(super(t),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",t.batchInputShape==null&&t.inputShape==null&&t.inputDim!=null){let e=null;t.batchSize!=null&&(e=t.batchSize),this.batchInputShape=[e,t.inputDim]}this.units=t.units,$e(this.units,"units"),this.activation=an(t.activation),t.useBias!=null&&(this.useBias=t.useBias),this.kernelInitializer=jt(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=jt(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=ye(t.kernelConstraint),this.biasConstraint=ye(t.biasConstraint),this.kernelRegularizer=Jt(t.kernelRegularizer),this.biasRegularizer=Jt(t.biasRegularizer),this.activityRegularizer=Jt(t.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(t){t=Et(t);let e=t[t.length-1];this.kernel==null&&(this.kernel=this.addWeight("kernel",[e,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:e}}],this.built=!0}computeOutputShape(t){t=Et(t);let e=t.slice();return e[e.length-1]=this.units,e}call(t,e){return M(()=>{this.invokeCallHook(t,e);let o=gt(t),n=vg(this.activation.getClassName()),s;return n!=null?s=Mo(o,this.kernel.read(),n,this.bias?this.bias.read():null):(s=Mo(o,this.kernel.read()),this.bias!=null&&(s=Lr(s,this.bias.read())),this.activation!=null&&(s=this.activation.apply(s))),s})}getConfig(){let t={units:this.units,activation:sn(this.activation),useBias:this.useBias,kernelInitializer:se(this.kernelInitializer),biasInitializer:se(this.biasInitializer),kernelRegularizer:Ht(this.kernelRegularizer),biasRegularizer:Ht(this.biasRegularizer),activityRegularizer:Ht(this.activityRegularizer),kernelConstraint:xe(this.kernelConstraint),biasConstraint:xe(this.biasConstraint)},e=super.getConfig();return Object.assign(t,e),t}};Sf.className="Dense";K.registerClass(Sf);var Nf=class extends wt{constructor(t){t=t||{},super(t),this.inputSpec=[{minNDim:3}],this.dataFormat=t.dataFormat}computeOutputShape(t){t=Et(t);for(let e of t.slice(1))if(e==null)throw new L(`The shape of the input to "Flatten" is not fully defined (got ${t.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[t[0],zo(t,1)]}call(t,e){return M(()=>{this.invokeCallHook(t,e);let o=gt(t);if(this.dataFormat==="channelsFirst"&&o.rank>1){let n=[0];for(let s=2;s<o.rank;++s)n.push(s);n.push(1),o=Rt(o,n)}return Fk(o)})}getConfig(){let t={};this.dataFormat!=null&&(t.dataFormat=this.dataFormat);let e=super.getConfig();return Object.assign(t,e),t}};Nf.className="Flatten";K.registerClass(Nf);var vf=class extends wt{constructor(t){super(t),this.supportsMasking=!0,this.activation=an(t.activation)}call(t,e){return M(()=>{this.invokeCallHook(t,e);let o=gt(t);return this.activation.apply(o)})}getConfig(){let t={activation:sn(this.activation)},e=super.getConfig();return Object.assign(t,e),t}};vf.className="Activation";K.registerClass(vf);var Tf=class extends wt{constructor(t){super(t),this.n=t.n,this.inputSpec=[{ndim:2}]}computeOutputShape(t){return[t[0],this.n,t[1]]}call(t,e){return M(()=>(t=gt(t),Dk(t,this.n)))}getConfig(){let t={n:this.n},e=super.getConfig();return Object.assign(t,e),t}};Tf.className="RepeatVector";K.registerClass(Tf);var If=class extends wt{constructor(t){super(t),this.targetShape=t.targetShape;for(let e=0;e<this.targetShape.length;++e)this.isUnknown(this.targetShape[e])&&(this.targetShape[e]=null)}isUnknown(t){return t<0||t==null}fixUnknownDimension(t,e){let o="Total size of new array must be unchanged.",n=e.slice(),s=1,i=null;for(let l=0;l<n.length;++l){let u=n[l];if(this.isUnknown(u))if(i===null)i=l;else throw new L("Can only specifiy one unknown dimension.");else s*=u}let a=zo(t);if(i!==null){if(s===0||a%s!==0)throw new L(o);n[i]=a/s}else if(a!==s)throw new L(o);return n}computeOutputShape(t){let e=!1;for(let o=0;o<t.length;++o)if(this.isUnknown(t[o])){e=!0;break}return e?t.slice(0,1).concat(this.targetShape):t.slice(0,1).concat(this.fixUnknownDimension(t.slice(1),this.targetShape))}call(t,e){return M(()=>{this.invokeCallHook(t,e);let o=gt(t),n=o.shape,s=n.slice(0,1).concat(this.fixUnknownDimension(n.slice(1),this.targetShape));return D(o,s)})}getConfig(){let t={targetShape:this.targetShape},e=super.getConfig();return Object.assign(t,e),t}};If.className="Reshape";K.registerClass(If);var kf=class extends wt{constructor(t){if(super(t),t.dims==null)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(t.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${t.dims} instead.`);let e=_r(1,t.dims.length+1);if(!y.arraysEqual(t.dims.slice().sort(),e))throw new Error("Invalid permutation `dims`: "+JSON.stringify(t.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=t.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new Zt({ndim:this.dims.length+1})]}computeOutputShape(t){t=Et(t);let e=t.slice();return this.dims.forEach((o,n)=>{e[n+1]=t[o]}),e}call(t,e){return Rt(gt(t),this.dimsIncludingBatch)}getConfig(){let t={dims:this.dims},e=super.getConfig();return Object.assign(t,e),t}};kf.className="Permute";K.registerClass(kf);var Ef=class extends wt{constructor(t){super(t??{}),this.supportsMasking=!0,t!=null?this.maskValue=t.maskValue==null?0:t.maskValue:this.maskValue=0}computeOutputShape(t){return t}getConfig(){let t=super.getConfig(),e={maskValue:this.maskValue};return Object.assign(e,t),e}computeMask(t,e){let o=gt(t),n=-1;return yl(tn(o,this.maskValue),n)}call(t,e){return M(()=>{this.invokeCallHook(t,e);let o=gt(t),n=-1,s=!0,i=yl(tn(o,this.maskValue),n,s);return A(o,X(i,o.dtype))})}};Ef.className="Masking";K.registerClass(Ef);var $f=class extends wt{constructor(t){if(super(t),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",t.batchInputShape==null&&t.inputShape==null){let e=null;t.batchSize!=null&&(e=t.batchSize),t.inputLength==null?this.batchInputShape=[e,null]:this.batchInputShape=[e].concat(Yt(t.inputLength))}this.inputDim=t.inputDim,$e(this.inputDim,"inputDim"),this.outputDim=t.outputDim,$e(this.outputDim,"outputDim"),this.embeddingsInitializer=jt(t.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=Jt(t.embeddingsRegularizer),this.activityRegularizer=Jt(t.activityRegularizer),this.embeddingsConstraint=ye(t.embeddingsConstraint),this.maskZero=t.maskZero,this.supportsMasking=t.maskZero,this.inputLength=t.inputLength}build(t){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(t){}computeMask(t,e){return M(()=>this.maskZero?(t=gt(t),tn(t,dt(t))):null)}computeOutputShape(t){if(t=Et(t),this.inputLength==null)return[...t,this.outputDim];let e=Yt(this.inputLength);if(e.length!==t.length-1)throw new L(`"inputLength" is ${this.inputLength}, but received input shape has shape ${t}`);{let o=0;for(let n=0;n<e.length;++n){let s=e[n],i=t[n+1];if(s!=null&&i!=null&&s!==i)throw new L(`"inputLength" is ${this.inputLength}, but received input shape has shape ${t}`);s==null&&(e[o]=i),o++}}return[t[0],...e,this.outputDim]}call(t,e){return M(()=>{this.invokeCallHook(t,e);let o=gt(t);o.dtype!=="int32"&&(o=Nr(o,"int32"));let n=Dg(this.embeddings.read(),D(o,[o.size]));return D(n,Et(this.computeOutputShape(o.shape)))})}getConfig(){let t={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:se(this.embeddingsInitializer),embeddingsRegularizer:Ht(this.embeddingsRegularizer),activityRegularizer:Ht(this.activityRegularizer),embeddingsConstraint:xe(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},e=super.getConfig();return Object.assign(t,e),t}};$f.className="Embedding";K.registerClass($f);var ni=class extends wt{constructor(t){super(t||{}),this.supportsMasking=!0}mergeFunction(t){throw new yt}computeElementwiseOpOutputShape(t,e){if(t==null||e==null)return null;if(t.length<e.length)return this.computeElementwiseOpOutputShape(e,t);if(e.length===0)return t;let o=t.slice(0,t.length-e.length);for(let n=0;n<e.length;++n){let s=t[t.length-e.length+n],i=e[n];if(s==null||i==null||s<0||i<0)o.push(null);else if(s===1)o.push(i);else if(i===1)o.push(s);else{if(s!==i)throw new L("Operands could not be broadcast together with shapes "+JSON.stringify(t)+" "+JSON.stringify(e));o.push(s)}}return o}build(t){if(Array.isArray(t)&&!Array.isArray(t[0])&&(t=[Et(t)]),t=t,t.length<2)throw new L(`A merge layer should be called on an Array of at least 2 inputs. Got ${t.length} input(s).`);let e=[];for(let s of t)s!=null&&s[0]!==null&&e.push(s[0]);if(e=Po(e),e.length>1)throw new L(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(t)}.`);let o=t[0]==null?null:t[0].slice(1);for(let s=1;s<t.length;++s){let i=t[s]==null?null:t[s].slice(1);o=this.computeElementwiseOpOutputShape(o,i)}let n=t.map(s=>s.length);t.indexOf(null)===-1&&Po(n).length===1?this.reshapeRequired=!1:this.reshapeRequired=!0}call(t,e){return M(()=>{if(t=t,this.reshapeRequired){let o=[],n=t.map(s=>s.rank);if(n.indexOf(null)===-1){let s=nn(n);for(let i of t){let a=i.rank;for(let l=0;l<s-a;++l)i=Qs(i,1);o.push(i)}return this.mergeFunction(o)}else{let s=!1;for(let l of t){let u=l.rank;if(u==null){let c=l.shape,p=c[0],m=c.slice(1).concat([p]),f=D(l,[p].concat(zo(c.slice(1))));f=Rt(f,[1,0]),f=D(f,m),o.push(f),s=!0}else if(u>1){let c=_r(1,u).concat([0]);o.push(Rt(l,c)),s=!0}else o.push(l)}let i=this.mergeFunction(o),a=i.rank;if(s){if(a==null){let l=i.shape,u=l.length,c=l[u-1],p=[c].concat(l.slice(0,l.length-1));i=D(Rt(D(i,[-1,c]),[1,0]),p)}else if(a>1){let l=[a-1].concat(_r(0,a-1));i=Rt(i,l)}}return i}}else return this.mergeFunction(t)})}computeOutputShape(t){t=t;let e;t[0]==null?e=null:e=t[0].slice(1);for(let n=1;n<t.length;++n){let s=t[n]==null?null:t[n].slice(1);e=this.computeElementwiseOpOutputShape(e,s)}let o=[];for(let n of t)n!=null&&n[0]!==null&&o.push(n[0]);return o=Po(o),o.length===1?e=o.concat(e):e=[null].concat(e),e}computeMask(t,e){return M(()=>{if(e==null)return null;if(!Array.isArray(e))throw new L("`mask` should be an Array");if(!Array.isArray(t))throw new L("`inputs` should be an Array");if(e.length!==t.length)throw new L(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${t.length} vs ${e.length})`);if(e.every(n=>n==null))return null;e=e.map(n=>n==null?n:Ie(n,0));let o=e[0];for(let n=1;n<e.length-1;++n)o=mr(o,e[n]);return o})}},Df=class extends ni{constructor(t){super(t)}mergeFunction(t){return M(()=>{let e=t[0].clone();for(let o=1;o<t.length;++o)e=U(e,t[o]);return e})}};Df.className="Add";K.registerClass(Df);var Rf=class extends ni{constructor(t){super(t)}mergeFunction(t){return M(()=>{let e=t[0].clone();for(let o=1;o<t.length;++o)e=A(e,t[o]);return e})}};Rf.className="Multiply";K.registerClass(Rf);var Ff=class extends ni{constructor(t){super(t)}mergeFunction(t){return M(()=>{let e=t[0].clone();for(let o=1;o<t.length;++o)e=U(e,t[o]);return A(1/t.length,e)})}};Ff.className="Average";K.registerClass(Ff);var _f=class extends ni{constructor(t){super(t)}mergeFunction(t){return M(()=>{let e=t[0];for(let o=1;o<t.length;++o)e=Kr(e,t[o]);return e})}};_f.className="Maximum";K.registerClass(_f);var Of=class extends ni{constructor(t){super(t)}mergeFunction(t){return M(()=>{let e=t[0];for(let o=1;o<t.length;++o)e=wo(e,t[o]);return e})}};Of.className="Minimum";K.registerClass(Of);var Lf=class extends ni{constructor(t){super(t),this.DEFAULT_AXIS=-1,t==null&&(t={}),this.axis=t.axis==null?this.DEFAULT_AXIS:t.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(t){if(!(Array.isArray(t)&&Array.isArray(t[0]))||t.length===1)throw new L("A `Concatenate` layer should be called on a list of at least 2 inputs");t=t;let e=!0;for(let n of t)if(n!=null){e=!1;break}if(e)return;let o=[];for(let n=0;n<t.length;++n){let s=t[n].slice();s.splice(this.axis,1);let i=!1;for(let a of o)if(y.arraysEqual(a,s)){i=!0;break}i||o.push(s)}if(o.length>1)throw new L("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(t))}mergeFunction(t){return M(()=>lp(t,this.axis))}computeOutputShape(t){if(!(Array.isArray(t)&&Array.isArray(t[0])))throw new L("A `Concatenate` layer should be called on a list of inputs.");let e=t,o=e[0].slice(),n=this.axis<0?o.length+this.axis:this.axis;for(let s of e.slice(1)){if(o[n]==null||s[n]==null){o[n]=null;break}o[n]+=s[n]}return o}computeMask(t,e){if(e==null)return null;if(!Array.isArray(e))throw new L("`mask` should be an array for Concatenate");if(!Array.isArray(t))throw new L("`inputs` should be an array for Concatenate");if(e.length!==t.length)throw new L(`Mismatch in the length of mask (${e.length}) and the legnth of inputs (${t.length})`);return M(()=>{let o=!0;if(e.forEach(i=>{if(i!=null){o=!1;return}}),o)return null;let n=[];for(let i=0;i<t.length;++i)e[i]==null?n.push(X(Ke(t[i]),"bool")):e[i].rank<t[i].rank?n.push(Ie(e[i],-1)):n.push(e[i]);let s=Vt(n,this.axis);return Ec(s,-1,!1)})}getConfig(){let t={axis:this.axis},e=super.getConfig();return Object.assign(t,e),t}};Lf.className="Concatenate";K.registerClass(Lf);function Af(r,t){for(;r<0;)r+=t;return r}function s4(r,t,e){if(r.shape.length>3||t.shape.length>3)throw new yt("batchDot is not implemented for tensors of 4D or higher rank yet");if(y.assert(r.shape.length>=2,()=>`batchDot requires the rank of x to be >= 2, but got ${r.shape.length}`),y.assert(r.shape.length>=2,()=>`batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`),typeof e=="number"&&(e=[e,e]),r.dtype==="complex64"||t.dtype==="complex64")throw new yt("batchDot is not implemented for complex64-type Tensors yet.");let o=r.shape.length,n=t.shape.length;e==null&&(e=[o-1,n-2]);let s=e;return M(()=>{let i;if(o>n){i=o-n;let l=[];for(let u=0;u<i;++u)l.push(1);t=D(t,t.shape.concat(l))}else if(n>o){i=n-o;let l=[];for(let u=0;u<i;++u)l.push(1);r=D(r,r.shape.concat(l))}else i=0;let a;if(r.shape.length===2&&t.shape.length===2)s[0]===s[1]?a=nt(A(r,t),s[0]):a=nt(A(Rt(r,[1,0]),t),s[1]);else{let l=s[0]!==r.shape.length-1,u=s[1]===t.shape.length-1;a=Dt(r,t,l,u)}if(i>0){let l;o>n?l=o+n-3:l=o-1;let u=[];for(let c=l;c<l+i;++c)u.push(c);a=ao(a,u)}return a.shape.length===1&&(a=Ie(a,1)),a})}var Pf=class extends ni{constructor(t){super(t),this.axes=t.axes,this.normalize=t.normalize==null?!1:t.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(t){y.assert(Array.isArray(t)&&t.length===2&&Array.isArray(t[0])&&Array.isArray(t[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");let e=t[0],o=t[1];if(e.length>3||o.length>3)throw new yt("Dot layer does not support tensors of 4D or higher rank yet.");let n=this.interpretAxes(e,o);if(e[n[0]]!==o[n[1]])throw new L(`Dimension incompatibility: ${e[n[0]]} !== ${o[n[1]]}`)}mergeFunction(t){if(t.length!==2)throw new L(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${t.length} input(s).`);let e=t[0],o=t[1],n;return Array.isArray(this.axes)?n=this.axes.map((s,i)=>Af(s,t[i].shape.length)):n=[Af(this.axes,e.shape.length),Af(this.axes,o.shape.length)],this.normalize&&(e=Ym(e,n[0]),o=Ym(o,n[1])),s4(e,o,n)}interpretAxes(t,e){let o;return Array.isArray(this.axes)?o=this.axes:o=[Af(this.axes,t.length),Af(this.axes,e.length)],o}computeOutputShape(t){y.assert(Array.isArray(t)&&t.length===2&&Array.isArray(t[0])&&Array.isArray(t[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");let e=t[0].slice(),o=t[1].slice();if(e.length>3||o.length>3)throw new yt("Dot layer does not support tensors of 4D or higher rank yet.");let n=this.interpretAxes(e,o);e.splice(n[0],1),o.splice(n[1],1),o.splice(0,1);let s=e.concat(o);return s.length===1&&s.push(1),s}computeMask(t,e){return null}getConfig(){let t={axes:this.axes,normalize:this.normalize},e=super.getConfig();return Object.assign(t,e),t}};Pf.className="Dot";K.registerClass(Pf);var zf=class extends wt{constructor(t){super(t),this.supportsMasking=!0,this.stddev=t.stddev}computeOutputShape(t){return t}getConfig(){let t=super.getConfig(),e={stddev:this.stddev};return Object.assign(e,t),e}call(t,e){return M(()=>{this.invokeCallHook(t,e);let o=gt(t);return Aa(()=>U(up(o.shape,0,this.stddev),o),()=>o,e.training||!1)})}};zf.className="GaussianNoise";K.registerClass(zf);var Mf=class extends wt{constructor(t){super(t),this.supportsMasking=!0,this.rate=t.rate}computeOutputShape(t){return t}getConfig(){let t=super.getConfig(),e={rate:this.rate};return Object.assign(e,t),e}call(t,e){return M(()=>{this.invokeCallHook(t,e);let o=gt(t);return this.rate>0&&this.rate<1?Aa(()=>{let s=Math.sqrt(this.rate/(1-this.rate));return A(o,up(o.shape,1,s))},()=>o,e.training||!1):o})}};Mf.className="GaussianDropout";K.registerClass(Mf);var Bf=class extends wt{constructor(t){super(t),this.supportsMasking=!0,this.rate=t.rate,this.noiseShape=t.noiseShape}_getNoiseShape(t){return this.noiseShape||gt(t).shape}computeOutputShape(t){return t}getConfig(){let t=super.getConfig(),e={rate:this.rate};return Object.assign(e,t),e}call(t,e){return M(()=>{if(this.rate<1&&this.rate>0){let o=this._getNoiseShape(t);return Aa(()=>{let s=gt(t),i=1.6732632423543772,a=1.0507009873554805,l=-i*a,u=Dr(io(o),this.rate);u=Nr(u,"float32");let c=((1-this.rate)*(1+this.rate*l**2))**-.5,p=-c*l*this.rate,m=U(A(s,u),A(U(u,-1),l));return U(A(m,c),p)},()=>gt(t),e.training||!1)}return t})}};Bf.className="AlphaDropout";K.registerClass(Bf);function Vf(r,t,e,o,n,s=.001){let i;if(r.rank===2)i=hd(r,t,e,o,n,s);else if(r.rank===3)i=dd(r,t,e,o,n,s);else if(r.rank===4)i=gd(r,t,e,o,n,s);else throw new yt(`batchNormalization is not implemented for array of rank ${r.rank} yet`);return i}function i4(r,t,e,o,n=.001){return M(()=>{let s=Sl(r,o),i=s.mean,a=s.variance;return[Vf(r,i,a,e,t,n),i,a]})}function a4(r,t,e,o,n=.001){return M(()=>{let s=Sl(r,o),i=s.mean,a=s.variance,l=[];for(let h of _r(0,r.rank))o.indexOf(h)!==-1?l.push(1):l.push(r.shape[h]);let u=D(i,l),c=D(a,l),p=t==null?null:D(t,l),m=e==null?null:D(e,l);return[Vf(r,u,c,m,p,n),i,a]})}function l4(r,t,e,o,n=.001){return y.arraysEqual(o.slice().sort(),_r(0,r.rank-1))?i4(r,t,e,o,n):a4(r,t,e,o,n)}var Gf=class extends wt{constructor(t){t==null&&(t={}),super(t),this.supportsMasking=!0,this.axis=t.axis==null?-1:t.axis,this.momentum=t.momentum==null?.99:t.momentum,this.epsilon=t.epsilon==null?.001:t.epsilon,this.center=t.center==null?!0:t.center,this.scale=t.scale==null?!0:t.scale,this.betaInitializer=jt(t.betaInitializer||"zeros"),this.gammaInitializer=jt(t.gammaInitializer||"ones"),this.movingMeanInitializer=jt(t.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=jt(t.movingVarianceInitializer||"ones"),this.betaConstraint=ye(t.betaConstraint),this.gammaConstraint=ye(t.gammaConstraint),this.betaRegularizer=Jt(t.betaRegularizer),this.gammaRegularizer=Jt(t.gammaRegularizer)}build(t){t=Et(t);let e=this.axis>=0?this.axis:this.axis+t.length,o=t[e];if(o==null)throw new L(`Axis ${e} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(t)}.`);this.inputSpec=[new Zt({ndim:t.length,axes:{[e]:o}})];let n=[o];this.scale&&(this.gamma=this.addWeight("gamma",n,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",n,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",n,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",n,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(t,e){return M(()=>{let o=e.training==null?!1:e.training,n=gt(t),s=n.shape,i=s.length,a=_r(0,i),l=this.axis>=0?this.axis:this.axis+i;a.splice(l,1);let u=Oo(1,i);u[l]=s[l];let c=a.slice();c.sort();let p=!y.arraysEqual(c,_r(0,i).slice(0,i-1)),m=()=>{if(p){let b=D(this.movingMean.read(),u),S=D(this.movingVariance.read(),u),w=this.center?D(this.beta.read(),u):null,T=this.scale?D(this.gamma.read(),u):null;return Vf(n,b,S,w,T,this.epsilon)}else return Vf(n,this.movingMean.read(),this.movingVariance.read(),this.beta==null?null:this.beta.read(),this.gamma==null?null:this.gamma.read(),this.epsilon)};if(!o)return m();let[f,h,g]=l4(n,this.gamma.read(),this.beta.read(),a,this.epsilon),d=(b,S,w)=>{M(()=>{let T=1-w,$=b.read(),R=A(tt($,S),T);b.write(tt($,R))})};return(()=>{d(this.movingMean,h,this.momentum),d(this.movingVariance,g,this.momentum)})(),f})}getConfig(){let t={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:se(this.betaInitializer),gammaInitializer:se(this.gammaInitializer),movingMeanInitializer:se(this.movingMeanInitializer),movingVarianceInitializer:se(this.movingVarianceInitializer),betaRegularizer:Ht(this.betaRegularizer),gammaRegularizer:Ht(this.gammaRegularizer),betaConstraint:xe(this.betaConstraint),gammaConstraint:xe(this.gammaConstraint)},e=super.getConfig();return Object.assign(t,e),t}};Gf.className="BatchNormalization";K.registerClass(Gf);var Wf=class extends wt{constructor(t){if(t==null&&(t={}),super(t),this.axis=t.axis==null?-1:t.axis,typeof this.axis=="number"){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else if(Array.isArray(this.axis)){for(let e of this.axis)if(!Number.isInteger(e))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}else throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);this.epsilon=t.epsilon==null?.001:t.epsilon,this.center=t.center==null?!0:t.center,this.scale=t.scale==null?!0:t.scale,this.betaInitializer=jt(t.betaInitializer||"zeros"),this.gammaInitializer=jt(t.gammaInitializer||"ones"),this.betaRegularizer=Jt(t.betaRegularizer),this.gammaRegularizer=Jt(t.gammaRegularizer),this.supportsMasking=!0}build(t){t=Et(t);let e=t.length;typeof this.axis=="number"&&(this.axis=[this.axis]);for(let s=0;s<this.axis.length;++s)this.axis[s]<0&&(this.axis[s]+=e);for(let s of this.axis)if(s<0||s>=e)throw new Error(`Invalid axis: ${s}`);if(this.axis.length!==Po(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);let o=this.axis.map(s=>t[s]),n=!0;this.scale?this.gamma=this.addWeight("gamma",o,"float32",this.gammaInitializer,this.gammaRegularizer,n):this.gamma=null,this.center?this.beta=this.addWeight("beta",o,"float32",this.betaInitializer,this.betaRegularizer,n):this.beta=null,this.built=!0}call(t,e){let o=gt(t),n=o.shape,s=n.length;return M(()=>{let{mean:a,variance:l}=Sl(o,this.axis,!0),u=Oo(1,s);for(let g of this.axis)u[g]=n[g];let c=g=>g!=null&&g.shape.length!==s?D(g,u):g,p=this.scale?c(this.gamma.read()):null,m=this.center?c(this.beta.read()):null,f=[],h=[];for(let g=0;g<s;++g)this.axis.indexOf(g)!==-1?(f.push(n[g]),h.push(1)):(f.push(1),h.push(n[g]));return a=sr(a,f),l=sr(l,f),p!=null&&(p=sr(p,h)),m!=null&&(m=sr(m,h)),Vf(o,a,l,m,p,this.epsilon)})}getConfig(){let t={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:se(this.betaInitializer),gammaInitializer:se(this.gammaInitializer),betaRegularizer:Ht(this.betaRegularizer),gammaRegularizer:Ht(this.gammaRegularizer)},e=super.getConfig();return Object.assign(t,e),t}};Wf.className="LayerNormalization";K.registerClass(Wf);function u4(r,t,e){return M(()=>{if(r.rank!==4)throw new L(`temporalPadding expects input tensor to be 4-D, but received a ${r.rank}-D tensor.`);if(t==null&&(t=[[1,1],[1,1]]),t.length!==2||t[0].length!==2||t[1].length!==2)throw new L("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(e==null&&(e=Or()),e!=="channelsLast"&&e!=="channelsFirst")throw new L(`Unknown data format: ${e}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let o;return e==="channelsFirst"?o=[[0,0],[0,0],t[0],t[1]]:o=[[0,0],t[0],t[1],[0,0]],Rr(r,o)})}var Uf=class extends wt{constructor(t){if(t==null&&(t={}),super(t),this.dataFormat=t.dataFormat==null?Or():t.dataFormat,t.padding==null)this.padding=[[1,1],[1,1]];else if(typeof t.padding=="number")this.padding=[[t.padding,t.padding],[t.padding,t.padding]];else{if(t.padding=t.padding,t.padding.length!==2)throw new L(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${t.padding.length} array.`);let e,o;if(typeof t.padding[0]=="number")e=[t.padding[0],t.padding[0]],o=[t.padding[1],t.padding[1]];else{if(t.padding=t.padding,t.padding[0].length!==2)throw new L(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${t.padding[0].length} array.`);if(e=t.padding[0],t.padding[1].length!==2)throw new L(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${t.padding[1].length} array.`);o=t.padding[1]}this.padding=[e,o]}this.inputSpec=[new Zt({ndim:4})]}computeOutputShape(t){t=Et(t);let e,o;return this.dataFormat==="channelsFirst"?(t[2]!=null&&t[2]>=0?e=t[2]+this.padding[0][0]+this.padding[0][1]:e=null,t[3]!=null&&t[3]>=0?o=t[3]+this.padding[1][0]+this.padding[1][1]:o=null,[t[0],t[1],e,o]):(t[1]!=null&&t[1]>=0?e=t[1]+this.padding[0][0]+this.padding[0][1]:e=null,t[2]!=null&&t[2]>=0?o=t[2]+this.padding[1][0]+this.padding[1][1]:o=null,[t[0],e,o,t[3]])}call(t,e){return M(()=>u4(gt(t),this.padding,this.dataFormat))}getConfig(){let t={padding:this.padding,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}};Uf.className="ZeroPadding2D";K.registerClass(Uf);function Nx(r,t,e,o,n,s){return M(()=>{ce(n),E0(s),Fr(o),e==null&&(e=[1,1]),o==null&&(o="valid"),n==null&&(n=Or()),s==null&&(s="max"),r=df(r,n);let i,a=o==="same"?"same":"valid";return s==="max"?i=Ca(r,t,e,a):i=ha(r,t,e,a),n==="channelsFirst"&&(i=Rt(i,[0,3,1,2])),i})}function fE(r,t,e,o,n,s){return M(()=>{ce(n),E0(s),Fr(o),e==null&&(e=[1,1,1]),o==null&&(o="valid"),n==null&&(n=Or()),s==null&&(s="max"),r=H0(r,n);let i,a=o==="same"?"same":"valid";return s==="max"?i=Bd(r,t,e,a):i=fd(r,t,e,a),n==="channelsFirst"&&(i=Rt(i,[0,4,1,2,3])),i})}var yx=class extends wt{constructor(t){if(t.poolSize==null&&(t.poolSize=2),super(t),typeof t.poolSize=="number")this.poolSize=[t.poolSize];else if(Array.isArray(t.poolSize)&&t.poolSize.length===1&&typeof t.poolSize[0]=="number")this.poolSize=t.poolSize;else throw new L(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(t.poolSize)}`);if($e(this.poolSize,"poolSize"),t.strides==null)this.strides=this.poolSize;else if(typeof t.strides=="number")this.strides=[t.strides];else if(Array.isArray(t.strides)&&t.strides.length===1&&typeof t.strides[0]=="number")this.strides=t.strides;else throw new L(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(t.strides)}`);$e(this.strides,"strides"),this.padding=t.padding==null?"valid":t.padding,Fr(this.padding),this.inputSpec=[new Zt({ndim:3})]}computeOutputShape(t){t=Et(t);let e=Xr(t[1],this.poolSize[0],this.padding,this.strides[0]);return[t[0],e,t[2]]}call(t,e){return M(()=>{this.invokeCallHook(t,e),t=Qs(gt(t),2);let o=this.poolingFunction(gt(t),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return ao(o,[2])})}getConfig(){let t={poolSize:this.poolSize,padding:this.padding,strides:this.strides},e=super.getConfig();return Object.assign(t,e),t}},Hf=class extends yx{constructor(t){super(t)}poolingFunction(t,e,o,n,s){return ce(s),Fr(n),Nx(t,e,o,n,s,"max")}};Hf.className="MaxPooling1D";K.registerClass(Hf);var Kf=class extends yx{constructor(t){super(t)}poolingFunction(t,e,o,n,s){return ce(s),Fr(n),Nx(t,e,o,n,s,"avg")}};Kf.className="AveragePooling1D";K.registerClass(Kf);var bx=class extends wt{constructor(t){if(t.poolSize==null&&(t.poolSize=[2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize],t.strides==null)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(t.strides.length!==2)throw new L(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${t.strides.length}.`);this.strides=t.strides}else this.strides=[t.strides,t.strides];$e(this.poolSize,"poolSize"),$e(this.strides,"strides"),this.padding=t.padding==null?"valid":t.padding,this.dataFormat=t.dataFormat==null?"channelsLast":t.dataFormat,ce(this.dataFormat),Fr(this.padding),this.inputSpec=[new Zt({ndim:4})]}computeOutputShape(t){t=Et(t);let e=this.dataFormat==="channelsFirst"?t[2]:t[1],o=this.dataFormat==="channelsFirst"?t[3]:t[2];return e=Xr(e,this.poolSize[0],this.padding,this.strides[0]),o=Xr(o,this.poolSize[1],this.padding,this.strides[1]),this.dataFormat==="channelsFirst"?[t[0],t[1],e,o]:[t[0],e,o,t[3]]}call(t,e){return M(()=>(this.invokeCallHook(t,e),this.poolingFunction(gt(t),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){let t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}},qf=class extends bx{constructor(t){super(t)}poolingFunction(t,e,o,n,s){return ce(s),Fr(n),Nx(t,e,o,n,s,"max")}};qf.className="MaxPooling2D";K.registerClass(qf);var jf=class extends bx{constructor(t){super(t)}poolingFunction(t,e,o,n,s){return ce(s),Fr(n),Nx(t,e,o,n,s,"avg")}};jf.className="AveragePooling2D";K.registerClass(jf);var wx=class extends wt{constructor(t){if(t.poolSize==null&&(t.poolSize=[2,2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize,t.poolSize],t.strides==null)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(t.strides.length!==3)throw new L(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${t.strides.length}.`);this.strides=t.strides}else this.strides=[t.strides,t.strides,t.strides];$e(this.poolSize,"poolSize"),$e(this.strides,"strides"),this.padding=t.padding==null?"valid":t.padding,this.dataFormat=t.dataFormat==null?"channelsLast":t.dataFormat,ce(this.dataFormat),Fr(this.padding),this.inputSpec=[new Zt({ndim:5})]}computeOutputShape(t){t=Et(t);let e=this.dataFormat==="channelsFirst"?t[2]:t[1],o=this.dataFormat==="channelsFirst"?t[3]:t[2],n=this.dataFormat==="channelsFirst"?t[4]:t[3];return e=Xr(e,this.poolSize[0],this.padding,this.strides[0]),o=Xr(o,this.poolSize[1],this.padding,this.strides[1]),n=Xr(n,this.poolSize[2],this.padding,this.strides[2]),this.dataFormat==="channelsFirst"?[t[0],t[1],e,o,n]:[t[0],e,o,n,t[4]]}call(t,e){return M(()=>(this.invokeCallHook(t,e),this.poolingFunction(gt(t),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){let t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}},Xf=class extends wx{constructor(t){super(t)}poolingFunction(t,e,o,n,s){return ce(s),Fr(n),fE(t,e,o,n,s,"max")}};Xf.className="MaxPooling3D";K.registerClass(Xf);var Yf=class extends wx{constructor(t){super(t)}poolingFunction(t,e,o,n,s){return ce(s),Fr(n),fE(t,e,o,n,s,"avg")}};Yf.className="AveragePooling3D";K.registerClass(Yf);var Cx=class extends wt{constructor(t){super(t),this.inputSpec=[new Zt({ndim:3})]}computeOutputShape(t){return[t[0],t[2]]}call(t,e){throw new yt}},Zf=class extends Cx{constructor(t){super(t||{})}call(t,e){return M(()=>{let o=gt(t);return oe(o,1)})}};Zf.className="GlobalAveragePooling1D";K.registerClass(Zf);var Jf=class extends Cx{constructor(t){super(t||{})}call(t,e){return M(()=>{let o=gt(t);return Xe(o,1)})}};Jf.className="GlobalMaxPooling1D";K.registerClass(Jf);var Sx=class extends wt{constructor(t){super(t),this.dataFormat=t.dataFormat==null?"channelsLast":t.dataFormat,ce(this.dataFormat),this.inputSpec=[new Zt({ndim:4})]}computeOutputShape(t){return t=t,this.dataFormat==="channelsLast"?[t[0],t[3]]:[t[0],t[1]]}call(t,e){throw new yt}getConfig(){let t={dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}},Qf=class extends Sx{call(t,e){return M(()=>{let o=gt(t);return this.dataFormat==="channelsLast"?oe(o,[1,2]):oe(o,[2,3])})}};Qf.className="GlobalAveragePooling2D";K.registerClass(Qf);var th=class extends Sx{call(t,e){return M(()=>{let o=gt(t);return this.dataFormat==="channelsLast"?Xe(o,[1,2]):Xe(o,[2,3])})}};th.className="GlobalMaxPooling2D";K.registerClass(th);var vx=class extends wt{constructor(t){super(t),this.layer=t.layer}build(t){this.built=!0}get trainable(){return this.layer!=null?this.layer.trainable:!1}set trainable(t){this.layer!=null&&(this.layer.trainable=t)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(t){this.layer.setWeights(t)}getConfig(){let t={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},e=super.getConfig();return Object.assign(t,e),t}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),this.layer!=null&&this.layer.setFastWeightInitDuringBuild(t)}static fromConfig(t,e,o={}){let n=e.layer,s=lo(n,o);delete e.layer;let i={layer:s};return Object.assign(i,e),new t(i)}},eh=class extends vx{constructor(t){super(t),this.supportsMasking=!0}build(t){if(t=Et(t),t.length<3)throw new L(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(t)}`);this.inputSpec=[{shape:t}];let e=[t[0]].concat(t.slice(2));this.layer.built||(this.layer.build(e),this.layer.built=!0),super.build(t)}computeOutputShape(t){t=Et(t);let e=[t[0]].concat(t.slice(2)),o=this.layer.computeOutputShape(e),n=t[1];return[o[0],n].concat(o.slice(1))}call(t,e){return M(()=>(t=gt(t),q0((i,a)=>[gt(this.layer.call(i,e)),[]],t,[],!1,null,null,!1,!0)[1]))}};eh.className="TimeDistributed";K.registerClass(eh);function c4(r){zn(Ik,"BidirectionalMergeMode",r)}var p4="concat",rh=class extends vx{constructor(t){super(t);let e=t.layer.getConfig(),o={};o.className=t.layer.getClassName(),o.config=e,this.forwardLayer=lo(o),e.goBackwards=e.goBackwards!==!0;let n={};if(n.className=t.layer.getClassName(),n.config=e,this.backwardLayer=lo(n),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=t.mergeMode===void 0?p4:t.mergeMode,c4(this.mergeMode),t.weights)throw new yt("weights support is not implemented for Bidirectional layer yet.");this._stateful=t.layer.stateful,this.returnSequences=t.layer.returnSequences,this.returnState=t.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=t.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(t){this._trainable=t,this.forwardLayer!=null&&(this.forwardLayer.trainable=t),this.backwardLayer!=null&&(this.backwardLayer.trainable=t)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(t){let e=t.length,o=Math.floor(e/2);this.forwardLayer.setWeights(t.slice(0,o)),this.backwardLayer.setWeights(t.slice(o))}computeOutputShape(t){let e=this.forwardLayer.computeOutputShape(t);Array.isArray(e)&&Array.isArray(e[0])||(e=[e]),e=e;let o,n,s;return this.returnState&&(s=e.slice(1)),o=e[0],o=o,this.mergeMode==="concat"?(o[o.length-1]*=2,n=[o]):this.mergeMode==null?n=[o,o.slice()]:n=[o],this.returnState?this.mergeMode==null?n.concat(s).concat(s.slice()):[o].concat(s).concat(s.slice()):Je(n)}apply(t,e){let o=e==null?null:e.initialState,n=e==null?null:e.constants;e==null&&(e={});let s=K0(t,o,n,this.numConstants);if(t=s.inputs,o=s.initialState,n=s.constants,Array.isArray(t)&&(o=t.slice(1),t=t[0]),(o==null||o.length===0)&&n==null)return super.apply(t,e);let i=[],a=[];if(o!=null){let u=o.length;if(u%2>0)throw new L("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");e.initialState=o,i.push(...o);let c=o.map(p=>new Zt({shape:p.shape}));this.forwardLayer.stateSpec=c.slice(0,u/2),this.backwardLayer.stateSpec=c.slice(u/2),a.push(...c)}if(n!=null)throw new yt("Support for constants in Bidirectional layers is not implemented yet.");let l=i[0]instanceof Tr;for(let u of i)if(u instanceof Tr!==l)throw new L("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(l){let u=[t].concat(i),c=this.inputSpec.concat(a),p=this.inputSpec;this.inputSpec=c;let m=super.apply(u,e);return this.inputSpec=p,m}else return super.apply(t,e)}call(t,e){return M(()=>{let o=e.initialState,n,s;if(o==null)n=this.forwardLayer.call(t,e),s=this.backwardLayer.call(t,e);else{let l=o.slice(0,o.length/2),u=o.slice(o.length/2);n=this.forwardLayer.call(t,Object.assign(e,{initialState:l})),s=this.backwardLayer.call(t,Object.assign(e,{initialState:u}))}let i;this.returnState&&(Array.isArray(n)&&(i=n.slice(1).concat(s.slice(1))),n=n[0],s=s[0]),this.returnSequences&&(s=Ve(s,1));let a;return this.mergeMode==="concat"?a=lp([n,s]):this.mergeMode==="sum"?a=U(n,s):this.mergeMode==="ave"?a=A(.5,U(n,s)):this.mergeMode==="mul"?a=A(n,s):this.mergeMode==null&&(a=[n,s]),this.returnState?this.mergeMode==null?a.concat(i):[a].concat(i):a})}resetStates(t){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(t){on(this.forwardLayer.name,()=>{this.forwardLayer.build(t)}),on(this.backwardLayer.name,()=>{this.backwardLayer.build(t)}),this.built=!0}computeMask(t,e){Array.isArray(e)&&(e=e[0]);let o;if(this.returnSequences?this.mergeMode==null?o=[e,e]:o=e:this.mergeMode==null?o=[null,null]:o=null,this.returnState){let s=this.forwardLayer.states.map(i=>null);return Array.isArray(o)?o.concat(s).concat(s):[o].concat(s).concat(s)}else return o}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),this.forwardLayer!=null&&this.forwardLayer.setFastWeightInitDuringBuild(t),this.backwardLayer!=null&&this.backwardLayer.setFastWeightInitDuringBuild(t)}getConfig(){let t={mergeMode:this.mergeMode},e=super.getConfig();return Object.assign(t,e),t}static fromConfig(t,e){let o=lo(e.layer);if(delete e.layer,e.numConstants!=null)throw new yt("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");let n=e;return n.layer=o,new t(n)}};rh.className="Bidirectional";K.registerClass(rh);var oh=class extends wt{constructor(t){super(t),this.scale=t.scale,t.offset?this.offset=t.offset:this.offset=0}getConfig(){let t={scale:this.scale,offset:this.offset},e=super.getConfig();return Object.assign(t,e),t}call(t,e){return M(()=>(t=gt(t),t.dtype!=="float32"&&(t=Nr(t,"float32")),U(A(t,this.scale),this.offset)))}};oh.className="Rescaling";K.registerClass(oh);var{resizeBilinear:m4,cropAndResize:f4}=hr,nh=class extends wt{constructor(t){super(t),this.height=t.height,this.width=t.width}centerCrop(t,e,o,n,s,i,a,l){return M(()=>{let u,c=!1,p=e/i,m=o/a,f=(n+e)/i,h=(s+o)/a,g=[p,m,f,h],d=[];t.rank===3?(c=!0,u=Ne([t])):u=t;for(let T=0;T<u.shape[0];T++)d.push(g);let x=He(d,[d.length,4]),b=_n(0,d.length,1,"int32"),w=f4(u,x,b,[n,s],"nearest");return c?Nr(gt(We(w)),l):Nr(w,l)})}upsize(t,e,o,n){return M(()=>{let s=m4(t,[e,o]);return Nr(s,n)})}call(t,e){return M(()=>{let o=gt(t),n=o.dtype,s=o.shape,i=s[s.length-3],a=s[s.length-2],l=0;i!==this.height&&(l=Math.floor((i-this.height)/2));let u=0;return a!==this.width&&(u=Math.floor((a-this.width)/2),u===0&&(u=1)),l>=0&&u>=0?this.centerCrop(o,l,u,this.height,this.width,i,a,n):this.upsize(t,this.height,this.width,n)})}getConfig(){let t={height:this.height,width:this.width},e=super.getConfig();return Object.assign(t,e),t}computeOutputShape(t){t=Et(t);let e=t.length-3,o=t.length-2;return t[e]=this.height,t[o]=this.width,t}};nh.className="CenterCrop";K.registerClass(nh);function hE(r,t,e,o){let n=gt(r);if(n.dtype!=="int32"&&(n=Nr(n,"int32")),t==="int")return n;let s=n.shape;if(n.rank===0&&(n=Ie(n,-1)),t==="oneHot"&&n.shape[n.shape.length-1]!==1&&(n=Ie(n,-1)),n.rank>2)throw new L(`When outputMode is not int, maximum output rank is 2 Received outputMode ${t} and input shape ${s} which would result in output rank ${n.rank}.`);let i=["multiHot","oneHot"].includes(t),a=n,l;if(typeof o<"u"&&t==="count"?l=Sm(a,o,e,i):l=Sm(a,[],e,i),t!=="tfIdf")return l;if(o)return A(l,o);throw new L("When outputMode is 'tfIdf', weights must be provided.")}var sh=class extends wt{constructor(t){super(t),this.numTokens=t.numTokens,t.outputMode?this.outputMode=t.outputMode:this.outputMode="multiHot"}getConfig(){let t={numTokens:this.numTokens,outputMode:this.outputMode},e=super.getConfig();return Object.assign(t,e),t}computeOutputShape(t){return t=Et(t),t==null?[this.numTokens]:this.outputMode==="oneHot"&&t[t.length-1]!==1?(t.push(this.numTokens),t):(t[t.length-1]=this.numTokens,t)}call(t,e){return M(()=>{t=gt(t),t.dtype!=="int32"&&(t=Nr(t,"int32"));let o;if(typeof e.countWeights<"u"){if(this.outputMode!=="count")throw new L(`countWeights is not used when outputMode !== count.
              Received countWeights=${e.countWeights}`);o=gt(e.countWeights)}let n=Xe(t),s=Us(t),i=ge(this.numTokens,n).bufferSync().get(0),a=Dr(s,0).bufferSync().get(0);if(!(i&&a))throw new L(`Input values must be between 0 < values <= numTokens with numTokens=${this.numTokens}`);return hE(t,this.outputMode,this.numTokens,o)})}};sh.className="CategoryEncoding";K.registerClass(sh);var d4=["bilinear","nearest"],dE=new Set(d4),ih=class extends wt{constructor(t){if(super(t),this.height=t.height,this.width=t.width,t.interpolation)if(dE.has(t.interpolation))this.interpolation=t.interpolation;else throw new L(`Invalid interpolation parameter: ${t.interpolation} is not implemented`);else this.interpolation="bilinear";this.cropToAspectRatio=!!t.cropToAspectRatio}computeOutputShape(t){t=Et(t);let e=t[2];return[this.height,this.width,e]}getConfig(){let t={height:this.height,width:this.width,interpolation:this.interpolation,cropToAspectRatio:this.cropToAspectRatio},e=super.getConfig();return Object.assign(t,e),t}call(t,e){return M(()=>{let o=[this.height,this.width];if(this.interpolation==="bilinear")return hr.resizeBilinear(t,o,!this.cropToAspectRatio);if(this.interpolation==="nearest")return hr.resizeNearestNeighbor(t,o,!this.cropToAspectRatio);throw new Error(`Interpolation is ${this.interpolation} but only ${[...dE]} are supported`)})}};ih.className="Resizing";K.registerClass(ih);var ah=class{constructor(t){this.seed=t}next(){if(this.seed!==void 0)return this.seed++}};ah.className="RandomSeed";var lh=class extends wt{constructor(t){super(t),this.randomGenerator=new ah(t.seed)}getConfig(){let t={seed:this.randomGenerator.seed},e=super.getConfig();return Object.assign(t,e),t}};lh.className="BaseRandomLayer";var g4=["bilinear","nearest"],gE=new Set(g4),uh=class extends lh{constructor(t){super(t);let{factor:e,interpolation:o="bilinear"}=t;if(this.factor=e,Array.isArray(this.factor)&&this.factor.length===2)this.widthLower=this.factor[0],this.widthUpper=this.factor[1];else if(!Array.isArray(this.factor)&&this.factor>0)this.widthLower=-this.factor,this.widthUpper=this.factor;else throw new L(`Invalid factor: ${this.factor}. Must be positive number or tuple of 2 numbers`);if(this.widthLower<-1||this.widthUpper<-1)throw new L(`factor must have values larger than -1. Got: ${this.factor}`);if(this.widthUpper<this.widthLower)throw new L(`factor cannot have upper bound less than lower bound.
        Got upper bound: ${this.widthUpper}.
        Got lower bound: ${this.widthLower}
      `);if(o)if(gE.has(o))this.interpolation=o;else throw new L(`Invalid interpolation parameter: ${o} is not implemented`)}getConfig(){let t={factor:this.factor,interpolation:this.interpolation},e=super.getConfig();return Object.assign(t,e),t}computeOutputShape(t){t=Et(t);let e=t[2];return[this.imgHeight,-1,e]}call(t,e){return M(()=>{let o=gt(t);this.imgHeight=o.shape[o.shape.length-3];let n=o.shape[o.shape.length-2];this.widthFactor=io([1],1+this.widthLower,1+this.widthUpper,"float32",this.randomGenerator.next());let s=this.widthFactor.dataSync()[0]*n;s=Math.round(s);let i=[this.imgHeight,s];switch(this.interpolation){case"bilinear":return hr.resizeBilinear(t,i);case"nearest":return hr.resizeNearestNeighbor(t,i);default:throw new Error(`Interpolation is ${this.interpolation}
          but only ${[...gE]} are supported`)}})}};uh.className="RandomWidth";K.registerClass(uh);var S4=z();S4.registerFlag("KEEP_INTERMEDIATE_TENSORS",()=>!1,r=>{r&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")});var No;(function(r){r[r.DT_INVALID=0]="DT_INVALID",r[r.DT_FLOAT=1]="DT_FLOAT",r[r.DT_DOUBLE=2]="DT_DOUBLE",r[r.DT_INT32=3]="DT_INT32",r[r.DT_UINT8=4]="DT_UINT8",r[r.DT_INT16=5]="DT_INT16",r[r.DT_INT8=6]="DT_INT8",r[r.DT_STRING=7]="DT_STRING",r[r.DT_COMPLEX64=8]="DT_COMPLEX64",r[r.DT_INT64=9]="DT_INT64",r[r.DT_BOOL=10]="DT_BOOL",r[r.DT_QINT8=11]="DT_QINT8",r[r.DT_QUINT8=12]="DT_QUINT8",r[r.DT_QINT32=13]="DT_QINT32",r[r.DT_BFLOAT16=14]="DT_BFLOAT16",r[r.DT_QINT16=15]="DT_QINT16",r[r.DT_QUINT16=16]="DT_QUINT16",r[r.DT_UINT16=17]="DT_UINT16",r[r.DT_COMPLEX128=18]="DT_COMPLEX128",r[r.DT_HALF=19]="DT_HALF",r[r.DT_RESOURCE=20]="DT_RESOURCE",r[r.DT_VARIANT=21]="DT_VARIANT",r[r.DT_UINT32=22]="DT_UINT32",r[r.DT_UINT64=23]="DT_UINT64",r[r.DT_FLOAT_REF=101]="DT_FLOAT_REF",r[r.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",r[r.DT_INT32_REF=103]="DT_INT32_REF",r[r.DT_UINT8_REF=104]="DT_UINT8_REF",r[r.DT_INT16_REF=105]="DT_INT16_REF",r[r.DT_INT8_REF=106]="DT_INT8_REF",r[r.DT_STRING_REF=107]="DT_STRING_REF",r[r.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",r[r.DT_INT64_REF=109]="DT_INT64_REF",r[r.DT_BOOL_REF=110]="DT_BOOL_REF",r[r.DT_QINT8_REF=111]="DT_QINT8_REF",r[r.DT_QUINT8_REF=112]="DT_QUINT8_REF",r[r.DT_QINT32_REF=113]="DT_QINT32_REF",r[r.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",r[r.DT_QINT16_REF=115]="DT_QINT16_REF",r[r.DT_QUINT16_REF=116]="DT_QUINT16_REF",r[r.DT_UINT16_REF=117]="DT_UINT16_REF",r[r.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",r[r.DT_HALF_REF=119]="DT_HALF_REF",r[r.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",r[r.DT_VARIANT_REF=121]="DT_VARIANT_REF",r[r.DT_UINT32_REF=122]="DT_UINT32_REF",r[r.DT_UINT64_REF=123]="DT_UINT64_REF"})(No||(No={}));var xE;(function(r){let t;(function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"})(t=r.CheckpointFormatVersion||(r.CheckpointFormatVersion={}))})(xE||(xE={}));var v4={};function Tx(r){return v4[r]}function C(r,t,e,o,n){let s=t.inputParams[r];if(s&&s.inputIndexStart!==void 0){let a=s.inputIndexStart,l=s.inputIndexEnd===0?void 0:s.inputIndexEnd===void 0?a+1:s.inputIndexEnd,u=a<0?t.inputNames.length+a:a;if(s.type==="tensor")return ze(t.inputNames[u],e,o,n);if(s.type==="tensors"){let m=t.inputs.slice(a,l);return t.inputNames.slice(a,l).filter((h,g)=>{var d;return((d=m[g])===null||d===void 0?void 0:d.op)!=="NoOp"}).map(h=>ze(h,e,o,n))}let c=ze(t.inputNames[u],e,o,n),p=c.dataSync();return s.type==="number"?p[0]:y.toNestedArray(c.shape,p)}let i=t.attrParams[r];return i&&i.value}function ze(r,t,e,o){let[n,s]=zr(r,e);if(o!=null){let a=o.getHashTableHandleByName(n);if(a!=null)return a}let i=e.currentContextIds.find(a=>!!t[Ix(n,a)]);return i!==void 0?t[Ix(n,i)][s]:void 0}function j0(r,t,e){return t[Ix(r,e.currentContextId)]}function un(r,t){let[e,o,n]=zr(r,t);return[Ix(e,t&&t.currentContextId),o,n]}function Ix(r,t){return t?`${r}-${t}`:r}function zr(r,t){if(r==="")return["",0,void 0];let e=t!=null&&t.parseNodeNameCache!=null;if(e){let s=t.parseNodeNameCache.get(r);if(s!=null)return s}let o=r.split(":"),n;if(o.length===1)n=[r,0,void 0];else{let s=o[0],i=o.length===3?o[1]:void 0,a=Number(o[o.length-1]);n=[s,a,i]}return e&&t.parseNodeNameCache.set(r,n),n}function ch(r,t,e){let o=C("pad",r,t,e);if(o==="explicit"){o=C("explicitPaddings",r,t,e);let n=[[0,0],[0,0],[0,0],[0,0]];for(let s=0;s<4;s++)n[s][0]=o[s*2],n[s][1]=o[s*2+1];return n}return o}function cn(r){return r.kept?r:$r(r)}var X0={};qt(X0,{json:()=>T4});var T4=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var Y0={};qt(Y0,{json:()=>I4});var I4=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsFinite",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsInf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var Z0={};qt(Z0,{json:()=>k4});var k4=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}];var J0={};qt(J0,{json:()=>E4});var E4=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}];var Q0={};qt(Q0,{json:()=>$4});var $4=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniformInt",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number"},{tfName:"maxval",name:"maxval",type:"number"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}];var tC={};qt(tC,{json:()=>A4});var A4=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var eC={};qt(eC,{json:()=>D4});var D4=[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}];var rC={};qt(rC,{json:()=>R4});var R4=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}];var oC={};qt(oC,{json:()=>F4});var F4=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"InitializeTable",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]},{tfOpName:"InitializeTableV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]}];var nC={};qt(nC,{json:()=>_4});var _4=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}];var sC={};qt(sC,{json:()=>O4});var O4=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BitwiseAnd",category:"logical",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}]}];var iC={};qt(iC,{json:()=>L4});var L4=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"MatrixBandPart",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"numLower",type:"tensor"},{start:1,name:"numUpper",type:"tensor"}]}];var aC={};qt(aC,{json:()=>P4});var P4=[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]}];var lC={};qt(lC,{json:()=>z4});var z4=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}];var uC={};qt(uC,{json:()=>M4});var M4=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]},{tfOpName:"TensorScatterUpdate",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"values",type:"tensor"}]}];var cC={};qt(cC,{json:()=>B4});var B4=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}];var pC={};qt(pC,{json:()=>V4});var V4=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}];var mC={};qt(mC,{json:()=>G4});var G4=[{tfOpName:"StaticRegexReplace",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"pattern",name:"pattern",type:"string"},{tfName:"rewrite",name:"rewrite",type:"string"},{tfName:"replace_global",name:"replaceGlobal",type:"bool"}]},{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}];var fC={};qt(fC,{json:()=>W4});var W4=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"EnsureShape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];var ph=class{static get Instance(){return this._instance||(this._instance=new this)}constructor(){let t=[X0,Y0,Z0,J0,Q0,tC,eC,rC,oC,nC,sC,iC,aC,lC,uC,cC,pC,mC,fC],e=[].concat(...t.map(o=>o.json));this.opMappers=e.reduce((o,n)=>(o[n.tfOpName]=n,o),{})}transformGraph(t,e={}){let o=t.node,n=[],s=[],i=[],a=o.reduce((g,d)=>(g[d.name]=this.mapNode(d),d.op.startsWith("Placeholder")?n.push(g[d.name]):d.op==="Const"?s.push(g[d.name]):(d.input==null||d.input.length===0)&&i.push(g[d.name]),g),{}),l=[],u=[],c={},p={};e!=null&&(c=this.mapSignatureEntries(e.inputs),p=this.mapSignatureEntries(e.outputs));let m=Object.keys(a);m.forEach(g=>{let d=a[g];d.inputNames.forEach((x,b)=>{let[S,,w]=un(x),T=a[S];if(T.outputs!=null){let $=T.outputs.indexOf(w);if($!==-1){let R=`${S}:${$}`;d.inputNames[b]=R}}d.inputs.push(T),T.children.push(d)})}),Object.keys(p).length===0?m.forEach(g=>{let d=a[g];d.children.length===0&&u.push(d)}):Object.keys(p).forEach(g=>{let[d]=un(g),x=a[d];x!=null&&(x.signatureKey=p[g],u.push(x))}),Object.keys(c).length>0?Object.keys(c).forEach(g=>{let[d]=un(g),x=a[d];x&&(x.signatureKey=c[g],l.push(x))}):l=n;let f={};t.library!=null&&t.library.function!=null&&(f=t.library.function.reduce((g,d)=>(g[d.signature.name]=this.mapFunction(d),g),{}));let h={nodes:a,inputs:l,outputs:u,weights:s,placeholders:n,signature:e,functions:f};return i.length>0&&(h.initNodes=i),h}mapSignatureEntries(t){return Object.keys(t||{}).reduce((e,o)=>(e[t[o].name]=o,e),{})}mapNode(t){let e=Tx(t.op)||this.opMappers[t.op]||{};t.attr==null&&(t.attr={});let o={name:t.name,op:t.op,category:e.category,inputNames:(t.input||[]).map(n=>n.startsWith("^")?n.slice(1):n),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:t.attr,outputs:e.outputs};return e.inputs!=null&&(o.inputParams=e.inputs.reduce((n,s)=>(n[s.name]={type:s.type,inputIndexStart:s.start,inputIndexEnd:s.end},n),{})),e.attrs!=null&&(o.attrParams=e.attrs.reduce((n,s)=>{let i=s.type,a;switch(s.type){case"string":a=kx(t.attr,s.tfName,s.defaultValue),a===void 0&&s.tfDeprecatedName&&(a=kx(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"string[]":a=_x(t.attr,s.tfName,s.defaultValue),a===void 0&&s.tfDeprecatedName&&(a=_x(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"number":a=$x(t.attr,s.tfName,s.defaultValue||0),a===void 0&&s.tfDeprecatedName&&(a=$x(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"number[]":a=Fx(t.attr,s.tfName,s.defaultValue),a===void 0&&s.tfDeprecatedName&&(a=Fx(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"bool":a=Ex(t.attr,s.tfName,s.defaultValue),a===void 0&&s.tfDeprecatedName&&(a=Ex(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"bool[]":a=Lx(t.attr,s.tfName,s.defaultValue),a===void 0&&s.tfDeprecatedName&&(a=Lx(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"shape":a=Rx(t.attr,s.tfName,s.defaultValue),a===void 0&&s.tfDeprecatedName&&(a=Rx(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"shape[]":a=Ox(t.attr,s.tfName,s.defaultValue),a===void 0&&s.tfDeprecatedName&&(a=Ox(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"dtype":a=Ax(t.attr,s.tfName,s.defaultValue),a===void 0&&s.tfDeprecatedName&&(a=Ax(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"dtype[]":a=Dx(t.attr,s.tfName,s.defaultValue),a===void 0&&s.tfDeprecatedName&&(a=Dx(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"func":a=yE(t.attr,s.tfName,s.defaultValue),a===void 0&&s.tfDeprecatedName&&(a=yE(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${s.type} for op: ${t.op}`)}return n[s.name]={value:a,type:i},n},{})),o}mapFunction(t){let e=t.nodeDef,o=[],n=[],s={};e!=null&&(s=e.reduce((p,m)=>(p[m.name]=this.mapNode(m),m.op==="Const"&&n.push(p[m.name]),p),{}));let i=[],a=[];t.signature.inputArg.forEach(p=>{let[m]=un(p.name),f={name:m,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:hC(p.type),type:"dtype"}},children:[]};f.signatureKey=p.name,i.push(f),s[m]=f}),Object.keys(s).forEach(p=>{let m=s[p];m.inputNames.forEach((f,h)=>{let[g,,d]=un(f),x=s[g];if(x.outputs!=null){let b=x.outputs.indexOf(d);if(b!==-1){let S=`${g}:${b}`;m.inputNames[h]=S}}m.inputs.push(x),x.children.push(m)})});let u=t.ret;t.signature.outputArg.forEach(p=>{let[m,f]=un(u[p.name]),h=s[m];h!=null&&(h.defaultOutput=f,a.push(h))});let c=this.mapArgsToSignature(t);return{nodes:s,inputs:i,outputs:a,weights:n,placeholders:o,signature:c}}mapArgsToSignature(t){return{methodName:t.signature.name,inputs:t.signature.inputArg.reduce((e,o)=>(e[o.name]=this.mapArgToTensorInfo(o),e),{}),outputs:t.signature.outputArg.reduce((e,o)=>(e[o.name]=this.mapArgToTensorInfo(o,t.ret),e),{})}}mapArgToTensorInfo(t,e){let o=t.name;return e!=null&&(o=e[o]),{name:o,dtype:t.type}}};function U4(r){let t=z().global;if(typeof t.atob<"u")return t.atob(r);if(typeof Buffer<"u")return new Buffer(r,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}function bE(r,t){let e=Array.isArray(r)?String.fromCharCode.apply(null,r):U4(r);return t?e:e.toLowerCase()}function kx(r,t,e,o=!1){let n=r[t];return n!=null?bE(n.s,o):e}function Ex(r,t,e){let o=r[t];return o?o.b:e}function $x(r,t,e){let o=r[t]||{},n=o.i!=null?o.i:o.f!=null?o.f:e;return typeof n=="number"?n:parseInt(n,10)}function hC(r){switch(typeof r=="string"&&(r=No[r]),r){case No.DT_FLOAT:case No.DT_HALF:return"float32";case No.DT_INT32:case No.DT_INT64:case No.DT_INT8:case No.DT_UINT8:return"int32";case No.DT_BOOL:return"bool";case No.DT_DOUBLE:return"float32";case No.DT_STRING:return"string";default:return null}}function yE(r,t,e){let o=r[t];return o&&o.func?o.func.name:e}function Ax(r,t,e){let o=r[t];return o&&o.type?hC(o.type):e}function Dx(r,t,e){let o=r[t];return o&&o.list&&o.list.type?o.list.type.map(n=>hC(n)):e}function wE(r){if(!r.unknownRank)return r.dim!=null?r.dim.map(t=>typeof t.size=="number"?t.size:parseInt(t.size,10)):[]}function Rx(r,t,e){let o=r[t];return o&&o.shape?wE(o.shape):e}function Fx(r,t,e){let o=r[t];return o?((o.list.f&&o.list.f.length?o.list.f:o.list.i)||[]).map(n=>typeof n=="number"?n:parseInt(n,10)):e}function _x(r,t,e,o=!1){let n=r[t];return n&&n.list&&n.list.s?n.list.s.map(s=>bE(s,o)):e}function Ox(r,t,e){let o=r[t];return o&&o.list&&o.list.shape?o.list.shape.map(n=>wE(n)):e}function Lx(r,t,e){let o=r[t];return o&&o.list&&o.list.b?o.list.b:e}var Px=class{constructor(t,e,o){this.node=t,this.tensorMap=e,this.context=o,this.inputs=[],this.attrs={},this.inputs=t.inputNames.map(n=>this.getInput(n)),t.rawAttrs!=null&&(this.attrs=Object.keys(t.rawAttrs).reduce((n,s)=>(n[s]=this.getAttr(s),n),{}))}getInput(t){return ze(t,this.tensorMap,this.context)}getAttr(t,e){let o=this.node.rawAttrs[t];if(o.tensor!=null)return ze(t,this.tensorMap,this.context);if(o.i!=null||o.f!=null)return $x(this.node.rawAttrs,t,e);if(o.s!=null)return kx(this.node.rawAttrs,t,e);if(o.b!=null)return Ex(this.node.rawAttrs,t,e);if(o.shape!=null)return Rx(this.node.rawAttrs,t,e);if(o.type!=null)return Ax(this.node.rawAttrs,t,e);if(o.list!=null){if(o.list.i!=null||o.list.f!=null)return Fx(this.node.rawAttrs,t,e);if(o.list.s!=null)return _x(this.node.rawAttrs,t,e);if(o.list.shape!=null)return Ox(this.node.rawAttrs,t,e);if(o.list.b!=null)return Lx(this.node.rawAttrs,t,e);if(o.list.type!=null)return Dx(this.node.rawAttrs,t,e)}return e}};var Gt={};qt(Gt,{OP_SCOPE_SUFFIX:()=>Ow,abs:()=>ae,acos:()=>sd,acosh:()=>id,add:()=>U,addN:()=>cv,all:()=>Ec,any:()=>yl,argMax:()=>Tn,argMin:()=>ad,asin:()=>ld,asinh:()=>ud,atan:()=>cd,atan2:()=>pd,atanh:()=>md,avgPool:()=>ha,avgPool3d:()=>fd,basicLSTMCell:()=>fv,batchNorm:()=>En,batchNorm2d:()=>hd,batchNorm3d:()=>dd,batchNorm4d:()=>gd,batchToSpaceND:()=>da,bincount:()=>xd,bitwiseAnd:()=>dv,booleanMaskAsync:()=>tV,broadcastArgs:()=>gv,broadcastTo:()=>$n,buffer:()=>mt,cast:()=>X,ceil:()=>yd,clipByValue:()=>je,clone:()=>$r,complex:()=>Gr,concat:()=>Vt,concat1d:()=>bd,concat2d:()=>wd,concat3d:()=>Cd,concat4d:()=>Sd,conv1d:()=>Ac,conv2d:()=>Ur,conv2dTranspose:()=>Rc,conv3d:()=>Nd,conv3dTranspose:()=>Td,cos:()=>ga,cosh:()=>Fc,cosineWindow:()=>Em,cumprod:()=>wl,cumsum:()=>_c,denseBincount:()=>Sm,depthToSpace:()=>Id,depthwiseConv2d:()=>An,diag:()=>xv,dilation2d:()=>kd,div:()=>ot,divNoNan:()=>Ed,dot:()=>$d,dropout:()=>s0,einsum:()=>bv,elu:()=>Dn,enclosingPowerOfTwo:()=>i0,ensureShape:()=>wv,equal:()=>Sr,erf:()=>Ad,euclideanNorm:()=>Dd,exp:()=>Fe,expandDims:()=>Ie,expm1:()=>Rd,eye:()=>Cl,fft:()=>Ta,fill:()=>Ao,floor:()=>Rn,floorDiv:()=>kc,fused:()=>ka,gather:()=>Fn,gatherND:()=>cV,greater:()=>ge,greaterEqual:()=>Dr,ifft:()=>js,imag:()=>xa,image:()=>hr,inTopKAsync:()=>fV,irfft:()=>qc,isFinite:()=>Fd,isInf:()=>_d,isNaN:()=>Od,leakyRelu:()=>ya,less:()=>Ks,lessEqual:()=>so,linalg:()=>l0,linspace:()=>Nv,localResponseNormalization:()=>Ld,log:()=>Ye,log1p:()=>ba,logSigmoid:()=>Pd,logSoftmax:()=>Oc,logSumExp:()=>Lc,logicalAnd:()=>mr,logicalNot:()=>wa,logicalOr:()=>Pc,logicalXor:()=>zd,losses:()=>hG,lowerBound:()=>vv,matMul:()=>Dt,max:()=>Xe,maxPool:()=>Ca,maxPool3d:()=>Bd,maxPoolWithArgmax:()=>Tv,maximum:()=>Kr,mean:()=>oe,meshgrid:()=>Iv,min:()=>Us,minimum:()=>wo,mirrorPad:()=>Vd,mod:()=>Gd,moments:()=>Sl,movingAverage:()=>oV,mul:()=>A,multiRNNCell:()=>kv,multinomial:()=>Ev,neg:()=>Ft,norm:()=>Hs,notEqual:()=>tn,oneHot:()=>Nl,ones:()=>Be,onesLike:()=>Ke,op:()=>v,outerProduct:()=>$v,pad:()=>Rr,pad1d:()=>Av,pad2d:()=>Dv,pad3d:()=>Rv,pad4d:()=>Fv,pool:()=>Wd,pow:()=>Ar,prelu:()=>Na,print:()=>rd,prod:()=>Ud,raggedGather:()=>_v,raggedRange:()=>Ov,raggedTensorToTensor:()=>Lv,rand:()=>Pv,randomGamma:()=>tT,randomNormal:()=>Il,randomStandardNormal:()=>eT,randomUniform:()=>io,randomUniformInt:()=>rT,range:()=>_n,real:()=>qs,reciprocal:()=>Xd,relu:()=>ir,relu6:()=>zc,reshape:()=>D,reverse:()=>Ve,reverse1d:()=>oT,reverse2d:()=>nT,reverse3d:()=>sT,reverse4d:()=>iT,rfft:()=>Ia,round:()=>Mc,rsqrt:()=>Bc,scalar:()=>st,scatterND:()=>sV,searchSorted:()=>vm,selu:()=>Vc,separableConv2d:()=>Gc,setdiff1dAsync:()=>aT,sigmoid:()=>Cr,sign:()=>Yd,signal:()=>fG,sin:()=>Wc,sinh:()=>Uc,slice:()=>Nt,slice1d:()=>Hc,slice2d:()=>Im,slice3d:()=>Kc,slice4d:()=>kl,softmax:()=>va,softplus:()=>Qo,spaceToBatchND:()=>Sa,sparse:()=>dG,sparseToDense:()=>lV,spectral:()=>mG,split:()=>Ge,sqrt:()=>re,square:()=>$t,squaredDifference:()=>jc,squeeze:()=>ao,stack:()=>Ne,step:()=>Ro,stridedSlice:()=>Zd,string:()=>gG,sub:()=>tt,sum:()=>nt,tan:()=>Jd,tanh:()=>kn,tensor:()=>He,tensor1d:()=>ke,tensor2d:()=>Xs,tensor3d:()=>Qd,tensor4d:()=>lT,tensor5d:()=>uT,tensor6d:()=>cT,tensorScatterUpdate:()=>fT,tile:()=>sr,topk:()=>tg,transpose:()=>Rt,truncatedNormal:()=>Xc,unique:()=>eg,unsortedSegmentSum:()=>Yc,unstack:()=>We,upperBound:()=>hT,variable:()=>rg,where:()=>ee,whereAsync:()=>ng,zeros:()=>ne,zerosLike:()=>dt});var CE=(r,t,e,o=Gt)=>{switch(r.op){case"BiasAdd":case"AddV2":case"Add":return[o.add(C("a",r,t,e),C("b",r,t,e))];case"AddN":return[o.addN(C("tensors",r,t,e))];case"FloorMod":case"Mod":return[o.mod(C("a",r,t,e),C("b",r,t,e))];case"Mul":return[o.mul(C("a",r,t,e),C("b",r,t,e))];case"RealDiv":case"Div":return[o.div(C("a",r,t,e),C("b",r,t,e))];case"DivNoNan":return[o.divNoNan(C("a",r,t,e),C("b",r,t,e))];case"FloorDiv":return[o.floorDiv(C("a",r,t,e),C("b",r,t,e))];case"Sub":return[o.sub(C("a",r,t,e),C("b",r,t,e))];case"Minimum":return[o.minimum(C("a",r,t,e),C("b",r,t,e))];case"Maximum":return[o.maximum(C("a",r,t,e),C("b",r,t,e))];case"Pow":return[o.pow(C("a",r,t,e),C("b",r,t,e))];case"SquaredDifference":return[o.squaredDifference(C("a",r,t,e),C("b",r,t,e))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var SE=(r,t,e,o=Gt)=>{switch(r.op){case"Abs":case"ComplexAbs":return[o.abs(C("x",r,t,e))];case"Acos":return[o.acos(C("x",r,t,e))];case"Acosh":return[o.acosh(C("x",r,t,e))];case"Asin":return[o.asin(C("x",r,t,e))];case"Asinh":return[o.asinh(C("x",r,t,e))];case"Atan":return[o.atan(C("x",r,t,e))];case"Atan2":return[o.atan2(C("x",r,t,e),C("y",r,t,e))];case"Atanh":return[o.atanh(C("x",r,t,e))];case"Ceil":return[o.ceil(C("x",r,t,e))];case"Complex":return[o.complex(C("real",r,t,e),C("imag",r,t,e))];case"Cos":return[o.cos(C("x",r,t,e))];case"Cosh":return[o.cosh(C("x",r,t,e))];case"Elu":return[o.elu(C("x",r,t,e))];case"Erf":return[o.erf(C("x",r,t,e))];case"Exp":return[o.exp(C("x",r,t,e))];case"Expm1":return[o.expm1(C("x",r,t,e))];case"Floor":return[o.floor(C("x",r,t,e))];case"Log":return[o.log(C("x",r,t,e))];case"Log1p":return[o.log1p(C("x",r,t,e))];case"Imag":return[o.imag(C("x",r,t,e))];case"Neg":return[o.neg(C("x",r,t,e))];case"Reciprocal":return[o.reciprocal(C("x",r,t,e))];case"Real":return[o.real(C("x",r,t,e))];case"Relu":return[o.relu(C("x",r,t,e))];case"Round":return[o.round(C("x",r,t,e))];case"Selu":return[o.selu(C("x",r,t,e))];case"Sigmoid":return[o.sigmoid(C("x",r,t,e))];case"Sin":return[o.sin(C("x",r,t,e))];case"Sign":return[o.sign(C("x",r,t,e))];case"Sinh":return[o.sinh(C("x",r,t,e))];case"Softplus":return[o.softplus(C("x",r,t,e))];case"Sqrt":return[o.sqrt(C("x",r,t,e))];case"Square":return[o.square(C("x",r,t,e))];case"Tanh":return[o.tanh(C("x",r,t,e))];case"Tan":return[o.tan(C("x",r,t,e))];case"ClipByValue":return[o.clipByValue(C("x",r,t,e),C("clipValueMin",r,t,e),C("clipValueMax",r,t,e))];case"Relu6":return[o.relu6(C("x",r,t,e))];case"Rsqrt":return[o.rsqrt(ze(r.inputNames[0],t,e))];case"LeakyRelu":return[o.leakyRelu(C("x",r,t,e),C("alpha",r,t,e))];case"Prelu":return[o.prelu(C("x",r,t,e),C("alpha",r,t,e))];case"IsNan":return[o.isNaN(ze(r.inputNames[0],t,e))];case"IsInf":return[o.isInf(ze(r.inputNames[0],t,e))];case"IsFinite":return[o.isFinite(ze(r.inputNames[0],t,e))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};function co(r,t,e=""){if(!(typeof r=="number"||typeof t=="number")){y.assert(r.length===t.length,()=>e+` Shapes ${r} and ${t} must match`);for(let o=0;o<r.length;o++){let n=r[o],s=t[o];y.assert(n<0||s<0||n===s,()=>e+` Shapes ${r} and ${t} must match`)}}}function NE(r){return!(typeof r=="number"||r.some(t=>t<0))}function $p(r,t,e){let o=zx(r,e),n=!NE(o);if(n&&t.length===0)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${o}`);if(n&&t.forEach(s=>{o=zx(s.shape,o)}),!NE(o))throw new Error(`Non-fully-defined elementShape: ${o}`);return o}function zx(r,t){if(typeof r=="number")return t;if(typeof t=="number")return r;if(r.length!==t.length)throw new Error(`Incompatible ranks during merge: ${r} vs. ${t}`);let e=[];for(let o=0;o<r.length;++o){let n=r[o],s=t[o];if(n>=0&&s>=0&&n!==s)throw new Error(`Incompatible shape during merge: ${r} vs. ${t}`);e[o]=n>=0?n:s}return e}var Mx=class{constructor(t,e,o,n,s,i,a){this.name=t,this.dtype=e,this.maxSize=o,this.elementShape=n,this.identicalElementShapes=s,this.dynamicSize=i,this.clearAfterRead=a,this.tensors=[],this.closed_=!1,this.idTensor=st(0),ue(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(t){this.tensors.forEach(e=>{(t==null||!t.has(e.tensor.id))&&e.tensor.dispose()}),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||t>=this.size())throw new Error(`Tried to read from index ${t}, but array size is: ${this.size()}`);let e=this.tensors[t];if(e.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${t} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(e.cleared=!0),e.read=!0,e.tensor}readMany(t){return t.map(e=>this.read(e))}write(t,e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||!this.dynamicSize&&t>=this.maxSize)throw new Error(`Tried to write to index ${t}, but array is not resizeable and size is: ${this.maxSize}`);let o=this.tensors[t]||{};if(e.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t},
          because the value dtype is ${e.dtype}, but TensorArray dtype is ${this.dtype}.`);if(this.size()===0&&(this.elementShape==null||this.elementShape.length===0)&&(this.elementShape=e.shape),co(this.elementShape,e.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${t}.`),o.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been read.`);if(o.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been written.`);o.tensor=e,ue(e),o.written=!0,this.tensors[t]=o}writeMany(t,e){if(t.length!==e.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${t.length} is not the same as tensors size: ${e.length}.`);t.forEach((o,n)=>this.write(o,e[n]))}gather(t,e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${e}`);if(t)t=t.slice(0,this.size());else{t=[];for(let n=0;n<this.size();n++)t.push(n)}if(t.length===0)return He([],[0].concat(this.elementShape));let o=this.readMany(t);return co(this.elementShape,o[0].shape,"TensorArray shape mismatch: "),Ne(o,0)}concat(t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${t}`);if(this.size()===0)return He([],[0].concat(this.elementShape));let e=[];for(let n=0;n<this.size();n++)e.push(n);let o=this.readMany(e);return co(this.elementShape,o[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${o[0].shape})`),Vt(o,0)}scatter(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);let o=Math.max(...t);if(!this.dynamicSize&&o>=this.maxSize)throw new Error(`Max index must be < array size (${o}  vs. ${this.maxSize})`);this.writeMany(t,We(e,0))}split(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);let o=0,n=t.map(l=>(o+=l,o));if(o!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${o}, and tensor's shape is: ${e.shape}`);if(!this.dynamicSize&&t.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${t.length}), and the TensorArray is not marked as dynamically resizeable`);let s=o===0?0:e.size/o,i=[];M(()=>{e=D(e,[1,o,s]);for(let l=0;l<t.length;++l){let c=[0,l===0?0:n[l-1],0],p=[1,t[l],s];i[l]=D(Nt(e,c,p),this.elementShape)}return i});let a=[];for(let l=0;l<t.length;l++)a[l]=l;this.writeMany(a,i)}};var si=class{get id(){return this.idTensor.id}constructor(t,e,o,n=-1){this.tensors=t,this.elementShape=e,this.elementDtype=o,t?.forEach(s=>{if(o!==s.dtype)throw new Error(`Invalid data types; op elements ${o}, but list elements ${s.dtype}`);co(e,s.shape,"TensorList shape mismatch: "),ue(s)}),this.idTensor=st(0),this.maxNumElements=n,ue(this.idTensor)}copy(){return new si([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(t){this.tensors.forEach(e=>{(t==null||!t.has(e.id))&&e.dispose()}),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(t,e,o=-1){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);if(o!==-1&&this.tensors.length!==o)throw new Error(`Operation expected a list with ${o} elements but got a list with ${this.tensors.length} elements.`);co(t,this.elementShape,"TensorList shape mismatch: ");let n=$p(this.elementShape,this.tensors,t);return M(()=>{let s=this.tensors.map(i=>D(i,n));return Ne(s,0)})}popBack(t,e){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);if(this.size()===0)throw new Error("Trying to pop from an empty list.");let o=$p(this.elementShape,this.tensors,t),n=this.tensors.pop();return n.kept=!1,co(n.shape,t,"TensorList shape mismatch: "),D(n,o)}pushBack(t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(co(t.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");ue(t),this.tensors.push(t)}resize(t){if(t<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${t}`);if(this.maxNumElements!==-1&&t>this.maxNumElements)throw new Error(`TensorListResize input size ${t} is greater maxNumElement ${this.maxNumElements}.`);let e=new si([],this.elementShape,this.elementDtype,this.maxNumElements);e.tensors.length=t;for(let o=0;o<Math.min(this.tensors.length,t);++o)e.tensors[o]=this.tensors[o];return e}getItem(t,e,o){if(o!==this.elementDtype)throw new Error(`Invalid data types; op elements ${o}, but list elements ${this.elementDtype}`);if(t<0||t>this.tensors.length)throw new Error(`Trying to access element ${t} in a list with ${this.tensors.length} elements.`);if(this.tensors[t]==null)throw new Error(`element at index ${t} is null.`);co(this.tensors[t].shape,e,"TensorList shape mismatch: ");let n=$p(this.elementShape,this.tensors,e);return D(this.tensors[t],n)}setItem(t,e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(t<0||this.maxNumElements!==-1&&t>=this.maxNumElements)throw new Error(`Trying to set element ${t} in a list with max ${this.maxNumElements} elements.`);co(this.elementShape,e.shape,"TensorList shape mismatch: "),ue(e),this.tensors[t]!=null&&(this.tensors[t].kept=!1),this.tensors[t]=e}gather(t,e,o){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);co(this.elementShape,o,"TensorList shape mismatch: "),t=t.slice(0,this.size());let n=$p(this.elementShape,this.tensors,o);return t.length===0?He([],[0].concat(n)):M(()=>{let s=t.map(i=>D(this.tensors[i],n));return Ne(s,0)})}concat(t,e){if(t&&t!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${t}`);co(this.elementShape,e,"TensorList shape mismatch: ");let o=$p(this.elementShape,this.tensors,e);return this.size()===0?He([],[0].concat(o)):M(()=>{let n=this.tensors.map(s=>D(s,o));return Vt(n,0)})}};function vE(r,t,e){let o=r.dtype;if(r.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${r.shape}`);if(r.dtype!==e)throw new Error(`Invalid data types; op elements ${r.dtype}, but list elements ${e}`);let n=r.shape.slice(1);co(n,t,"TensorList shape mismatch: ");let s=We(r);return new si(s,t,o)}function TE(r,t,e,o){return new si([],r,t,o)}function IE(r,t,e,o){if(t.length!==r.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${r.shape[0]}`);let n=Math.max(...t);if(o!=null&&o!==-1&&n>=o)throw new Error(`Max index must be < array size (${n}  vs. ${o})`);let s=new si([],e,r.dtype,o),i=We(r,0);return t.forEach((a,l)=>{s.setItem(a,i[l])}),s}function kE(r,t,e){let o=0,n=t.map(c=>(o+=c,o));if(o!==r.shape[0])throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${o}, and tensor's shape is: ${r.shape}`);let s=r.shape.slice(1),i=zx(s,e),a=o===0?0:r.size/o,l=M(()=>{let c=[];r=D(r,[1,o,a]);for(let p=0;p<t.length;++p){let f=[0,p===0?0:n[p-1],0],h=[1,t[p],a];c[p]=D(Nt(r,f,h),i)}return r.dispose(),c}),u=new si([],e,r.dtype,t.length);for(let c=0;c<l.length;c++)u.setItem(c,l[c]);return u}var EE=async(r,t,e)=>{switch(r.op){case"If":case"StatelessIf":{let o=C("thenBranch",r,t,e),n=C("elseBranch",r,t,e),s=C("cond",r,t,e),i=C("args",r,t,e);return(await s.data())[0]?e.functionMap[o].executeFunctionAsync(i,e.tensorArrayMap,e.tensorListMap):e.functionMap[n].executeFunctionAsync(i,e.tensorArrayMap,e.tensorListMap)}case"While":case"StatelessWhile":{let o=C("body",r,t,e),n=C("cond",r,t,e),s=C("args",r,t,e),i=await e.functionMap[n].executeFunctionAsync(s,e.tensorArrayMap,e.tensorListMap),a=s.map(c=>c.id),l=await i[0].data();i.forEach(c=>{!c.kept&&a.indexOf(c.id)===-1&&c.dispose()});let u=s;for(;l[0];){let c=u;u=await e.functionMap[o].executeFunctionAsync(u,e.tensorArrayMap,e.tensorListMap);let p=u.map(f=>f.id);c.forEach(f=>{!f.kept&&a.indexOf(f.id)===-1&&p.indexOf(f.id)===-1&&f.dispose()});let m=await e.functionMap[n].executeFunctionAsync(u,e.tensorArrayMap,e.tensorListMap);l=await m[0].data(),m.forEach(f=>{!f.kept&&a.indexOf(f.id)===-1&&p.indexOf(f.id)===-1&&f.dispose()})}return u}case"LoopCond":{let o=C("pred",r,t,e);return[cn(o)]}case"Switch":{let o=C("pred",r,t,e),n=C("data",r,t,e);return n.kept||(n=cn(n)),(await o.data())[0]?[void 0,n]:[n,void 0]}case"Merge":{let o=r.inputNames.find(n=>ze(n,t,e)!==void 0);if(o){let n=ze(o,t,e);return[cn(n)]}return}case"Enter":{let o=C("frameName",r,t,e),n=C("tensor",r,t,e);return e.enterFrame(o),[cn(n)]}case"Exit":{let o=C("tensor",r,t,e);return e.exitFrame(),[cn(o)]}case"NextIteration":{let o=C("tensor",r,t,e);return e.nextIteration(),[cn(o)]}case"TensorArrayV3":{let o=C("size",r,t,e),n=C("dtype",r,t,e),s=C("elementShape",r,t,e),i=C("dynamicSize",r,t,e),a=C("clearAfterRead",r,t,e),l=C("identicalElementShapes",r,t,e),u=C("name",r,t,e),c=new Mx(u,n,o,s,l,i,a);return e.addTensorArray(c),[c.idTensor,st(1)]}case"TensorArrayWriteV3":{let o=C("tensorArrayId",r,t,e),n=C("index",r,t,e),s=C("tensor",r,t,e),i=e.getTensorArray(o.id);return i.write(n,s),[i.idTensor]}case"TensorArrayReadV3":{let o=C("tensorArrayId",r,t,e),n=C("index",r,t,e);return[e.getTensorArray(o.id).read(n)]}case"TensorArrayGatherV3":{let o=C("tensorArrayId",r,t,e),n=C("indices",r,t,e),s=C("dtype",r,t,e);return[e.getTensorArray(o.id).gather(n,s)]}case"TensorArrayScatterV3":{let o=C("tensorArrayId",r,t,e),n=C("indices",r,t,e),s=C("tensor",r,t,e),i=e.getTensorArray(o.id);return i.scatter(n,s),[i.idTensor]}case"TensorArrayConcatV3":{let o=C("tensorArrayId",r,t,e),n=e.getTensorArray(o.id),s=C("dtype",r,t,e);return[n.concat(s)]}case"TensorArraySplitV3":{let o=C("tensorArrayId",r,t,e),n=C("tensor",r,t,e),s=C("lengths",r,t,e),i=e.getTensorArray(o.id);return i.split(s,n),[i.idTensor]}case"TensorArraySizeV3":{let o=C("tensorArrayId",r,t,e),n=e.getTensorArray(o.id);return[st(n.size(),"int32")]}case"TensorArrayCloseV3":{let o=C("tensorArrayId",r,t,e),n=e.getTensorArray(o.id);return n.clearAndClose(),[n.idTensor]}case"TensorListSetItem":{let o=C("tensorListId",r,t,e),n=C("index",r,t,e),s=C("tensor",r,t,e),i=e.getTensorList(o.id);return i.setItem(n,s),[i.idTensor]}case"TensorListGetItem":{let o=C("tensorListId",r,t,e),n=C("index",r,t,e),s=C("elementShape",r,t,e),i=C("elementDType",r,t,e);return[e.getTensorList(o.id).getItem(n,s,i)]}case"TensorListScatterV2":case"TensorListScatter":{let o=C("indices",r,t,e),n=C("tensor",r,t,e),s=C("elementShape",r,t,e),i=C("numElements",r,t,e),a=IE(n,o,s,i);return e.addTensorList(a),[a.idTensor]}case"TensorListReserve":case"EmptyTensorList":{let o=C("elementShape",r,t,e),n=C("elementDType",r,t,e),s;r.op==="TensorListReserve"?s="numElements":s="maxNumElements";let i=C(s,r,t,e),a=r.op==="TensorListReserve"?-1:i,l=TE(o,n,i,a);return e.addTensorList(l),[l.idTensor]}case"TensorListGather":{let o=C("tensorListId",r,t,e),n=C("indices",r,t,e),s=C("elementShape",r,t,e),i=C("elementDType",r,t,e);return[e.getTensorList(o.id).gather(n,i,s)]}case"TensorListStack":{let o=C("tensorListId",r,t,e),n=C("elementShape",r,t,e),s=C("elementDType",r,t,e),i=C("numElements",r,t,e);return[e.getTensorList(o.id).stack(n,s,i)]}case"TensorListFromTensor":{let o=C("tensor",r,t,e),n=C("elementShape",r,t,e),s=C("elementDType",r,t,e),i=vE(o,n,s);return e.addTensorList(i),[i.idTensor]}case"TensorListConcat":case"TensorListConcatV2":{let o=C("tensorListId",r,t,e),n=e.getTensorList(o.id),s=C("dtype",r,t,e),i=C("elementShape",r,t,e);return[n.concat(s,i)]}case"TensorListPushBack":{let o=C("tensorListId",r,t,e),n=C("tensor",r,t,e),s=e.getTensorList(o.id);return s.pushBack(n),[s.idTensor]}case"TensorListPopBack":{let o=C("tensorListId",r,t,e),n=C("elementShape",r,t,e),s=C("elementDType",r,t,e);return[e.getTensorList(o.id).popBack(n,s)]}case"TensorListSplit":{let o=C("tensor",r,t,e),n=C("elementShape",r,t,e),s=C("lengths",r,t,e),i=kE(o,s,n);return e.addTensorList(i),[i.idTensor]}case"TensorListLength":{let o=C("tensorListId",r,t,e),n=e.getTensorList(o.id);return[st(n.size(),"int32")]}case"TensorListResize":{let o=C("tensorListId",r,t,e),n=C("size",r,t,e),i=e.getTensorList(o.id).resize(n);return e.addTensorList(i),[i.idTensor]}default:throw TypeError(`Node type ${r.op} is not implemented`)}};function $E(r,t,e){let[o,n]=C("fusedOps",r,t,e),s=o==="biasadd",i=!s,a=n==="prelu",l=o==="fusedbatchnorm",u=C("numArgs",r,t,e);if(s){if(a&&u!==2)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!a&&s&&u!==1)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(l)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");let c=C("strides",r,t,e),p=ch(r,t,e),m=C("dataFormat",r,t,e).toUpperCase(),f=C("dilations",r,t,e),[h,g]=C("args",r,t,e);i&&(g=h,h=void 0);let d=C("leakyreluAlpha",r,t,e);return{stride:c,pad:p,dataFormat:m,dilations:f,biasArg:h,preluArg:g,activationFunc:n,leakyreluAlpha:d}}var AE=(r,t,e,o=Gt)=>{switch(r.op){case"Conv1D":{let n=C("stride",r,t,e),s=C("pad",r,t,e),i=C("dataFormat",r,t,e).toUpperCase(),a=C("dilation",r,t,e);return[o.conv1d(C("x",r,t,e),C("filter",r,t,e),n,s,i,a)]}case"Conv2D":{let n=C("strides",r,t,e),s=ch(r,t,e),i=C("dataFormat",r,t,e).toUpperCase(),a=C("dilations",r,t,e);return[o.conv2d(C("x",r,t,e),C("filter",r,t,e),[n[1],n[2]],s,i,[a[1],a[2]])]}case"_FusedConv2D":{let{stride:n,pad:s,dataFormat:i,dilations:a,biasArg:l,preluArg:u,activationFunc:c,leakyreluAlpha:p}=$E(r,t,e);return[o.fused.conv2d({x:C("x",r,t,e),filter:C("filter",r,t,e),strides:[n[1],n[2]],pad:s,dataFormat:i,dilations:[a[1],a[2]],bias:l,activation:c,preluActivationWeights:u,leakyreluAlpha:p})]}case"FusedDepthwiseConv2dNative":{let{stride:n,pad:s,dataFormat:i,dilations:a,biasArg:l,preluArg:u,activationFunc:c,leakyreluAlpha:p}=$E(r,t,e);return[o.fused.depthwiseConv2d({x:C("x",r,t,e),filter:C("filter",r,t,e),strides:[n[1],n[2]],pad:s,dataFormat:i,dilations:[a[1],a[2]],bias:l,activation:c,preluActivationWeights:u,leakyreluAlpha:p})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{let n=C("outputShape",r,t,e),s=C("strides",r,t,e),i=ch(r,t,e);return[o.conv2dTranspose(C("x",r,t,e),C("filter",r,t,e),n,[s[1],s[2]],i)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{let n=C("strides",r,t,e),s=ch(r,t,e),i=C("dilations",r,t,e),a=C("dataFormat",r,t,e).toUpperCase();return[o.depthwiseConv2d(C("input",r,t,e),C("filter",r,t,e),[n[1],n[2]],s,a,[i[1],i[2]])]}case"Conv3D":{let n=C("strides",r,t,e),s=C("pad",r,t,e),i=C("dataFormat",r,t,e).toUpperCase(),a=C("dilations",r,t,e);return[o.conv3d(C("x",r,t,e),C("filter",r,t,e),[n[1],n[2],n[3]],s,i,[a[1],a[2],a[3]])]}case"AvgPool":{let n=C("strides",r,t,e),s=C("pad",r,t,e),i=C("kernelSize",r,t,e);return[o.avgPool(C("x",r,t,e),[i[1],i[2]],[n[1],n[2]],s)]}case"MaxPool":{let n=C("strides",r,t,e),s=C("pad",r,t,e),i=C("kernelSize",r,t,e);return[o.maxPool(C("x",r,t,e),[i[1],i[2]],[n[1],n[2]],s)]}case"MaxPoolWithArgmax":{let n=C("strides",r,t,e),s=C("pad",r,t,e),i=C("kernelSize",r,t,e),a=C("includeBatchInIndex",r,t,e),{result:l,indexes:u}=o.maxPoolWithArgmax(C("x",r,t,e),[i[1],i[2]],[n[1],n[2]],s,a);return[l,u]}case"AvgPool3D":{let n=C("strides",r,t,e),s=C("pad",r,t,e),i=C("kernelSize",r,t,e);return[o.avgPool3d(C("x",r,t,e),[i[1],i[2],i[3]],[n[1],n[2],n[3]],s)]}case"MaxPool3D":{let n=C("strides",r,t,e),s=C("pad",r,t,e),i=C("kernelSize",r,t,e);return[o.maxPool3d(C("x",r,t,e),[i[1],i[2],i[3]],[n[1],n[2],n[3]],s)]}case"Dilation2D":{let n=C("strides",r,t,e),s=C("pad",r,t,e),i=C("dilations",r,t,e),a=n[1],l=n[2],u=i[1],c=i[2];return[o.dilation2d(C("x",r,t,e),C("filter",r,t,e),[a,l],s,[u,c],"NHWC")]}default:throw TypeError(`Node type ${r.op} is not implemented`)}};var DE=(r,t,e,o=Gt)=>{switch(r.op){case"Fill":{let n=C("shape",r,t,e),s=C("dtype",r,t,e),i=C("value",r,t,e);return[o.fill(n,i,s)]}case"LinSpace":{let n=C("start",r,t,e),s=C("stop",r,t,e),i=C("num",r,t,e);return[o.linspace(n,s,i)]}case"Multinomial":{let n=C("logits",r,t,e),s=C("numSamples",r,t,e),i=C("seed",r,t,e);return[o.multinomial(n,s,i)]}case"OneHot":{let n=C("indices",r,t,e),s=C("depth",r,t,e),i=C("onValue",r,t,e),a=C("offValue",r,t,e),l=C("dtype",r,t,e);return[o.oneHot(n,s,i,a,l)]}case"Ones":return[o.ones(C("shape",r,t,e),C("dtype",r,t,e))];case"OnesLike":return[o.onesLike(C("x",r,t,e))];case"RandomStandardNormal":return[o.randomStandardNormal(C("shape",r,t,e),C("dtype",r,t,e),C("seed",r,t,e))];case"RandomUniform":return[o.randomUniform(C("shape",r,t,e),C("minval",r,t,e),C("maxval",r,t,e),C("dtype",r,t,e))];case"RandomUniformInt":return[o.randomUniformInt(C("shape",r,t,e),C("minval",r,t,e),C("maxval",r,t,e),C("seed",r,t,e))];case"Range":{let n=C("start",r,t,e),s=C("stop",r,t,e),i=C("step",r,t,e);return[o.range(n,s,i,C("dtype",r,t,e))]}case"TruncatedNormal":{let n=C("shape",r,t,e),s=C("mean",r,t,e),i=C("stdDev",r,t,e),a=C("seed",r,t,e);return[o.truncatedNormal(n,s,i,C("dtype",r,t,e),a)]}case"Zeros":return[o.zeros(C("shape",r,t,e),C("dtype",r,t,e))];case"ZerosLike":return[o.zerosLike(C("x",r,t,e))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};function dC(r,t,e){let o=C("boxes",r,t,e),n=C("scores",r,t,e),s=C("maxOutputSize",r,t,e),i=C("iouThreshold",r,t,e),a=C("scoreThreshold",r,t,e),l=C("softNmsSigma",r,t,e);return{boxes:o,scores:n,maxOutputSize:s,iouThreshold:i,scoreThreshold:a,softNmsSigma:l}}var RE=async(r,t,e,o,n=Gt)=>{switch(r.op){case"NonMaxSuppressionV5":{let{boxes:s,scores:i,maxOutputSize:a,iouThreshold:l,scoreThreshold:u,softNmsSigma:c}=dC(r,t,e),p=await n.image.nonMaxSuppressionWithScoreAsync(s,i,a,l,u,c);return[p.selectedIndices,p.selectedScores]}case"NonMaxSuppressionV4":{let{boxes:s,scores:i,maxOutputSize:a,iouThreshold:l,scoreThreshold:u}=dC(r,t,e),c=C("padToMaxOutputSize",r,t,e),p=await n.image.nonMaxSuppressionPaddedAsync(s,i,a,l,u,c);return[p.selectedIndices,p.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{let{boxes:s,scores:i,maxOutputSize:a,iouThreshold:l,scoreThreshold:u}=dC(r,t,e);return[await n.image.nonMaxSuppressionAsync(s,i,a,l,u)]}case"Where":{let s=n.cast(C("condition",r,t,e),"bool"),i=[await n.whereAsync(s)];return s.dispose(),i}case"ListDiff":return n.setdiff1dAsync(C("x",r,t,e),C("y",r,t,e));default:throw TypeError(`Node type ${r.op} is not implemented`)}};var FE=(r,t,e,o=Gt)=>{switch(r.op){case"LowerBound":{let n=C("sortedSequence",r,t,e),s=C("values",r,t,e);return[o.lowerBound(n,s)]}case"TopKV2":{let n=C("x",r,t,e),s=C("k",r,t,e),i=C("sorted",r,t,e),a=o.topk(n,s,i);return[a.values,a.indices]}case"UpperBound":{let n=C("sortedSequence",r,t,e),s=C("values",r,t,e);return[o.upperBound(n,s)]}case"Unique":{let n=C("x",r,t,e),s=o.unique(n);return[s.values,s.indices]}case"UniqueV2":{let n=C("x",r,t,e),s=C("axis",r,t,e),i=o.unique(n,s);return[i.values,i.indices]}default:throw TypeError(`Node type ${r.op} is not implemented`)}};var _E=(r,t,e,o=Gt)=>{switch(r.op){case"Const":return t[r.name];case"PlaceholderWithDefault":let n=C("default",r,t,e);return[ze(r.name,t,e)||n];case"Placeholder":return[ze(r.name,t,e)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":{let c=C("x",r,t,e);return[cn(c)]}case"IdentityN":return C("x",r,t,e).map(c=>cn(c));case"Snapshot":let s=C("x",r,t,e);return[cn(s)];case"Shape":return[o.tensor1d(C("x",r,t,e).shape,"int32")];case"ShapeN":return C("x",r,t,e).map(c=>o.tensor1d(c.shape));case"Size":return[o.scalar(C("x",r,t,e).size,"int32")];case"Rank":return[o.scalar(C("x",r,t,e).rank,"int32")];case"NoOp":return[o.scalar(1)];case"Print":let i=C("x",r,t,e),a=C("data",r,t,e),l=C("message",r,t,e),u=C("summarize",r,t,e);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(l);for(let c=0;c<a.length;c++)console.log(Array.prototype.slice.call(a[c].dataSync()).slice(0,u));return[i];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var Bx=class{get id(){return this.handle.id}constructor(t,e){this.keyDType=t,this.valueDType=e,this.handle=st(0),this.tensorMap=new Map,ue(this.handle)}clearAndClose(){this.tensorMap.forEach(t=>t.dispose()),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return st(this.size(),"int32")}async import(t,e){this.checkKeyAndValueTensor(t,e);let o=await t.data();return this.tensorMap.forEach(n=>n.dispose()),this.tensorMap.clear(),M(()=>{let n=We(e),s=o.length,i=n.length;y.assert(s===i,()=>`The number of elements doesn't match, keys has ${s} elements, the values has ${i} elements.`);for(let a=0;a<s;a++){let l=o[a],u=n[a];ue(u),this.tensorMap.set(l,u)}return this.handle})}async find(t,e){this.checkKeyAndValueTensor(t,e);let o=await t.data();return M(()=>{let n=[];for(let s=0;s<o.length;s++){let i=o[s],a=this.findWithDefault(i,e);n.push(a)}return Ne(n)})}findWithDefault(t,e){let o=this.tensorMap.get(t);return o??e}checkKeyAndValueTensor(t,e){if(t.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${t.dtype}`);if(e.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${e.dtype}`)}};var OE=async(r,t,e,o)=>{switch(r.op){case"HashTable":case"HashTableV2":{let n=o.getHashTableHandleByName(r.name);if(n!=null)return[n];{let s=C("keyDType",r,t,e),i=C("valueDType",r,t,e),a=new Bx(s,i);return o.addHashTable(r.name,a),[a.handle]}}case"InitializeTable":case"InitializeTableV2":case"LookupTableImport":case"LookupTableImportV2":{let n=C("tableHandle",r,t,e,o),s=C("keys",r,t,e),i=C("values",r,t,e);return[await o.getHashTableById(n.id).import(s,i)]}case"LookupTableFind":case"LookupTableFindV2":{let n=C("tableHandle",r,t,e,o),s=C("keys",r,t,e),i=C("defaultValue",r,t,e);return[await o.getHashTableById(n.id).find(s,i)]}case"LookupTableSize":case"LookupTableSizeV2":{let n=C("tableHandle",r,t,e,o);return[o.getHashTableById(n.id).tensorSize()]}default:throw TypeError(`Node type ${r.op} is not implemented`)}};var LE=(r,t,e,o=Gt)=>{switch(r.op){case"ResizeBilinear":{let n=C("images",r,t,e),s=C("size",r,t,e),i=C("alignCorners",r,t,e),a=C("halfPixelCenters",r,t,e);return[o.image.resizeBilinear(n,[s[0],s[1]],i,a)]}case"ResizeNearestNeighbor":{let n=C("images",r,t,e),s=C("size",r,t,e),i=C("alignCorners",r,t,e),a=C("halfPixelCenters",r,t,e);return[o.image.resizeNearestNeighbor(n,[s[0],s[1]],i,a)]}case"CropAndResize":{let n=C("image",r,t,e),s=C("boxes",r,t,e),i=C("boxInd",r,t,e),a=C("cropSize",r,t,e),l=C("method",r,t,e),u=C("extrapolationValue",r,t,e);return[o.image.cropAndResize(n,s,i,a,l,u)]}case"ImageProjectiveTransformV3":{let n=C("images",r,t,e),s=C("transforms",r,t,e),i=C("outputShape",r,t,e),a=C("fillValue",r,t,e),l=C("interpolation",r,t,e),u=C("fillMode",r,t,e);return[o.image.transform(n,s,l.toLowerCase(),u.toLowerCase(),a,i)]}default:throw TypeError(`Node type ${r.op} is not implemented`)}};var PE=(r,t,e,o=Gt)=>{switch(r.op){case"Equal":return[o.equal(C("a",r,t,e),C("b",r,t,e))];case"NotEqual":return[o.notEqual(C("a",r,t,e),C("b",r,t,e))];case"Greater":return[o.greater(C("a",r,t,e),C("b",r,t,e))];case"GreaterEqual":return[o.greaterEqual(C("a",r,t,e),C("b",r,t,e))];case"Less":return[o.less(C("a",r,t,e),C("b",r,t,e))];case"LessEqual":return[o.lessEqual(C("a",r,t,e),C("b",r,t,e))];case"LogicalAnd":return[o.logicalAnd(C("a",r,t,e),C("b",r,t,e))];case"LogicalNot":return[o.logicalNot(C("a",r,t,e))];case"LogicalOr":return[o.logicalOr(C("a",r,t,e),C("b",r,t,e))];case"Select":case"SelectV2":return[o.where(C("condition",r,t,e),C("a",r,t,e),C("b",r,t,e))];case"BitwiseAnd":return[o.bitwiseAnd(C("a",r,t,e),C("b",r,t,e))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var zE=(r,t,e,o=Gt)=>{switch(r.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[o.matMul(C("a",r,t,e),C("b",r,t,e),C("transposeA",r,t,e),C("transposeB",r,t,e))];case"Einsum":return[o.einsum(C("equation",r,t,e),...C("tensors",r,t,e))];case"Transpose":return[o.transpose(C("x",r,t,e),C("perm",r,t,e))];case"_FusedMatMul":let[n,s]=C("fusedOps",r,t,e),i=n==="biasadd",a=s==="prelu",l=C("numArgs",r,t,e),u=C("leakyreluAlpha",r,t,e);if(i){if(a&&l!==2)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!a&&l!==1)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}let[c,p]=C("args",r,t,e);return[o.fused.matMul({a:C("a",r,t,e),b:C("b",r,t,e),transposeA:C("transposeA",r,t,e),transposeB:C("transposeB",r,t,e),bias:c,activation:s,preluActivationWeights:p,leakyreluAlpha:u})];case"MatrixBandPart":return[o.linalg.bandPart(C("a",r,t,e),C("numLower",r,t,e),C("numUpper",r,t,e))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var ME=(r,t,e,o=Gt)=>{switch(r.op){case"EuclideanNorm":return[o.euclideanNorm(C("x",r,t,e),C("axis",r,t,e),C("keepDims",r,t,e))];case"FusedBatchNorm":case"FusedBatchNormV2":return[o.batchNorm(C("x",r,t,e),C("mean",r,t,e),C("variance",r,t,e),C("offset",r,t,e),C("scale",r,t,e),C("epsilon",r,t,e))];case"FusedBatchNormV3":return[o.batchNorm(C("x",r,t,e),C("mean",r,t,e),C("variance",r,t,e),C("offset",r,t,e),C("scale",r,t,e),C("epsilon",r,t,e))];case"LRN":return[o.localResponseNormalization(C("x",r,t,e),C("radius",r,t,e),C("bias",r,t,e),C("alpha",r,t,e),C("beta",r,t,e))];case"Softmax":return[o.softmax(C("x",r,t,e))];case"LogSoftmax":return[o.logSoftmax(C("x",r,t,e))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var BE=(r,t,e,o=Gt)=>{switch(r.op){case"RaggedGather":{let{outputNestedSplits:n,outputDenseValues:s}=o.raggedGather(C("paramsNestedSplits",r,t,e),C("paramsDenseValues",r,t,e),C("indices",r,t,e),C("outputRaggedRank",r,t,e));return n.concat(s)}case"RaggedRange":{let{rtNestedSplits:n,rtDenseValues:s}=o.raggedRange(C("starts",r,t,e),C("limits",r,t,e),C("splits",r,t,e));return[n,s]}case"RaggedTensorToTensor":return[o.raggedTensorToTensor(C("shape",r,t,e),C("values",r,t,e),C("defaultValue",r,t,e),C("rowPartitionTensors",r,t,e),C("rowPartitionTypes",r,t,e))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var VE=(r,t,e,o=Gt)=>{switch(r.op){case"Max":{let a=C("axis",r,t,e),l=C("keepDims",r,t,e);return[o.max(C("x",r,t,e),a,l)]}case"Mean":{let a=C("axis",r,t,e),l=C("keepDims",r,t,e);return[o.mean(C("x",r,t,e),a,l)]}case"Min":{let a=C("axis",r,t,e),l=C("keepDims",r,t,e);return[o.min(C("x",r,t,e),a,l)]}case"Sum":{let a=C("axis",r,t,e),l=C("keepDims",r,t,e);return[o.sum(C("x",r,t,e),a,l)]}case"All":{let a=C("axis",r,t,e),l=C("keepDims",r,t,e);return[o.all(C("x",r,t,e),a,l)]}case"Any":{let a=C("axis",r,t,e),l=C("keepDims",r,t,e);return[o.any(C("x",r,t,e),a,l)]}case"ArgMax":{let a=C("axis",r,t,e);return[o.argMax(C("x",r,t,e),a)]}case"ArgMin":{let a=C("axis",r,t,e);return[o.argMin(C("x",r,t,e),a)]}case"Prod":{let a=C("axis",r,t,e),l=C("keepDims",r,t,e);return[o.prod(C("x",r,t,e),a,l)]}case"Cumprod":{let a=C("axis",r,t,e),l=C("exclusive",r,t,e),u=C("reverse",r,t,e);return[o.cumprod(C("x",r,t,e),a,l,u)]}case"Cumsum":{let a=C("axis",r,t,e),l=C("exclusive",r,t,e),u=C("reverse",r,t,e);return[o.cumsum(C("x",r,t,e),a,l,u)]}case"Bincount":let n=C("x",r,t,e),s=C("weights",r,t,e),i=C("size",r,t,e);return[o.bincount(n,s,i)];case"DenseBincount":{let a=C("x",r,t,e),l=C("weights",r,t,e),u=C("size",r,t,e),c=C("binaryOutput",r,t,e);return[o.denseBincount(a,l,u,c)]}default:throw TypeError(`Node type ${r.op} is not implemented`)}};var GE=(r,t,e,o=Gt)=>{switch(r.op){case"ConcatV2":case"Concat":{let n=C("n",r,t,e),s=C("axis",r,t,e),i=C("tensors",r,t,e);return i=i.slice(0,n),[o.concat(i,s)]}case"Gather":{let n=C("x",r,t,e),s=C("indices",r,t,e);return[o.gather(n,o.cast(s,"int32"),0)]}case"GatherV2":{let n=C("axis",r,t,e),s=C("batchDims",r,t,e),i=C("x",r,t,e),a=C("indices",r,t,e);return[o.gather(i,o.cast(a,"int32"),n,s)]}case"Reverse":{let n=C("dims",r,t,e),s=[];for(let a=0;a<n.length;a++)n[a]&&s.push(a);let i=C("x",r,t,e);return[o.reverse(i,s)]}case"ReverseV2":{let n=C("axis",r,t,e),s=C("x",r,t,e);return[o.reverse(s,n)]}case"Slice":{let n=C("begin",r,t,e),s=C("size",r,t,e);return[o.slice(C("x",r,t,e),n,s)]}case"StridedSlice":{let n=C("begin",r,t,e),s=C("end",r,t,e),i=C("strides",r,t,e),a=C("beginMask",r,t,e),l=C("endMask",r,t,e),u=C("ellipsisMask",r,t,e),c=C("newAxisMask",r,t,e),p=C("shrinkAxisMask",r,t,e),m=C("x",r,t,e);return[o.stridedSlice(m,n,s,i,a,l,u,c,p)]}case"Pack":return M(()=>{let n=C("axis",r,t,e),s=C("tensors",r,t,e),i=s[0].shape,a=o.squeeze(s[0]).shape,l=s.map(u=>{let c=y.arraysEqual(u.shape,i);if(!c&&!y.arraysEqual(o.squeeze(u).shape,a))throw new Error("the input tensors shape does not match");return c?u:o.reshape(u,i)});return[o.stack(l,n)]});case"Unpack":{let n=C("axis",r,t,e),s=C("tensor",r,t,e);return o.unstack(s,n)}case"Tile":{let n=C("reps",r,t,e);return[o.tile(C("x",r,t,e),n)]}case"Split":case"SplitV":{let n=C("axis",r,t,e),s=C("numOrSizeSplits",r,t,e),i=C("x",r,t,e);return o.split(i,s,n)}case"ScatterNd":{let n=C("indices",r,t,e),s=C("values",r,t,e),i=C("shape",r,t,e);return[o.scatterND(n,s,i)]}case"GatherNd":{let n=C("x",r,t,e),s=C("indices",r,t,e);return[o.gatherND(n,s)]}case"SparseToDense":{let n=C("sparseIndices",r,t,e),s=C("outputShape",r,t,e),i=C("sparseValues",r,t,e),a=C("defaultValue",r,t,e);return[o.sparseToDense(n,i,s,i.dtype===a.dtype?a:o.cast(a,i.dtype))]}case"TensorScatterUpdate":{let n=C("indices",r,t,e),s=C("values",r,t,e),i=C("tensor",r,t,e);return[o.tensorScatterUpdate(i,n,s)]}default:throw TypeError(`Node type ${r.op} is not implemented`)}};var WE=(r,t,e,o=Gt)=>{switch(r.op){case"SparseFillEmptyRows":{let{outputIndices:n,outputValues:s,emptyRowIndicator:i,reverseIndexMap:a}=o.sparse.sparseFillEmptyRows(C("indices",r,t,e),C("values",r,t,e),C("denseShape",r,t,e),C("defaultValue",r,t,e));return[n,s,i,a]}case"SparseReshape":{let{outputIndices:n,outputShape:s}=o.sparse.sparseReshape(C("inputIndices",r,t,e),C("inputShape",r,t,e),C("newShape",r,t,e));return[n,s]}case"SparseSegmentMean":return[o.sparse.sparseSegmentMean(C("data",r,t,e),C("indices",r,t,e),C("segmentIds",r,t,e))];case"SparseSegmentSum":return[o.sparse.sparseSegmentSum(C("data",r,t,e),C("indices",r,t,e),C("segmentIds",r,t,e))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var UE=(r,t,e,o=Gt)=>{switch(r.op){case"FFT":return[o.fft(C("x",r,t,e))];case"IFFT":return[o.ifft(C("x",r,t,e))];case"RFFT":return[o.rfft(C("x",r,t,e))];case"IRFFT":return[o.irfft(C("x",r,t,e))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var HE=(r,t,e,o=Gt)=>{switch(r.op){case"StaticRegexReplace":return[o.string.staticRegexReplace(C("input",r,t,e),C("pattern",r,t,e),C("rewrite",r,t,e),C("replaceGlobal",r,t,e))];case"StringNGrams":{let{nGrams:n,nGramsSplits:s}=o.string.stringNGrams(C("data",r,t,e),C("dataSplits",r,t,e),C("separator",r,t,e),C("nGramWidths",r,t,e),C("leftPad",r,t,e),C("rightPad",r,t,e),C("padWidth",r,t,e),C("preserveShortSequences",r,t,e));return[n,s]}case"StringSplit":{let{indices:n,values:s,shape:i}=o.string.stringSplit(C("input",r,t,e),C("delimiter",r,t,e),C("skipEmpty",r,t,e));return[n,s,i]}case"StringToHashBucketFast":return[o.string.stringToHashBucketFast(C("input",r,t,e),C("numBuckets",r,t,e))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var KE=(r,t,e,o=Gt)=>{switch(r.op){case"Cast":return[o.cast(C("x",r,t,e),C("dtype",r,t,e))];case"ExpandDims":{let n=C("axis",r,t,e);return[o.expandDims(C("x",r,t,e),n)]}case"Squeeze":{let n=C("axis",r,t,e);return[o.squeeze(C("x",r,t,e),n)]}case"Reshape":return[o.reshape(C("x",r,t,e),C("shape",r,t,e))];case"EnsureShape":return[o.ensureShape(C("x",r,t,e),C("shape",r,t,e))];case"MirrorPad":return[o.mirrorPad(C("x",r,t,e),C("padding",r,t,e),C("mode",r,t,e))];case"PadV2":case"Pad":return[o.pad(C("x",r,t,e),C("padding",r,t,e),C("constantValue",r,t,e))];case"SpaceToBatchND":{let n=C("blockShape",r,t,e),s=C("paddings",r,t,e);return[o.spaceToBatchND(C("x",r,t,e),n,s)]}case"BatchToSpaceND":{let n=C("blockShape",r,t,e),s=C("crops",r,t,e);return[o.batchToSpaceND(C("x",r,t,e),n,s)]}case"DepthToSpace":{let n=C("blockSize",r,t,e),s=C("dataFormat",r,t,e).toUpperCase();return[o.depthToSpace(C("x",r,t,e),n,s)]}case"BroadcastTo":return[o.broadcastTo(C("x",r,t,e),C("shape",r,t,e))];case"BroadcastArgs":return[o.broadcastArgs(C("s0",r,t,e),C("s1",r,t,e))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};function gC(r,t,e,o,n=M){let s=((i,a,l)=>{switch(i.category){case"arithmetic":return n(()=>CE(i,a,l));case"basic_math":return n(()=>SE(i,a,l));case"control":return EE(i,a,l);case"convolution":return n(()=>AE(i,a,l));case"creation":return n(()=>DE(i,a,l));case"dynamic":return RE(i,a,l);case"evaluation":return n(()=>FE(i,a,l));case"image":return n(()=>LE(i,a,l));case"graph":return n(()=>_E(i,a,l));case"logical":return n(()=>PE(i,a,l));case"matrices":return n(()=>zE(i,a,l));case"normalization":return n(()=>ME(i,a,l));case"ragged":return n(()=>BE(i,a,l));case"reduction":return n(()=>VE(i,a,l));case"slice_join":return n(()=>GE(i,a,l));case"sparse":return n(()=>WE(i,a,l));case"spectral":return n(()=>UE(i,a,l));case"string":return n(()=>HE(i,a,l));case"transformation":return n(()=>KE(i,a,l));case"hash_table":return OE(i,a,l,o);case"custom":let u=Tx(i.op);if(u&&u.customExecutor)return u.customExecutor(new Px(i,a,l));throw TypeError(`Custom op ${i.op} is not registered.`);default:throw TypeError(`Unknown op '${i.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(r,t,e);return y.isPromise(s)?s.then(i=>[].concat(i)):[].concat(s)}var mh=class{constructor(t={},e={},o={},n={},s){this.weightMap=t,this.tensorArrayMap=e,this.tensorListMap=o,this.functionMap=n,this.parseNodeNameCache=s,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(t,e){return{id:t,frameName:e,iterationId:0}}set currentContext(t){this.contexts!==t&&(this.contexts=t,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){let t=[];for(let e=0;e<this.contexts.length-1;e++){let o=this.contexts.slice(0,this.contexts.length-e);t.push(this.contextIdforContexts(o))}t.push(""),this._currentContextIds=t}contextIdforContexts(t){return t?t.map(e=>e.id===0&&e.iterationId===0?"":`${e.frameName}-${e.iterationId}`).join("/"):""}enterFrame(t){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,t)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(this.contexts&&this.contexts.length>1)this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift();else throw new Error("Cannot exit frame, the context is empty")}nextIteration(){if(this.contexts&&this.contexts.length>0){this.contexts=this.contexts.slice(),this.lastId++;let t=Object.assign({},this.contexts[this.contexts.length-1]);t.iterationId+=1,t.id=this.lastId,this.contexts.splice(-1,1,t),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}else throw new Error("Cannot increase frame iteration, the context is empty")}getWeight(t){return this.weightMap[t]}addTensorArray(t){this.tensorArrayMap[t.id]=t}getTensorArray(t){return this.tensorArrayMap[t]}addTensorList(t){this.tensorListMap[t.id]=t}getTensorList(t){return this.tensorListMap[t]}dispose(t){for(let e in this.tensorArrayMap)this.tensorArrayMap[e].clearAndClose(t);for(let e in this.tensorListMap)this.tensorListMap[e].clearAndClose(t)}};function xC(r,t,e,o){let n=new Set,s=[],i=null,a=null,l=new Set,u=new Set(Object.keys(r).map(m=>zr(m)[0]));o=o||[];let c=new Set(o.map(m=>zr(m.name)[0])),p=[...t];for(;p.length>0;){let m=p.pop();if((za(m)||gH(m)||xH(m))&&i==null&&(i=m,a=i.children.map(f=>f.name).filter(f=>n.has(f))),n.add(m.name),e[m.name]==null&&!u.has(m.name)&&!c.has(m.name)){if(m.inputs.length===0){s.push(m.name);continue}m.inputs.forEach(f=>{l.has(f.name)||(l.add(f.name),p.push(f))})}}return{inputs:r,outputs:t,usedNodes:n,missingInputs:s,dynamicNode:i,syncInputs:a}}function qE(r,t){let{usedNodes:e,inputs:o}=t,n=Object.keys(o).map(d=>zr(d)[0]).map(d=>r.nodes[d]),s=r.initNodes||[],i=d=>e.has(typeof d=="string"?d:d.name);function a(d){return[...new Map(d.map(x=>[x.name,x])).values()]}let l=a([...n,...r.weights,...s]).filter(i),u=a([...l,...Object.values(r.nodes)]).filter(i),c=new Map(u.map(d=>[d.name,d])),p={};for(let d of u){p[d.name]=p[d.name]||0;for(let x of d.children)i(x)||(p[x.name]=Number.POSITIVE_INFINITY),p[x.name]=(p[x.name]||0)+1}let m=Object.entries(p).filter(([,d])=>d===0).map(([d])=>d),f=[...m];for(;m.length>0;){let d=m.pop(),x=c.get(d);for(let b of x.children.filter(i))--p[b.name]===0&&(f.push(b.name),m.push(b.name))}let h=f.map(d=>c.get(d)),g=pH(h,l);return mH(g,l),g}function pH(r,t){let e=new Map(r.map(i=>[i.name,i])),o=t.map(i=>i.name),n=new Set(o);for(;o.length>0;){let i=o.pop(),a=e.get(i);for(let l of a.children)!e.has(l.name)||n.has(l.name)||(n.add(l.name),o.push(l.name))}return r.filter(i=>n.has(i.name))}var Ap=class extends Error{constructor(t){super(`NodesExecutionOrderError: ${t}`)}};function mH(r,t){let e=new Map(r.map((a,l)=>[a.name,l])),o=new Set(t.map(a=>a.name)),n=a=>o.has(typeof a=="string"?a:a.name),s=new Set(r.map(a=>a.name)),i=a=>s.has(typeof a=="string"?a:a.name);for(let a of r){for(let l of a.children.filter(i)){if(!e.has(l.name))throw new Ap(`Child ${l.name} of node ${a.name} is unreachable.`);if(e.get(a.name)>e.get(l.name))throw new Ap(`Node ${a.name} is scheduled to run after its child ${l.name}.`)}if(!n(a))for(let l of a.inputs){if(!e.has(l.name))throw new Ap(`Input ${l.name} of node ${a.name} is unreachable.`);if(e.get(l.name)>e.get(a.name))throw new Ap(`Node ${a.name} is scheduled to run before its input ${l.name}.`)}}}function jE(r){let t=new Map(r.map((a,l)=>[a.name,l])),e=Number.MAX_SAFE_INTEGER,o=r.map((a,l)=>za(a)?e:l),n=a=>{let l=o[t.get(a.name)];return l??-1},s=r.map((a,l)=>a.children.map(n).reduce((u,c)=>Math.max(u,c),o[l])),i=new Map;for(let a=0;a<r.length;++a){let l=s[a];if(l===e)continue;let u=r[a],c=r[l];i.has(c.name)||i.set(c.name,[]),i.get(c.name).push(u)}return i}var fH=new Set(["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"]),hH=new Set(["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"]),dH=new Set(["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"]);function za(r){return fH.has(r.op)}function gH(r){return hH.has(r.op)}function xH(r){return dH.has(r.op)}var Wl=class{get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(t){let e=Object.keys(t).map(o=>t[o].map(n=>n.id));this._weightIds=[].concat(...e),this._weightMap=t}set resourceManager(t){this._resourceManager=t}get inputs(){return this._inputs.map(t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0}))}get outputs(){return this._outputs.map(t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0}))}get inputNodes(){return this._inputs.map(t=>t.signatureKey||t.name)}get outputNodes(){return this._outputs.map(t=>{let e=t.signatureKey||t.name;return t.defaultOutput?`${e}:${t.defaultOutput}`:e})}get functions(){return Object.keys(this._functions).reduce((t,e)=>(t[e]=this._functions[e].signature,t),{})}constructor(t,e){this.graph=t,this.parent=e,this.compiledMap=new Map,this.parseNodeNameCache=new Map,this._weightMap={},this.SEPARATOR=",",this._functions={},this._functionExecutorMap={},this.keepIntermediateTensors=!1,this._outputs=t.outputs,this._inputs=t.inputs,this._initNodes=t.initNodes,this._signature=t.signature,this._functions=t.functions,t.functions!=null&&Object.keys(t.functions).forEach(o=>{this._functionExecutorMap[o]=new Wl(t.functions[o],this)})}getCompilationKey(t,e){let o=t.map(s=>s.name).sort(),n=e.map(s=>s.name).sort();return o.join(this.SEPARATOR)+"--"+n.join(this.SEPARATOR)}compile(t,e){let o=xC(t,e,this.weightMap,this._initNodes),{missingInputs:n,dynamicNode:s,syncInputs:i}=o;if(s!=null)throw new Error(`This execution contains the node '${s.name}', which has the dynamic op '${s.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${i}]`);if(n.length>0){let u=e.map(p=>p.name),c=Object.keys(t);throw new Error(`Cannot compute the outputs [${u}] from the provided inputs [${c}]. Missing the following inputs: [${n}]`)}let a=qE(this.graph,o),l=jE(a);return{orderedNodes:a,nodeLiveUntilMap:l}}cloneAndKeepTensor(t){if(t==null)return null;let e=t.clone();return ue(e),e}cloneTensorList(t){return t?t.map(o=>this.cloneAndKeepTensor(o)):null}cloneTensorMap(t){return Object.fromEntries(Object.entries(t).map(([e,o])=>[e,this.cloneTensorList(o)]))}execute(t,e){this.disposeIntermediateTensors(),t=this.mapInputs(t);let o=Object.keys(t).sort();this.checkInputs(t),this.checkInputShapeAndType(t),e=this.mapOutputs(e),this.checkOutputs(e);let n=o.map(m=>this.graph.nodes[zr(m)[0]]),s=e.map(m=>zr(m)[0]),i=new Set(s),a=s.map(m=>this.graph.nodes[m]);a.length===0&&(a=this._outputs);let l=this.getCompilationKey(n,a),u=this.compiledMap.get(l);u==null&&(u=this.compile(t,a),this.compiledMap.set(l,u));try{this.keepIntermediateTensors=z().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(m){this.keepIntermediateTensors=!1,console.warn(m.message)}let c={},p={};return M(()=>{let m=new mh(this.weightMap,c,p,this.functionExecutorMap,this.parseNodeNameCache),f=Object.assign({},this.weightMap);this.keepIntermediateTensors&&(this.clonedTensorsMap=this.cloneTensorMap(this.weightMap)),Object.keys(t).forEach(x=>{let[b,S]=zr(x,m),w=[];w[S]=t[x],f[b]=w,this.keepIntermediateTensors&&(this.clonedTensorsMap[b]=this.cloneTensorList(w))});let h=this.getFrozenTensorIds(f),{orderedNodes:g,nodeLiveUntilMap:d}=u;for(let x of g){if(f[x.name])continue;let b=gC(x,f,m,this._resourceManager);if(y.isPromise(b))throw new Error(`The execution of the op '${x.op}' returned a promise. Please use model.executeAsync() instead.`);f[x.name]=b,this.keepIntermediateTensors&&(this.clonedTensorsMap[x.name]=this.cloneTensorList(b)),this.checkTensorForDisposalWithNodeLiveUntilInfo(x,f,m,h,i,d.get(x.name))}return this.parent==null&&m.dispose(h),e.map(x=>ze(x,f,m))})}getFrozenTensorIds(t){let e=[].concat.apply([],Object.keys(t).map(o=>t[o]).map(o=>o.map(n=>n.id)));return new Set(e)}checkTensorForDisposal(t,e,o,n,s,i,a){if(!(za(e)||i.has(t))){for(let l of o[t])l!=null&&(a[l.id]=(a[l.id]||0)+e.children.length);for(let l of e.inputs){if(za(l))continue;let u=j0(l.name,o,n);if(u!=null)for(let c of u){if(!c||c.kept||s.has(c.id))continue;let p=a[c.id];p===1?(c.dispose(),delete a[c.id]):p!=null&&a[c.id]--}}}}checkTensorForDisposalWithNodeLiveUntilInfo(t,e,o,n,s,i){function a(l){return za(l)||s.has(l.name)}if(!(za(t)||i==null))for(let l of i){if(a(l))continue;let u=j0(l.name,e,o);for(let c of u)!c||c.kept||n.has(c.id)||c.dispose()}}async executeAsync(t,e){return this._executeAsync(t,e)}disposeIntermediateTensors(){this.clonedTensorsMap&&(Object.values(this.clonedTensorsMap).forEach(t=>{for(let e of t)e&&!e.isDisposed&&e.dispose()}),this.clonedTensorsMap=null)}getIntermediateTensors(){return this.clonedTensorsMap}async _executeAsync(t,e,o=!1,n={},s={}){this.disposeIntermediateTensors(),o||(t=this.mapInputs(t),this.checkInputs(t),this.checkInputShapeAndType(t),e=this.mapOutputs(e),this.checkOutputs(e));try{this.keepIntermediateTensors=z().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(m){this.keepIntermediateTensors=!1,console.warn(m.message)}let i=new mh(this.weightMap,n,s,this.functionExecutorMap,this.parseNodeNameCache);this.keepIntermediateTensors&&(this.clonedTensorsMap=this.cloneTensorMap(this.weightMap));let a=await this.executeWithControlFlow(t,i,e,o),l=e.map(m=>ze(m,a,i)),u=l.map(m=>m.id),c=Object.keys(t).map(m=>t[m].id),p=new Set([...u,...c,...this.weightIds]);return Object.values(a).forEach(m=>{m.forEach(f=>{f&&!f.isDisposed&&!p.has(f.id)&&f.dispose()})}),this.parent==null&&i.dispose(p),l}async executeFunctionAsync(t,e,o){let n=t.reduce((s,i,a)=>(s[this.inputs[a].name]=i,s),{});return this._executeAsync(n,this.outputNodes,!0,e,o)}async executeWithControlFlow(t,e,o,n){let s=Object.keys(t),i=s.map(w=>this.graph.nodes[zr(w)[0]]),a=o.map(w=>zr(w)[0]),l=new Set(a),u=a.map(w=>this.graph.nodes[w]);u.length===0&&(u=this._outputs);let{usedNodes:c,missingInputs:p,dynamicNode:m,syncInputs:f}=xC(t,u,this.weightMap,this._initNodes),h=[...i,...this.graph.weights,...this._initNodes||[]].map(w=>({node:w,contexts:e.currentContext})),g=Object.assign({},this.weightMap);Object.keys(t).forEach(w=>{let[T,$]=zr(w),R=[];R[$]=t[w],g[T]=R});let d={},x=this.getFrozenTensorIds(g),b={};for(;h.length>0;){let w=this.processStack(i,h,e,g,b,x,l,d,c);await Promise.all(w)}m==null&&!n&&console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");let S=u.filter(w=>!za(w)&&!ze(w.name,g,e)).map(w=>w.name);if(S.length>0){let w="";throw m!=null&&(w=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${f}]`),new Error(`Cannot compute the outputs [${S}] from the provided inputs [${s}]. Consider providing the following inputs: [${p}]. ${w}`)}return g}processStack(t,e,o,n,s,i,a,l,u){let c=[];for(;e.length>0;){let p=e.pop();o.currentContext=p.contexts;let m="";if(p.node.op==="Enter"&&C("isConstant",p.node,n,o)&&([m]=un(p.node.name,o)),n[p.node.name]==null){let f=gC(p.node,n,o,this._resourceManager);m||([m]=un(p.node.name,o));let h=o.currentContext;y.isPromise(f)?c.push(f.then(g=>(n[m]=g,this.keepIntermediateTensors&&(this.clonedTensorsMap[m]=this.cloneTensorList(g)),o.currentContext=h,this.checkTensorForDisposal(m,p.node,n,o,i,a,l),this.processChildNodes(p.node,e,o,n,s,u),g))):(n[m]=f,this.keepIntermediateTensors&&(this.clonedTensorsMap[m]=this.cloneTensorList(f)),this.checkTensorForDisposal(m,p.node,n,o,i,a,l),this.processChildNodes(p.node,e,o,n,s,u))}else this.processChildNodes(p.node,e,o,n,s,u)}return c}processChildNodes(t,e,o,n,s,i){t.children.forEach(a=>{let[l]=un(a.name,o);s[l]||!i.has(a.name)||(a.op==="Merge"?a.inputNames.some(u=>!!ze(u,n,o))&&(s[l]=!0,e.push({contexts:o.currentContext,node:a})):a.inputNames.every(u=>!!ze(u,n,o))&&(s[l]=!0,e.push({contexts:o.currentContext,node:a})))})}dispose(){Object.keys(this.weightMap).forEach(t=>this.weightMap[t].forEach(e=>e.dispose()))}checkInputShapeAndType(t){Object.keys(t).forEach(e=>{let o=t[e],[n]=zr(e),s=this.graph.nodes[n];if(s.attrParams.shape&&s.attrParams.shape.value){let i=s.attrParams.shape.value,a=i.length===o.shape.length&&o.shape.every((l,u)=>i[u]===-1||i[u]===l);y.assert(a,()=>`The shape of dict['${s.name}'] provided in model.execute(dict) must be [${i}], but was [${o.shape}]`)}s.attrParams.dtype&&s.attrParams.dtype.value&&y.assert(o.dtype===s.attrParams.dtype.value,()=>`The dtype of dict['${s.name}'] provided in model.execute(dict) must be ${s.attrParams.dtype.value}, but was ${o.dtype}`)})}mapInputs(t){var e,o;let n={};for(let s in t){let i=(o=(e=this._signature)===null||e===void 0?void 0:e.inputs)===null||o===void 0?void 0:o[s];i!=null?n[i.name]=t[s]:n[s]=t[s]}return n}checkInputs(t){let e=Object.keys(t).filter(o=>{let[n]=zr(o);return this.graph.nodes[n]==null});if(e.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${e}] that are not part of graph`)}mapOutputs(t){return t.map(e=>{var o,n;let s=(n=(o=this._signature)===null||o===void 0?void 0:o.outputs)===null||n===void 0?void 0:n[e];return s!=null?s.name:e},{})}checkOutputs(t){t.forEach(e=>{let[o]=zr(e);if(!this.graph.nodes[o])throw new Error(`The output '${e}' is not found in the graph`)})}};var Vx=class{constructor(t={},e={}){this.hashTableNameToHandle=t,this.hashTableMap=e}addHashTable(t,e){this.hashTableNameToHandle[t]=e.handle,this.hashTableMap[e.id]=e}getHashTableHandleByName(t){return this.hashTableNameToHandle[t]}getHashTableById(t){return this.hashTableMap[t]}dispose(){for(let t in this.hashTableMap)this.hashTableMap[t].clearAndClose(),delete this.hashTableMap[t];for(let t in this.hashTableNameToHandle)this.hashTableNameToHandle[t].dispose(),delete this.hashTableNameToHandle[t]}};var yH="?tfjs-format=file",bH="model.json",Gx=class{get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}get modelStructuredOutputKeys(){return this.structuredOutputKeys}constructor(t,e={},o=en){this.modelUrl=t,this.loadOptions=e,this.version="n/a",this.io=o,e==null&&(this.loadOptions={}),this.resourceManager=new Vx}findIOHandler(){let t=this.modelUrl;if(t.load!=null)this.handler=t;else if(this.loadOptions.requestInit!=null)this.handler=this.io.browserHTTPRequest(t,this.loadOptions);else{let e=this.io.getLoadHandlers(t,this.loadOptions);if(e.length===0)e.push(this.io.browserHTTPRequest(t,this.loadOptions));else if(e.length>1)throw new Error(`Found more than one (${e.length}) load handlers for URL '${[t]}'`);this.handler=e[0]}}load(){if(this.findIOHandler(),this.handler.load==null)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");let t=this.handler.load();return y.isPromise(t)?t.then(e=>this.loadSync(e)):this.loadSync(t)}loadSync(t){this.artifacts=t;let e=this.artifacts.modelTopology,o=this.artifacts.signature;if(this.artifacts.userDefinedMetadata!=null){let s=this.artifacts.userDefinedMetadata;s.signature!=null&&(o=s.signature),s.structuredOutputKeys!=null&&(this.structuredOutputKeys=s.structuredOutputKeys)}this.signature=o,this.version=`${e.versions.producer}.${e.versions.minConsumer}`;let n=this.io.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new Wl(ph.Instance.transformGraph(e,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(n),this.executor.resourceManager=this.resourceManager,t.modelInitializer!=null&&t.modelInitializer.node!=null){let s=ph.Instance.transformGraph(t.modelInitializer);this.initializer=new Wl(s),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializerSignature=t.initializerSignature}return!0}async save(t,e){if(typeof t=="string"){let o=this.io.getSaveHandlers(t);if(o.length===0)throw new Error(`Cannot find any save handlers for URL '${t}'`);if(o.length>1)throw new Error(`Found more than one (${o.length}) save handlers for URL '${t}'`);t=o[0]}if(t.save==null)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return t.save(this.artifacts)}addStructuredOutputNames(t){if(this.structuredOutputKeys){let e=t instanceof At?[t]:t,o={};return e.forEach((n,s)=>o[this.structuredOutputKeys[s]]=n),o}return t}predict(t,e){let o=this.execute(t,this.outputNodes);return this.addStructuredOutputNames(o)}async predictAsync(t,e){let o=await this.executeAsync(t,this.outputNodes);return this.addStructuredOutputNames(o)}normalizeInputs(t){var e;if(!(t instanceof At)&&!Array.isArray(t)){let s=(e=this.signature)===null||e===void 0?void 0:e.inputs;if(s!=null)for(let i in s){let a=s[i];a.resourceId!=null&&(t[i]=this.resourceIdToCapturedInput[a.resourceId])}return t}t=Array.isArray(t)?t:[t];let o=Object.keys(this.resourceIdToCapturedInput).length;if(t.length+o!==this.inputNodes.length)throw new Error(`Input tensor count mismatch, the graph model has ${this.inputNodes.length-o} non-resource placeholders, while there are ${t.length} input tensors provided.`);let n=0;return this.inputNodes.reduce((s,i)=>{var a,l,u;let c=(u=(l=(a=this.signature)===null||a===void 0?void 0:a.inputs)===null||l===void 0?void 0:l[i])===null||u===void 0?void 0:u.resourceId;return c!=null?s[i]=this.resourceIdToCapturedInput[c]:s[i]=t[n++],s},{})}normalizeOutputs(t){return t=t||this.outputNodes,Array.isArray(t)?t:[t]}executeInitializerGraph(){return this.initializer==null?[]:this.initializerSignature==null?this.initializer.execute({},[]):this.initializer.execute({},Object.keys(this.initializerSignature.outputs))}async executeInitializerGraphAsync(){return this.initializer==null?[]:this.initializerSignature==null?this.initializer.executeAsync({},[]):this.initializer.executeAsync({},Object.keys(this.initializerSignature.outputs))}setResourceIdToCapturedInput(t){if(this.resourceIdToCapturedInput={},this.initializerSignature){let e=this.initializerSignature.outputs,o=Object.keys(e);for(let n=0;n<o.length;n++){let s=o[n],i=e[s];this.resourceIdToCapturedInput[i.resourceId]=t[n]}}}execute(t,e){this.resourceIdToCapturedInput==null&&this.setResourceIdToCapturedInput(this.executeInitializerGraph()),t=this.normalizeInputs(t),e=this.normalizeOutputs(e);let o=this.executor.execute(t,e);return o.length>1?o:o[0]}async executeAsync(t,e){this.resourceIdToCapturedInput==null&&this.setResourceIdToCapturedInput(await this.executeInitializerGraphAsync()),t=this.normalizeInputs(t),e=this.normalizeOutputs(e);let o=await this.executor.executeAsync(t,e);return o.length>1?o:o[0]}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(t){return Object.keys(t).reduce((e,o)=>(e[o]=[t[o]],e),{})}dispose(){this.executor.dispose(),this.initializer&&(this.initializer.dispose(),this.resourceIdToCapturedInput&&xt(this.resourceIdToCapturedInput)),this.resourceManager.dispose()}};async function yC(r,t={},e=en){if(r==null)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");t==null&&(t={}),t.fromTFHub&&typeof r=="string"&&(r=wH(r));let o=new Gx(r,t,e);return await o.load(),o}function wH(r){return r.endsWith("/")||(r=r+"/"),`${r}${bH}${yH}`}var s$=sm(Tm());var r$=sm(Tm());function YE(r,t){return ZE(r,t)}function ZE(r,t,e=new Map,o=new Set){if(r==null)return null;if(typeof Blob=="function"&&r instanceof Blob)return r.slice();if(o.has(r))throw new Error("Circular references are not supported.");if(e.has(r))return e.get(r);let n=t(r);if(n.recurse&&n.value!==null)throw new Error("A deep map function may not return both a value and recurse=true.");if(n.recurse)if(Dp(r)){let s=Array.isArray(r)?[]:{};o.add(r);for(let i in r){let a=r[i],l=ZE(a,t,e,o);s[i]=l}return o.delete(r),r.__proto__&&(s.__proto__=r.__proto__),s}else throw new Error(`Can't recurse into non-iterable type: ${r}`);else return e.set(r,n.value),n.value}function JE(r,t=bC){return QE(r,t)}function QE(r,t,e=new Set){let o=r[0];if(e.has(o))throw new Error("Circular references are not supported.");let n=t(r);if(n.recurse&&n.value!==null)throw new Error("A deep zip function may not return both a value and recurse=true.");if(n.recurse)if(Dp(o)){let s=Array.isArray(o)?[]:{};e.add(o);for(let i in o){let a=r.map(u=>u[i]),l=QE(a,t,e);s[i]=l}return e.delete(o),s}else throw new Error(`Can't recurse into non-iterable type: ${o}`);else return n.value}function bC(r){return r===null?null:Dp(r[0])?{value:null,recurse:!0}:{value:r,recurse:!1}}function Dp(r){let t=!1;if(z().get("IS_BROWSER"))t=r instanceof TextDecoder;else{let{StringDecoder:e}=XE();t=r instanceof e}return r!=null&&!ArrayBuffer.isView(r)&&(Array.isArray(r)||typeof r=="object"&&!(r instanceof At)&&!(r instanceof Promise)&&!t)}function t$(r){return r==null||SH(r)||Array.isArray(r)||typeof r=="object"&&r instanceof At||y.isTypedArray(r)}function SH(r){return r===null||typeof r!="object"&&typeof r!="function"}function e$(r){return YE(r,NH)}function NH(r){return r instanceof At?{value:r.clone(),recurse:!1}:Dp(r)?{value:null,recurse:!0}:{value:r,recurse:!1}}var Rp=class{constructor(t){if(this.capacity=t,this.begin=0,this.end=0,t==null)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(t<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(t),this.doubledCapacity=2*t}wrap(t){for(;t<0;)t+=this.doubledCapacity;return t%this.doubledCapacity}get(t){if(t<0)throw new RangeError("Can't get item at a negative index.");return this.data[t%this.capacity]}set(t,e){if(t<0)throw new RangeError("Can't set item at a negative index.");this.data[t%this.capacity]=e}length(){let t=this.end-this.begin;return t<0&&(t=this.doubledCapacity+t),t}isFull(){return this.length()===this.capacity}isEmpty(){return this.length()===0}push(t){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,t),this.end=this.wrap(this.end+1)}pushAll(t){for(let e of t)this.push(e)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);let t=this.get(this.end);return this.set(this.end,void 0),t}unshift(t){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,t)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");let t=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),t}shuffleExcise(t){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");let e=this.wrap(this.begin+t),o=this.get(e);return this.set(e,this.pop()),o}};var Ul=class extends Rp{constructor(){super(Ul.INITIAL_CAPACITY)}isFull(){return!1}push(t){super.isFull()&&this.expand(),super.push(t)}unshift(t){super.isFull()&&this.expand(),super.unshift(t)}expand(){let t=this.capacity*2,e=new Array(t),o=this.length();for(let n=0;n<o;n++)e[n]=this.get(this.wrap(this.begin+n));this.data=e,this.capacity=t,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=o}};Ul.INITIAL_CAPACITY=32;function o$(r){return new wC(r)}function RC(r){return new CC(r)}function n$(r,t){return new Ux(r,t)}var ar=class{async toArray(){let t=[],e=await this.next();for(;!e.done;)t.push(e.value),e=await this.next();return t}async toArrayForTest(){let t=this.prefetch(100),e=[],o=await t.next();for(;!o.done;)e.push(o.value),o=await t.next();return e}async resolveFully(){let t=await this.next();for(;!t.done;)t=await this.next()}async resolveWhile(t){let e=await this.next(),o=t(e.value);for(;!e.done&&o;)e=await this.next(),o=t(e.value)}handleErrors(t){return new EC(this,t)}filter(t){return new IC(this,t)}map(t){return new kC(this,t)}mapAsync(t){return new Wx(this,t)}serialMapAsync(t){return new Wx(this,t).serial()}flatmap(t){return new $C(this,t)}async forEachAsync(t){return this.map(t).resolveFully()}async serialForEach(t){return this.serialMapAsync(t).resolveWhile(e=>e===!0)}rowMajorBatch(t,e=!0){return new TC(this,t,e)}columnMajorBatch(t,e=!0,o=bC){return this.rowMajorBatch(t,e).map(s=>JE(s,o))}concatenate(t,e){return new Ux(o$([this,t]),e)}take(t){return t<0||t==null?this:new vC(this,t)}skip(t){return t<0||t==null?this:new NC(this,t)}prefetch(t){return new Hx(this,t)}shuffle(t,e){return new DC(this,t,e)}serial(){return new SC(this)}},wC=class extends ar{constructor(t){super(),this.items=t,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};let t=this.items[this.trav];return this.trav++,{value:e$(t),done:!1}}},CC=class extends ar{constructor(t){super(),this.nextFn=t}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(t){throw t.message=`Error thrown while iterating through a dataset: ${t.message}`,t}}},SC=class extends ar{constructor(t){super(),this.upstream=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Serial`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){return this.upstream.next()}},NC=class extends ar{constructor(t,e){super(),this.upstream=t,this.maxCount=e,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Skip`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){let t=await this.upstream.next();if(t.done)return t;xt(t.value)}return this.upstream.next()}},vC=class extends ar{constructor(t,e){super(),this.upstream=t,this.maxCount=e,this.count=0}summary(){return`${this.upstream.summary()} -> Take`}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}},TC=class extends ar{constructor(t,e,o=!0){super(),this.upstream=t,this.batchSize=e,this.enableSmallLastBatch=o,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> RowMajorBatch`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){let t=[];for(;t.length<this.batchSize;){let e=await this.upstream.next();if(e.done)return this.enableSmallLastBatch&&t.length>0?{value:t,done:!1}:{value:null,done:!0};t.push(e.value)}return{value:t,done:!1}}},IC=class extends ar{constructor(t,e){super(),this.upstream=t,this.predicate=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Filter`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;;){let t=await this.upstream.next();if(t.done||this.predicate(t.value))return t;xt(t.value)}}},kC=class extends ar{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return`${this.upstream.summary()} -> Map`}async next(){let t=await this.upstream.next();if(t.done)return{value:null,done:!0};let e=$o.getTensorsInContainer(t.value),o=this.transform(t.value),n=$o.getTensorsInContainer(o);for(let s of e)$o.isTensorInList(s,n)||s.dispose();return{value:o,done:!1}}},EC=class extends ar{constructor(t,e){super(),this.upstream=t,this.handler=e,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> handleErrors`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(t){if(!this.handler(t))return{value:null,done:!0}}}},Wx=class extends ar{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return`${this.upstream.summary()} -> AsyncMap`}async next(){let t=await this.upstream.next();if(t.done)return{value:null,done:!0};let e=$o.getTensorsInContainer(t.value),o=await this.transform(t.value),n=$o.getTensorsInContainer(o);for(let s of e)$o.isTensorInList(s,n)||s.dispose();return{value:o,done:!1}}},fh=class extends ar{constructor(){super(),this.outputQueue=new Ul,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;this.outputQueue.length()===0;)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}},$C=class extends fh{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return`${this.upstream.summary()} -> Flatmap`}async pump(){let t=await this.upstream.next();if(t.done)return!1;let e=$o.getTensorsInContainer(t.value),o=this.transform(t.value),n=$o.getTensorsInContainer(o);this.outputQueue.pushAll(o);for(let s of e)$o.isTensorInList(s,n)||s.dispose();return!0}},Ux=class extends ar{constructor(t,e){super(),this.baseErrorHandler=e,this.lastRead=null,this.iterator=null,this.moreIterators=t}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(t){if(await t,this.iterator==null){let o=await this.moreIterators.next();if(o.done)return{value:null,done:!0};this.iterator=o.value,this.baseErrorHandler!=null&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}let e=await this.iterator.next();return e.done?(this.iterator=null,this.readFromChain(t)):e}},AC;(function(r){r[r.FAIL=0]="FAIL",r[r.SHORTEST=1]="SHORTEST",r[r.LONGEST=2]="LONGEST"})(AC||(AC={}));var Hx=class extends ar{constructor(t,e){super(),this.upstream=t,this.bufferSize=e,this.buffer=new Rp(e)}summary(){return`${this.upstream.summary()} -> Prefetch`}refill(){for(;!this.buffer.isFull();){let t=this.upstream.next();this.buffer.push(t)}}next(){return this.refill(),this.buffer.shift()}},DC=class extends Hx{constructor(t,e,o){super(t,e),this.upstream=t,this.windowSize=e,this.upstreamExhausted=!1,this.random=r$.alea(o||y.now().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}randomInt(t){return Math.floor(this.random()*t)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){let t=this.chooseIndex(),e=await this.buffer.shuffleExcise(t);if(e.done)this.upstreamExhausted=!0;else return this.refill(),e}return{value:null,done:!0}}};var Hl=class{constructor(){this.size=null}batch(t,e=!0){let o=this;y.assert(t>0,()=>`batchSize needs to be positive, but it is
      ${t}`);let n;return this.size===1/0||this.size==null?n=this.size:e?n=Math.ceil(this.size/t):n=Math.floor(this.size/t),pn(async()=>(await o.iterator()).columnMajorBatch(t,e,TH),n)}concatenate(t){let e=this,o;return this.size===1/0||t.size===1/0?o=1/0:this.size!=null&&t.size!=null?o=this.size+t.size:o=null,pn(async()=>(await e.iterator()).concatenate(await t.iterator()),o)}filter(t){let e=this,o;return this.size===1/0?o=1/0:o=null,pn(async()=>(await e.iterator()).filter(n=>M(()=>t(n))),o)}async forEachAsync(t){return(await this.iterator()).forEachAsync(t)}map(t){let e=this;return pn(async()=>(await e.iterator()).map(o=>M(()=>t(o))),this.size)}mapAsync(t){let e=this;return pn(async()=>(await e.iterator()).mapAsync(t),this.size)}prefetch(t){if(t==null)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");let e=this;return pn(async()=>(await e.iterator()).prefetch(t),this.size)}repeat(t){let e=this,o;return this.size!=null&&t>0?o=this.size*t:t===0?o=0:this.size!=null&&(t===void 0||t<0)?o=1/0:o=null,pn(async()=>{let n=RC(async()=>({value:await e.iterator(),done:!1}));return n$(n.take(t))},o)}skip(t){let e=this,o;return this.size!=null&&t>=0&&this.size>=t?o=this.size-t:this.size!=null&&(this.size<t||t===void 0||t<0)?o=0:o=null,pn(async()=>(await e.iterator()).skip(t),o)}shuffle(t,e,o=!0){if(t==null||t<0)throw this.size==null?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);let n=this,s=s$.alea(e||y.now().toString());return pn(async()=>{let i=s.int32();return o&&(i+=s.int32()),(await n.iterator()).shuffle(t,i.toString())},this.size)}take(t){let e=this,o;return this.size!=null&&this.size>t?o=t:this.size!=null&&this.size<=t?o=this.size:o=null,pn(async()=>(await e.iterator()).take(t),o)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}};Hl.MAX_BUFFER_SIZE=1e4;function pn(r,t=null){return new class extends Hl{constructor(){super(...arguments),this.size=t}async iterator(){return r()}}}function TH(r){if(r===null)return null;let t=r[0];return t$(t)?{value:IH(r),recurse:!1}:{value:null,recurse:!0}}function IH(r){if(r.length===0)throw new Error("Can't make a batch of zero elements.");return r[0]instanceof At?Ne(r):He(r)}var uJt=Symbol("out"),cJt=Symbol("field"),pJt=Symbol("quote"),mJt=Symbol("quoteafterquote"),fJt=Symbol("quoteinquote");function Y(r,t){Array.isArray(r)||(r=[r]),r.forEach(e=>{e!=null&&y.assert(e.dtype!=="complex64",()=>`${t} does not support complex64 tensors in the CPU backend.`)})}var LH=gr.whereImpl,Kl=class extends jn{nextDataId(){return Kl.nextDataId++}constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new qa(this,Wr())}write(t,e,o){this.firstUse&&(this.firstUse=!1,z().get("IS_NODE")&&I.warn(`
============================
Hi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. 
============================`));let n={id:this.nextDataId()};return this.data.set(n,{values:t,dtype:o,refCount:1}),n}makeTensorInfo(t,e,o){let n;if(e==="string"&&o!=null&&o.length>0&&y.isString(o[0])){let s=o.map(i=>y.encodeString(i));n=this.write(s,t,e)}else n=this.write(o,t,e);return{dataId:n,shape:t,dtype:e}}refCount(t){return this.data.has(t)?this.data.get(t).refCount:0}incRef(t){let e=this.data.get(t);e.refCount++}decRef(t){if(this.data.has(t)){let e=this.data.get(t);e.refCount--}}move(t,e,o,n,s){this.data.set(t,{values:e,dtype:n,refCount:s})}numDataIds(){return this.data.numDataIds()}async read(t){return this.readSync(t)}readSync(t){let{dtype:e,complexTensorInfos:o}=this.data.get(t);if(e==="complex64"){let n=this.readSync(o.real.dataId),s=this.readSync(o.imag.dataId);return I.mergeRealAndImagArrays(n,s)}return y.convertBackendValuesAndArrayBuffer(this.data.get(t).values,e)}bufferSync(t){let e=this.readSync(t.dataId);if(t.dtype==="string")try{let o=e.map(n=>y.decodeString(n));return mt(t.shape,t.dtype,o)}catch{throw new Error("Failed to decode encoded string bytes into utf-8")}return mt(t.shape,t.dtype,e)}makeOutput(t,e,o){return Wr().makeTensorFromTensorInfo(this.makeTensorInfo(e,o,t),this)}disposeData(t,e=!1){if(this.data.has(t)){if(this.data.get(t).refCount--,!e&&this.data.get(t).refCount>0)return!1;let{complexTensorInfos:o}=this.data.get(t);o!=null&&(this.disposeData(o.real.dataId,!0),this.disposeData(o.imag.dataId,!0)),this.data.delete(t)}return!0}disposeIntermediateTensorInfo(t){this.disposeData(t.dataId)}async time(t){let e=y.now();return t(),{kernelMs:y.now()-e}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(t){Y([t],"where");let e=this.readSync(t.dataId);return LH(t.shape,e)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}};Kl.nextDataId=0;var lS={};qt(lS,{addImpl:()=>OC,bincountImpl:()=>Op,bincountReduceImpl:()=>Kx,bitwiseAndImpl:()=>LC,castImpl:()=>_C,ceilImpl:()=>PC,concatImpl:()=>qx,equalImpl:()=>zC,expImpl:()=>BC,expm1Impl:()=>GC,floorDivImpl:()=>UC,floorImpl:()=>WC,gatherNdImpl:()=>jx,gatherV2Impl:()=>Xx,greaterEqualImpl:()=>KC,greaterImpl:()=>HC,lessEqualImpl:()=>jC,lessImpl:()=>qC,linSpaceImpl:()=>Yx,logImpl:()=>XC,maxImpl:()=>Zx,maximumImpl:()=>YC,minimumImpl:()=>ZC,multiplyImpl:()=>hh,negImpl:()=>JC,notEqualImpl:()=>QC,prodImpl:()=>tS,raggedGatherImpl:()=>Jx,raggedRangeImpl:()=>Qx,raggedTensorToTensorImpl:()=>ty,rangeImpl:()=>ey,rsqrtImpl:()=>eS,scatterImpl:()=>mn,sigmoidImpl:()=>L$,simpleAbsImpl:()=>FC,sliceImpl:()=>oS,sparseFillEmptyRowsImpl:()=>ry,sparseReshapeImpl:()=>oy,sparseSegmentReductionImpl:()=>zp,sqrtImpl:()=>M$,squaredDifferenceImpl:()=>nS,staticRegexReplaceImpl:()=>sS,stridedSliceImpl:()=>ny,stringNGramsImpl:()=>sy,stringSplitImpl:()=>iy,stringToHashBucketFastImpl:()=>ay,subImpl:()=>aS,tileImpl:()=>ly,topKImpl:()=>uy,transposeImpl:()=>Lp,uniqueImpl:()=>cy});function FC(r){let t=new Float32Array(r.length);for(let e=0;e<r.length;++e)t[e]=Math.abs(r[e]);return t}var PH=r=>{let{x:t}=r.inputs,e=r.backend;Y(t,"abs");let o=new Float32Array(y.sizeFromShape(t.shape)),n=e.data.get(t.dataId).values;return o=FC(n),e.makeOutput(o,t.shape,t.dtype)},i$={kernelName:gi,backendName:"cpu",kernelFunc:PH};function Ot(r){return(t,e,o,n,s)=>{let i=I.assertAndGetBroadcastShape(t,e),a=i.length,l=y.computeStrides(i),u=y.sizeFromShape(i),c=y.getTypedArrayFromDType(s,u),p=t.length,m=e.length,f=y.computeStrides(t),h=y.computeStrides(e),g=I.getBroadcastDims(t,i),d=I.getBroadcastDims(e,i);if(g.length+d.length===0)for(let x=0;x<c.length;++x)c[x]=r(o[x%o.length],n[x%n.length]);else for(let x=0;x<c.length;++x){let b=y.indexToLoc(x,a,l),S=b.slice(-p);g.forEach(R=>S[R]=0);let w=y.locToIndex(S,p,f),T=b.slice(-m);d.forEach(R=>T[R]=0);let $=y.locToIndex(T,m,h);c[x]=r(o[w],n[$])}return[c,i]}}function qe(r){let{inputs:t,backend:e}=r,{real:o,imag:n}=t,s=e.data.get(o.dataId).values,i=e.data.get(n.dataId).values,a=e.makeTensorInfo(o.shape,"complex64"),l=e.data.get(a.dataId);return l.complexTensorInfos={real:e.makeTensorInfo(o.shape,"float32",s),imag:e.makeTensorInfo(n.shape,"float32",i)},a}var a$={kernelName:bu,backendName:"cpu",kernelFunc:qe};function Fp(r,t,e="float32"){if(e==="complex64"){let n=Fp(r,t,"float32"),s=Fp(r,t,"float32");return qe({inputs:{real:n,imag:s},backend:r})}let o=y.makeZerosTypedArray(y.sizeFromShape(t),e);return r.makeTensorInfo(t,e,o)}function yr(r){let{inputs:t,backend:e}=r,{x:o}=t;return e.incRef(o.dataId),{dataId:o.dataId,shape:o.shape,dtype:o.dtype}}var l$={kernelName:yn,backendName:"cpu",kernelFunc:yr};function Wo(r){let{inputs:t,backend:e}=r,{input:o}=t,n=e.data.get(o.dataId).complexTensorInfos.real,s=e.data.get(n.dataId).values;return e.makeTensorInfo(n.shape,n.dtype,s)}var u$={kernelName:Zu,backendName:"cpu",kernelFunc:Wo};function _C(r,t,e,o){if(o==="int32"){let n=Int32Array.from(r);return[t,"int32",n]}if(o==="bool"){let n=y.toTypedArray([0],e),[s,i]=Ot((a,l)=>a!==l?1:0)(t,[],r,n,"bool");return[i,"bool",s]}throw new Error(`Error in Cast: failed to cast ${e} to ${o}`)}function Uo(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{dtype:s}=o;if(s==="complex64"){if(n.dtype==="complex64")return yr({inputs:{x:n},backend:e});let c=Fp(e,n.shape,n.dtype),p=Uo({inputs:{x:n},backend:e,attrs:{dtype:"float32"}}),m=qe({inputs:{real:p,imag:c},backend:e});return e.disposeIntermediateTensorInfo(c),e.disposeIntermediateTensorInfo(p),m}if(n.dtype==="complex64"){let c=Wo({inputs:{input:n},backend:e}),p=Uo({inputs:{x:c},backend:e,attrs:{dtype:s}});return e.disposeIntermediateTensorInfo(c),p}if(!y.hasEncodingLoss(n.dtype,s)){let c=yr({inputs:{x:n},backend:e});return{dataId:c.dataId,shape:c.shape,dtype:s}}let i=e.data.get(n.dataId).values,[a,l,u]=_C(i,n.shape,n.dtype,s);return e.makeTensorInfo(a,l,u)}var c$={kernelName:xn,backendName:"cpu",kernelFunc:Uo};function Bt(r,t,e,o){return e==null?({inputs:n,backend:s})=>{let{a:i,b:a}=n,l=s;Y([i,a],r);let u=l.data.get(i.dataId).values,c=l.data.get(a.dataId).values,p=i.dtype==="string"?I.fromUint8ToStringArray(u):u,m=i.dtype==="string"?I.fromUint8ToStringArray(c):c,f=o||i.dtype,[h,g]=t(i.shape,a.shape,p,m,f);return l.makeTensorInfo(g,f,h)}:({inputs:n,backend:s})=>{let{a:i,b:a}=n,l=s;if(i.dtype==="complex64"||a.dtype==="complex64"){let u=Uo({inputs:{x:i},backend:l,attrs:{dtype:"complex64"}}),c=l.data.get(u.dataId),p=c.complexTensorInfos.real,m=c.complexTensorInfos.imag,f=l.data.get(p.dataId).values,h=l.data.get(m.dataId).values,g=Uo({inputs:{x:a},backend:l,attrs:{dtype:"complex64"}}),d=l.data.get(g.dataId),x=d.complexTensorInfos.real,b=d.complexTensorInfos.imag,S=l.data.get(x.dataId).values,w=l.data.get(b.dataId).values,[T,$,R]=e(i.shape,a.shape,f,h,S,w),F=l.makeTensorInfo(R,"float32",T),O=l.makeTensorInfo(R,"float32",$),P=qe({inputs:{real:F,imag:O},backend:l});return l.disposeIntermediateTensorInfo(u),l.disposeIntermediateTensorInfo(g),l.disposeIntermediateTensorInfo(F),l.disposeIntermediateTensorInfo(O),P}else{let u=l.data.get(i.dataId).values,c=l.data.get(a.dataId).values,p=o||i.dtype,[m,f]=t(i.shape,a.shape,u,c,p);return l.makeTensorInfo(f,p,m)}}}function _p(r){return(t,e,o,n,s,i)=>{let a=I.assertAndGetBroadcastShape(t,e),l=y.sizeFromShape(a),u=a.length,c=y.computeStrides(a),p=y.getTypedArrayFromDType("float32",l),m=y.getTypedArrayFromDType("float32",l),f=I.getBroadcastDims(t,a),h=I.getBroadcastDims(e,a),g=I.mergeRealAndImagArrays(o,n),d=I.mergeRealAndImagArrays(s,i),x=t.length,b=y.computeStrides(t),S=e.length,w=y.computeStrides(e);if(f.length+h.length===0)for(let T=0;T<p.length;T++){let $=T%g.length,R=T%d.length,F=r(g[$*2],g[$*2+1],d[R*2],d[R*2+1]);p[T]=F.real,m[T]=F.imag}else for(let T=0;T<p.length;T++){let $=y.indexToLoc(T,u,c),R=$.slice(-x);f.forEach(V=>R[V]=0);let F=y.locToIndex(R,x,b),O=$.slice(-S);h.forEach(V=>O[V]=0);let P=y.locToIndex(O,S,w),B=r(g[F*2],g[F*2+1],d[P*2],d[P*2+1]);p[T]=B.real,m[T]=B.imag}return[p,m,a]}}var OC=Ot((r,t)=>r+t),zH=_p((r,t,e,o)=>({real:r+e,imag:t+o})),Bn=Bt(Yo,OC,zH),p$={kernelName:Yo,backendName:"cpu",kernelFunc:Bn};function Op(r,t,e,o,n){let s=y.sizeFromShape(o),i=y.makeZerosTypedArray(n,e);for(let a=0;a<r.length;a++){let l=r[a];if(l<0)throw new Error("Input x must be non-negative!");l>=n||(s>0?i[l]+=t[a]:i[l]+=1)}return i}function Kx(r,t,e,o=!1){let n=r.shape[0],s=r.shape[1],i=mt([n,e],t.dtype);for(let a=0;a<n;a++)for(let l=0;l<s;l++){let u=r.get(a,l);if(u<0)throw new Error("Input x must be non-negative!");u>=e||(o?i.set(1,a,u):t.size>0?i.set(i.get(a,u)+t.get(a,l),a,u):i.set(i.get(a,u)+1,a,u))}return i}var LC=Ot((r,t)=>r&t),MH=Bt(um,LC),m$={kernelName:um,backendName:"cpu",kernelFunc:MH};function tr(r){return(t,e,o)=>{let n=y.getArrayFromDType(e,t.length);for(let s=0;s<t.length;++s)n[s]=r(t[s],o);return n}}function Ct(r,t,e){let o=tr(t);return Yr(r,o,e)}function Yr(r,t,e){return({inputs:o,attrs:n,backend:s})=>{let{x:i}=o;Y(i,r);let a=s,l=a.data.get(i.dataId).values,u;if(i.dtype==="string"){if(!Array.isArray(l))throw new Error("String tensor's value was not an instance of Array");u=I.fromUint8ToStringArray(l)}else u=l;let c=e||i.dtype,p=t(u,c,n);return a.makeTensorInfo(i.shape,c,p)}}var PC=tr(r=>Math.ceil(r)),BH=Yr(os,PC),f$={kernelName:os,backendName:"cpu",kernelFunc:BH};function qx(r,t,e,o){let n=y.getArrayFromDType(e,y.sizeFromShape(t));if(o&&e!=="string"){let s=0;r.forEach(i=>{let a=y.sizeFromShape(i.shape);n.set(i.vals,s),s+=a})}else{let s=0;r.forEach(i=>{let a=e==="string"?I.fromUint8ToStringArray(i.vals):i.vals,l=0;for(let u=0;u<i.shape[0];++u){let c=u*t[1]+s;for(let p=0;p<i.shape[1];++p)n[c+p]=a[l++]}s+=i.shape[1]})}return n}var zC=Ot((r,t)=>r===t?1:0),MC=Bt(Za,zC,null,"bool"),h$={kernelName:Za,backendName:"cpu",kernelFunc:MC};var BC=tr(r=>Math.exp(r)),VC=Yr(cs,BC,"float32"),d$={kernelName:cs,backendName:"cpu",kernelFunc:VC};var GC=tr(r=>Math.expm1(r)),VH=Yr(ps,GC),g$={kernelName:ps,backendName:"cpu",kernelFunc:VH};var WC=tr(r=>Math.floor(r)),GH=Yr(ms,WC),x$={kernelName:ms,backendName:"cpu",kernelFunc:GH};var UC=Ot((r,t)=>Math.floor(r/t)),WH=Bt(fs,UC,null,"int32"),y$={kernelName:fs,backendName:"cpu",kernelFunc:WH};function jx(r,t,e,o,n,s,i,a,l){let u=mt([o,s],e);for(let c=0;c<o;c++){let p=[],m=0;for(let f=0;f<n;f++){let h=r[c*n+f];m+=h*i[f],p.push(h)}if(m<0||m>=l/s)throw new Error(`Invalid indices: ${p} does not index into ${a}`);for(let f=0;f<s;f++)u.values[c*s+f]=t.get(...t.indexToLoc(m*s+f))}return u}function Xx(r,t,e){let o=mt(e,r.dtype);for(let n=0;n<o.size;++n){let i=o.indexToLoc(n).slice(),a=i[0],l=i[2],u=t.locToIndex([a,l]);i[2]=t.values[u];let c=r.locToIndex(i);0<=c&&c<r.values.length&&(o.values[n]=r.values[c])}return o}var HC=Ot((r,t)=>r>t?1:0),UH=Bt(Ja,HC,null,"bool"),b$={kernelName:Ja,backendName:"cpu",kernelFunc:UH};var KC=Ot((r,t)=>r>=t?1:0),HH=Bt(hs,KC,null,"bool"),w$={kernelName:hs,backendName:"cpu",kernelFunc:HH};var qC=Ot((r,t)=>r<t?1:0),KH=Bt(Qa,qC,null,"bool"),C$={kernelName:Qa,backendName:"cpu",kernelFunc:KH};var jC=Ot((r,t)=>r<=t?1:0),qH=Bt(tl,jC,null,"bool"),S$={kernelName:tl,backendName:"cpu",kernelFunc:qH};function Yx(r,t,e){let o=(t-r)/(e-1),n=y.makeZerosTypedArray(e,"float32");n[0]=r;for(let s=1;s<n.length;s++)n[s]=n[s-1]+o;return n}var XC=tr(r=>Math.log(r)),jH=Yr(ys,XC),N$={kernelName:ys,backendName:"cpu",kernelFunc:jH};function Zx(r,t,e,o){let n=y.getTypedArrayFromDType(o,y.sizeFromShape(e));for(let s=0;s<n.length;++s){let i=s*t,a=r[i];for(let l=0;l<t;++l){let u=r[i+l];(Number.isNaN(u)||u>a)&&(a=u)}n[s]=a}return n}var YC=Ot((r,t)=>Math.max(r,t)),XH=Bt(ws,YC),v$={kernelName:ws,backendName:"cpu",kernelFunc:XH};var ZC=Ot((r,t)=>Math.min(r,t)),YH=Bt(Cs,ZC),T$={kernelName:Cs,backendName:"cpu",kernelFunc:YH};var hh=Ot((r,t)=>r*t),ZH=_p((r,t,e,o)=>({real:r*e-t*o,imag:r*o+t*e})),ql=Bt(Ns,hh,ZH),I$={kernelName:Ns,backendName:"cpu",kernelFunc:ql};function JC(r,t,e){let o=y.createScalarValue(-1,e);return hh([],t,o,r,e)}function JH(r){let{inputs:t,backend:e}=r,{x:o}=t;Y(o,"neg");let n=e.data.get(o.dataId).values,[s,i]=JC(n,o.shape,o.dtype);return e.makeTensorInfo(i,o.dtype,s)}var k$={kernelName:Wi,backendName:"cpu",kernelFunc:JH};var QC=Ot((r,t)=>r!==t?1:0),QH=Bt(nl,QC,null,"bool"),E$={kernelName:nl,backendName:"cpu",kernelFunc:QH};function Lp(r,t,e,o,n){let s=t.length,i=y.sizeFromShape(t),a=y.computeStrides(t),l=y.computeStrides(n),u=y.getTypedArrayFromDType(e,y.sizeFromShape(n));for(let c=0;c<i;++c){let p=y.indexToLoc(c,s,a),m=new Array(p.length);for(let h=0;h<m.length;h++)m[h]=p[o[h]];let f=y.locToIndex(m,s,l);u[f]=r[c]}return u}function be(r){let{inputs:t,attrs:e,backend:o}=r,{x:n}=t,{perm:s}=e;Y(n,"transpose");let i=n.shape.length,a=new Array(i);for(let p=0;p<a.length;p++)a[p]=n.shape[s[p]];let l=o.data.get(n.dataId).values,u=Lp(l,n.shape,n.dtype,s,a);return{dataId:o.write(u,a,n.dtype),shape:a,dtype:n.dtype}}var $$={kernelName:wn,backendName:"cpu",kernelFunc:be};function tS(r,t,e,o){let[n,s]=I.computeOutAndReduceShapes(r,o),i=Le(t,"int32"),a=y.makeZerosTypedArray(y.sizeFromShape(n),i),l=y.sizeFromShape(s);for(let u=0;u<a.length;++u){let c=u*l,p=1;for(let m=0;m<l;++m)p*=e[c+m];a[u]=p}return{outVals:a,outShape:n,outDtype:i}}function tK(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o;Y(n,"prod");let a=n.shape.length,l=y.parseAxisParam(s,n.shape),u=I.getAxesPermutation(l,a),c=l,p=n,m=[];u!=null&&(p=be({inputs:{x:n},backend:e,attrs:{perm:u}}),m.push(p),c=I.getInnerMostAxes(c.length,a));let f=e.data.get(p.dataId).values,{outVals:h,outShape:g,outDtype:d}=tS(p.shape,p.dtype,f,c),x=g;return i&&(x=I.expandShapeToKeepDim(g,l)),m.forEach(b=>e.disposeIntermediateTensorInfo(b)),e.makeTensorInfo(x,d,h)}var A$={kernelName:Xi,backendName:"cpu",kernelFunc:tK};function eK(r,t,e){r.forEach((o,n)=>{if(o<0||o>=e){let s=y.indexToLoc(n,t.length,y.computeStrides(t)).join(",");throw new Error(`indices[${s}] = ${o} is not in [0, ${e})`)}})}function rK(r,t){for(let e=0;e<r.length;++e){let o=r[e],n=e===r.length-1?t:r[e+1].length;if(o.length===0)throw new Error("Ragged splits may not be empty");if(o[0]<0)throw new Error("Ragged splits must be non-negative");if(o[o.length-1]>n)throw new Error("Ragged splits must not point past values");for(let s=1;s<o.length;++s)if(o[s-1]>o[s])throw new Error("Ragged splits must be sorted in ascending order")}}function oK(r,t,e,o){let n=[],s=0,i=t.length-1+e.length,a=new Array(i).fill(null).map(()=>[0]);rK(e,o);let l=1;for(let u=0;u<t.length-1;++u){l*=t[u];let c=t[u+1];for(let p=1;p<l+1;++p)a[u].push(p*c)}for(let u=0;u<r.length;++u){let c=r[u],p=r[u]+1;for(let m=0;m<e.length;++m){let f=e[m],h=m+t.length-1;if(h>=0){let g=a[h],d=g[g.length-1]-f[c];for(let x=c;x<p;++x)a[h].push(f[x+1]+d)}c=f[c],p=f[p]}p!==c&&(n.push([c,p]),s+=p-c)}return{outSplits:a,valueSlices:n,numValues:s}}function nK(r){let t=[];for(let e=0;e<r.length;++e){let o=r[e].length,n=y.getArrayFromDType("int32",o);t.push(n),r[e].forEach((s,i)=>n[i]=s)}return t}function D$(r,t){let e=r.slice(0,t);for(;e.length<t;)e.push(1);for(let o=t;o<r.length;o++)e[t-1]*=r[o];return e}function sK(r,t,e,o,n,s){let i=D$(t,2)[1],a=D$(s,2)[1],l=0;for(let u of e)for(let c=u[0];c<u[1];++c){for(let p=0;p<o;++p)n[l*a+p]=r[c*i+p];++l}}function iK(r,t,e,o,n){let s=t.slice();s[0]=n;let i=y.getArrayFromDType(e,y.sizeFromShape(s)),a=r.length,l=a===0?0:a/t[0];return sK(r,t,o,l,i,s),[i,s]}function Jx(r,t,e,o,n,s,i,a){if(r.length===0)throw new Error("paramsNestedSplits must be non empty");if(t[0].length===0)throw new Error("Split tensors must not be scalars");let l=t[0][0]-1;if(eK(s,i,l),o.length===0)throw new Error("params.rank must be nonzero");let u=o[0],{outSplits:c,valueSlices:p,numValues:m}=oK(s,i,r,u),f=nK(c),h=iK(e,o,n,p,m);return[f,h[0],h[1]]}var R$=2147483647;function Qx(r,t,e,o,n,s,i){if(t.length>1)throw new Error("starts must be a scalar or vector");if(n.length>1)throw new Error("limits must be a scalar or vector");if(i.length>1)throw new Error("deltas must be a scalar or vector");let a=t.length===0,l=n.length===0,u=i.length===0,c=[];a||c.push(t[0]),l||c.push(n[0]),u||c.push(i[0]);for(let d=1;d<c.length;++d)if(c[d]!==c[d-1])throw new Error("starts, limits, and deltas must have the same shape");let p=c.length===0?1:c[0],m=y.getArrayFromDType("int32",p+1);m[0]=0;for(let d=0;d<p;++d){let x=a?r[0]:r[d],b=l?o[0]:o[d],S=u?s[0]:s[d];if(S===0)throw new Error("Requires delta != 0");let w;if(S>0&&b<x||S<0&&b>x)w=0;else if(w=Math.ceil(Math.abs((b-x)/S)),w>R$)throw new Error(`Requires ((limit - start) / delta) <= ${R$}`);m[d+1]=m[d]+w}let f=m[p],h=y.getArrayFromDType(e,f),g=0;for(let d=0;d<p;++d){let x=m[d+1]-m[d],b=a?r[0]:r[d],S=u?s[0]:s[d];for(let w=0;w<x;++w)h[g++]=b,b+=S}return[m,h]}var Ho=I.RowPartitionType,Pp=class{constructor(t,e,o,n,s,i,a,l,u,c){this.shape=t,this.shapeShape=e,this.values=o,this.valuesShape=n,this.valuesDType=s,this.defaultValue=i,this.defaultValueShape=a,this.rowPartitionValues=l,this.rowPartitionValuesShapes=u,this.rowPartitionTypes=I.getRowPartitionTypesHelper(c),this.raggedRank=I.getRaggedRank(this.rowPartitionTypes)}getRowPartitionTypeByDimension(t){return this.rowPartitionTypes[0]===Ho.FIRST_DIM_SIZE?this.rowPartitionTypes[t+1]:this.rowPartitionTypes[t]}getRowPartitionTensor(t){return this.rowPartitionTypes[0]===Ho.FIRST_DIM_SIZE?this.rowPartitionValues[t+1]:this.rowPartitionValues[t]}getMaxWidth(t){let e=this.getRowPartitionTensor(t-1);switch(this.getRowPartitionTypeByDimension(t-1)){case Ho.VALUE_ROWIDS:return Pp.getMaxWidthValueRowID(e);case Ho.ROW_SPLITS:return Pp.getMaxWidthRowSplit(e);default:throw new Error(`Cannot handle partition type ${Ho[this.getRowPartitionTypeByDimension(t-1)]}`)}}static getMaxWidthRowSplit(t){let e=t.length;if(e===0||e===1)return 0;let o=0;for(let n=0;n<e-1;++n){let s=t[n+1]-t[n];s>o&&(o=s)}return o}static getMaxWidthValueRowID(t){let e=t.length;if(e===0)return 0;let o=0,n=t[0],s=0;for(let i=1;i<e;++i){let a=t[i];a!==n&&(n=a,s=Math.max(i-o,s),o=i)}return Math.max(e-o,s)}tensorShapeFromTensor(t,e,o=!0){if(e.length===0){if(t[0]===-1)return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return _$(t,o)}calculateOutputSize(t){let e=this.valuesShape,o=this.defaultValueShape;I.validateDefaultValueShape(o,e);let n=this.tensorShapeFromTensor(this.shape,this.shapeShape),i=I.combineRaggedTensorToTensorShapes(this.raggedRank,n,e);i[0]<0&&(i[0]=t);for(let a=1;a<=this.raggedRank;++a)i[a]<0&&(i[a]=this.getMaxWidth(a));return i}calculateFirstParentOutputIndex(t,e,o){let n=Math.min(t,o),s=[],i=0;for(let a=0;a<n;++a,i+=e)s.push(i);for(let a=n;a<t;++a)s.push(-1);return y.assert(s.length===t,()=>"Final length of result must be equal to firstDimension."),s}calculateOutputIndexRowSplit(t,e,o,n){let s=t.length,i=[];for(let a=0;a<s-1;++a){let l=t[a+1]-t[a],u=Math.min(n,l),c=e[a];c===-1&&(u=0);for(let p=0;p<u;++p)i.push(c),c+=o;for(let p=0;p<l-u;++p)i.push(-1)}if(s>0&&i.length!==t[s-1])throw new Error("Invalid row split size.");return i}calculateOutputIndexValueRowID(t,e,o,n){let s=t.length,i=[];if(s===0)return[];let a=0,l=t[0];if(l>=e.length)throw new Error(`Got currentValueRowId=${l}, which is not less than ${e.length}`);let u=e[l];i.push(u);for(let c=1;c<s;++c){let p=t[c];if(p===l)u>=0&&(++a,a<n?u+=o:u=-1);else{if(a=0,l=p,p>=e.length)throw new Error(`Got nextValueRowId=${p} which is not less than ${e.length}`);u=e[p]}i.push(u)}if(i.length!==t.length)throw new Error("Invalid row ids.");return i}calculateOutputIndex(t,e,o,n){let s=this.getRowPartitionTensor(t),i=this.getRowPartitionTypeByDimension(t);switch(i){case Ho.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(s,e,o,n);case Ho.ROW_SPLITS:if(s.length-1>e.length)throw new Error(`Row partition size is greater than output size: ${s.length-1} > ${e.length}`);return this.calculateOutputIndexRowSplit(s,e,o,n);default:throw new Error(`Unsupported partition type: ${Ho[i]}`)}}getFirstDimensionSize(){let t=this.rowPartitionValues[0];if(this.rowPartitionTypes.length===0)throw new Error("No row_partition_types given.");let e=this.rowPartitionTypes[0];switch(e){case Ho.FIRST_DIM_SIZE:return t[0];case Ho.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case Ho.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error(`Cannot handle type ${Ho[e]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");let e=this.getFirstDimensionSize(),o=this.calculateOutputSize(e),n=new Array(this.raggedRank+1);n[n.length-1]=1;for(let l=n.length-2;l>=0;--l)n[l]=n[l+1]*o[l+1];let s=_$(o,!1),i=y.getArrayFromDType(this.valuesDType,y.sizeFromShape(s));if(n[0]*o[0]>0){let l=this.calculateFirstParentOutputIndex(e,n[0],o[0]);for(let u=1;u<=this.raggedRank;++u)l=this.calculateOutputIndex(u-1,l,n[u],o[u]);this.setOutput(this.raggedRank,l,i,s)}return[s,i]}setOutput(t,e,o,n){if(o.length===0)return;let s=this.values,i=o,a=n.slice();a=a.slice(t+1);let l=y.sizeFromShape(a),u=e.length,c=this.defaultValue;if(c.length!==l&&c.length!==1){let h=this.defaultValueShape;M(()=>{let g=D(c,h);c=$n(g,a).dataSync()})}let p=0,m=0,f=0;for(let h=0;h<=u;++h){let g=h<u?e[h]:-1;if(g===f){++f;continue}if(m<f){let d=s.subarray(p*l),x=i.subarray(m*l),b=(f-m)*l;F$(x,d,b)}if(h>=u){let d=o.length;g=Math.floor(d/l)}if(g>f)if(this.defaultValue.length===1)i.subarray(f*l,g*l).fill(this.defaultValue[0]),f=g;else for(;g>f;){let d=i.slice(f*l);F$(d,c,l),++f}g<0?(p=h+1,m=f):(p=h,m=f,f=m+1)}}};function F$(r,t,e){for(let o=0;o<e;o++)r[o]=t[o]}function _$(r,t){let e=[];for(let o of r){if(o<0){if(!t)throw new Error(`Dimension ${o} must be >= 0`);if(o<-1)throw new Error(`Dimension ${o} must be >= -1`);o=-1}e.push(o)}return e}function ty(r,t,e,o,n,s,i,a,l,u){return new Pp(r,t,e,o,n,s,i,a,l,u).compute()}function ey(r,t,e,o){let n=r===t,s=r<t&&e<0,i=t<r&&e>1;if(n||s||i)return y.makeZerosTypedArray(0,o);let a=Math.abs(Math.ceil((t-r)/e)),l=y.makeZerosTypedArray(a,o);t<r&&e===1&&(e=-1),l[0]=r;for(let u=1;u<l.length;u++)l[u]=l[u-1]+e;return l}var eS=tr(r=>1/Math.sqrt(r)),aK=Yr($s,eS),O$={kernelName:$s,backendName:"cpu",kernelFunc:aK};function mn(r,t,e,o,n,s,i,a,l,u){let c=[o/n,n],p=r.values,m=t.values;if(o===0)return mt(e,t.dtype);let f=l instanceof Wt?l:mt(c,t.dtype);typeof l=="string"||typeof l=="number"?f.values.fill(l):typeof l=="boolean"&&f.values.fill(+l);for(let h=0;h<s;h++){let g=[],d=0;for(let x=0;x<i;x++){let b=p[h*i+x];g.push(b),d+=b*a[x]}if(d<0||d>=o/n)throw new Error(`Invalid indices: ${g} does not index into ${e}`);for(let x=0;x<n;x++)u?f.values[d*n+x]+=m[h*n+x]:f.values[d*n+x]=t.rank===0?m[0]:m[h*n+x]}return f}var L$=tr(r=>1/(1+Math.exp(-r))),rS=Ct(_s,r=>1/(1+Math.exp(-r))),P$={kernelName:_s,backendName:"cpu",kernelFunc:rS};function oS(r,t,e,o,n){let s=Ze.isSliceContinous(o,t,e),i=y.sizeFromShape(e),a=y.computeStrides(o);if(s){let p=Ze.computeFlatOffset(t,a);return n==="string"?r.slice(p,p+i):r.subarray(p,p+i)}let l=n==="string"?I.fromUint8ToStringArray(r):r,u=mt(o,n,l),c=mt(e,n);for(let p=0;p<c.size;++p){let m=c.indexToLoc(p),f=m.map((h,g)=>h+t[g]);c.set(u.get(...f),...m)}return n==="string"?I.fromStringArrayToUint8(c.values):c.values}function Ko(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{begin:s,size:i}=o;Y(n,"slice");let[a,l]=Ze.parseSliceParams(n,s,i);Ze.assertParamsValid(n,a,l);let u=e.data.get(n.dataId).values,c=oS(u,a,l,n.shape,n.dtype);return e.makeTensorInfo(l,n.dtype,c)}var z$={kernelName:ea,backendName:"cpu",kernelFunc:Ko};function ry(r,t,e,o,n,s,i){let a=t[0],l=s[0],u=new Array(l),c=new Array(a),p=t[1];if(l===0){if(a!==0)throw new Error(I.getSparseFillEmptyRowsIndicesDenseShapeMismatch(a));let d=y.getArrayFromDType(e,0),x=y.getArrayFromDType(n,0);return[d,[0,p],x,u,c]}let m=!0,f=0,h=new Array(l).fill(0);for(let d=0;d<a;++d){let x=r[d*p];if(x<0)throw new Error(I.getSparseFillEmptyRowsNegativeIndexErrorMessage(d,x));if(x>=l)throw new Error(I.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(d,x,l));++h[x],m=m&&x>=f,f=x}let g=!0;for(let d=0;d<l;++d){let x=h[d]===0;u[d]=x,g=g&&!x,h[d]=Math.max(h[d],1),d>0&&(h[d]+=h[d-1])}if(g&&m){let d=r,x=o;for(let b=0;b<a;++b)c[b]=b;return[d,[a,p],x,u,c]}else{let d=h[l-1],x=y.getArrayFromDType(e,d*p),b=y.getArrayFromDType(n,d),S=new Array(l).fill(0);for(let w=0;w<a;++w){let T=r[w*p],$=S[T],R=(T===0?0:h[T-1])+$;S[T]++;for(let F=0;F<p;++F)x[R*p+F]=r[w*p+F];b[R]=o[w],c[w]=R}for(let w=0;w<l;++w)if(S[w]===0){let $=w===0?0:h[w-1];x[$*p+0]=w;for(let R=1;R<p;++R)x[$*p+R]=0;b[$]=i}return[x,[d,p],b,u,c]}}function oy(r,t,e,o,n){let s=y.sizeFromShape(o),i=t[0],a=n.length,l=[],u=1,c=-1;for(let d=0;d<a;++d){let x=n[d];if(x===-1){if(c!==-1)throw new Error(I.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(c,d));c=d,l.push(1)}else{if(x<0)throw new Error(I.getSparseReshapeNegativeOutputDimErrorMessage(d,x));u*=x,l.push(x)}}if(c!==-1){if(u<=0)throw new Error(I.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());let d=Math.trunc(s/u);if(u*d!==s)throw new Error(I.getSparseReshapeInputOutputMultipleErrorMessage(o,l));l[c]=d}if(y.sizeFromShape(l)!==s)throw new Error(I.getSparseReshapeInputOutputMismatchErrorMessage(o,l));let m=o.length,f=[];if(m>0){f[m-1]=1;for(let d=m-2;d>=0;--d)f[d]=f[d+1]*o[d+1]}let h=[];if(a>0){h[a-1]=1;for(let d=a-2;d>=0;--d)h[d]=h[d+1]*l[d+1]}let g=y.getArrayFromDType(e,i*a);for(let d=0;d<i;++d){let x=0;for(let b=0;b<m;++b)x+=r[d*m+b]*f[b];for(let b=0;b<a;++b)g[d*a+b]=Math.trunc(x/h[b]),x%=h[b]}return[g,[i,a],l]}function zp(r,t,e,o,n,s=!1,i=0){let a=o.length,l=[t[0],r.length/t[0]],u=l[1],p=a>0?n[a-1]+1:0;if(p<0)throw new Error(I.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let m=t.slice();m[0]=p;let f=m.reduce((S,w)=>S*w,1),h=y.getArrayFromDType(e,f);if(a===0)return p>0&&h.fill(i),[h,m];if(p<=0)throw new Error(I.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let g=0,d=1,x=0,b=n[g];for(;;){let S=0;if(d<a){if(S=n[d],b===S){++d;continue}if(b>=S)throw new Error(I.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage())}if(b<0||b>=p)throw new Error(I.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(b,p));b>x&&h.fill(i,x*u,b*u);for(let w=g;w<d;++w){let T=o[w];if(T<0||T>=l[0])throw new Error(I.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(w,o[w],l[0]));for(let $=0;$<u;$++)h[b*u+$]+=r[T*u+$]}if(s)for(let w=0;w<u;w++)h[b*u+w]/=d-g;if(g=d,++d,x=b+1,b=S,d>a)break}return x<p&&h.fill(i,x*u,p*u),[h,m]}var M$=tr(r=>Math.sqrt(r)),lK=Ct(Ls,r=>Math.sqrt(r)),B$={kernelName:Ls,backendName:"cpu",kernelFunc:lK};var nS=Ot((r,t)=>{let e=r-t;return e*e}),uK=Bt(Ps,nS),V$={kernelName:Ps,backendName:"cpu",kernelFunc:uK};var sS=tr((r,t)=>{let{pattern:e,replaceGlobal:o,rewrite:n}=t;return r.replace(new RegExp(e,o?"g":""),n)}),cK=Yr(sl,sS),G$={kernelName:sl,backendName:"cpu",kernelFunc:cK};function ny(r,t,e,o){let n=mt(r,t.dtype);for(let s=0;s<n.size;s++){let i=n.indexToLoc(s),a=new Array(i.length);for(let l=0;l<a.length;l++)a[l]=i[l]*e[l]+o[l];n.set(t.get(...a),...i)}return n}var iS=class{constructor(t,e,o,n,s,i){this.separator=y.encodeString(t),this.nGramWidths=e,this.leftPad=y.encodeString(o),this.rightPad=y.encodeString(n),this.padWidth=s,this.preserveShort=i}getPadWidth(t){return Math.min(this.padWidth<0?t-1:this.padWidth,t-1)}getNumNGrams(t,e){let o=this.getPadWidth(e);return Math.max(0,t+2*o-e+1)}createNGrams(t,e,o,n,s,i){for(let a=0;a<s;++a){let l=this.getPadWidth(i),u=Math.max(0,l-a),c=Math.max(0,l-(s-(a+1))),p=i-(u+c),m=e+(u>0?0:a-l),f=0;f+=u*this.leftPad.length;for(let b=0;b<p;++b)f+=t[m+b].length;f+=c*this.rightPad.length;let h=u+c+p-1;f+=h*this.separator.length,o[n+a]=new Uint8Array(f);let g=o[n+a],d=0,x=b=>b.forEach(S=>g[d++]=S);for(let b=0;b<u;++b)x(this.leftPad),x(this.separator);for(let b=0;b<p-1;++b)x(t[m+b]),x(this.separator);if(p>0){x(t[m+p-1]);for(let b=0;b<c;++b)x(this.separator),x(this.rightPad)}else{for(let b=0;b<c-1;++b)x(this.rightPad),x(this.separator);x(this.rightPad)}}}compute(t,e){let o=t.length,n=e.length;if(n>0){let l=e[0];if(l!==0)throw new Error(`First split value must be 0, got ${l}`);for(let u=1;u<n;++u){let c=e[u]>=l;if(c=c&&e[u]<=o,!c)throw new Error(`Invalid split value ${e[u]}, must be in [${l}, ${o}]`);l=e[u]}if(l!==o)throw new Error(`Last split value must be data size. Expected ${o}, got ${l}`)}let s=n-1,i=y.getArrayFromDType("int32",n);if(o===0||n===0){let l=new Array(o);for(let u=0;u<=s;++u)i[u]=0;return[l,i]}i[0]=0;for(let l=1;l<=s;++l){let u=e[l]-e[l-1],c=0;this.nGramWidths.forEach(p=>{c+=this.getNumNGrams(u,p)}),this.preserveShort&&u>0&&c===0&&(c=1),i[l]=i[l-1]+c}let a=new Array(i[s]);for(let l=0;l<s;++l){let u=e[l],c=i[l];if(this.nGramWidths.forEach(p=>{let m=e[l+1]-e[l],f=this.getNumNGrams(m,p);this.createNGrams(t,u,a,c,f,p),c+=f}),this.preserveShort&&c===i[l]){let p=e[l+1]-e[l];if(p===0)continue;let m=p+2*this.padWidth,f=1;this.createNGrams(t,u,a,c,f,m)}}return[a,i]}};function sy(r,t,e,o,n,s,i,a){return new iS(e,o,n,s,i,a).compute(r,t)}function pK(r,t,e,o){if(!r.length)return;if(t.length===0){for(let s=0;s<r.length;++s)o.push(r.subarray(s,s+1));return}if(t.length===1){let s=t[0],i=r.indexOf(s);for(;i!==-1;){let a=r.subarray(0,i);(!e||a.length!==0)&&o.push(a),r=r.subarray(i+1),i=r.indexOf(s)}(!e||r.length!==0)&&o.push(r);return}let n=0;for(let s=0;s<r.length+1;s++)if(s===r.length||t.indexOf(r[s])!==-1){let i=r.subarray(n,s);(!e||i.length!==0)&&o.push(i),n=s+1}}function iy(r,t,e){let o=r.length,n=[],s=0,i=0,a=new Array(o);for(let m=0;m<o;++m){let f=n.length;pK(r[m],t,e,n);let h=n.length-f;a[m]=h,s+=h,i=Math.max(i,h)}let l=y.getArrayFromDType("int32",s*2),u=new Array(s),c=[o,i],p=0;for(let m=0;m<o;++m)for(let f=0;f<a[m];++f)l[p*2]=m,l[p*2+1]=f,u[p]=n[p],++p;return[l,u,c]}function ay(r,t){let e=y.getArrayFromDType("int32",r.length);for(let o=0;o<r.length;++o)e[o]=y.fingerPrint64(r[o]).modulo(t).getLowBitsUnsigned();return e}var aS=Ot((r,t)=>r-t),mK=_p((r,t,e,o)=>({real:r-e,imag:t-o})),dh=Bt(zs,aS,mK),W$={kernelName:zs,backendName:"cpu",kernelFunc:dh};function ly(r,t){let e=new Array(r.rank);for(let n=0;n<e.length;n++)e[n]=r.shape[n]*t[n];let o=mt(e,r.dtype);for(let n=0;n<o.values.length;++n){let s=o.indexToLoc(n),i=new Array(r.rank);for(let l=0;l<i.length;l++)i[l]=s[l]%r.shape[l];let a=r.locToIndex(i);o.values[n]=r.values[a]}return o}var gh=(r,t)=>{let e=t.value-r.value;return e===0?r.index-t.index:e};function U$(r,t,e=0,o=r.length-1){for(;o>e;){if(o-e>600){let a=o-e+1,l=t-e+1,u=Math.log(a),c=.5*Math.exp(2*u/3),p=.5*Math.sqrt(u*c*(a-c)/a)*Math.sign(l-a/2),m=Math.max(e,Math.floor(t-l*c/a+p)),f=Math.min(o,Math.floor(t+(a-l)*c/a+p));U$(r,t,m,f)}let n=r[t],s=e,i=o;for(y.swap(r,e,t),gh(r[o],n)>0&&y.swap(r,e,o);s<i;){for(y.swap(r,s,i),s++,i--;gh(r[s],n)<0;)s=s+1;for(;gh(r[i],n)>0;)i=i-1}gh(r[e],n)===0?y.swap(r,e,i):(i=i+1,y.swap(r,i,o)),i<=t&&(e=i+1),t<=i&&(o=i-1)}}function uy(r,t,e,o,n){let s=t[t.length-1],[i,a]=[r.length/s,s],l=y.getTypedArrayFromDType(e,i*o),u=y.getTypedArrayFromDType("int32",i*o);for(let p=0;p<i;p++){let m=p*a,f=r.subarray(m,m+a),h=new Array(f.length);f.forEach((b,S)=>h[S]={value:b,index:S}),o<h.length&&(U$(h,o),h=h.slice(0,o)),n&&h.sort(gh);let g=p*o,d=l.subarray(g,g+o),x=u.subarray(g,g+o);for(let b=0;b<o;b++)d[b]=h[b].value,x[b]=h[b].index}let c=t.slice();return c[c.length-1]=o,[mt(c,e,l),mt(c,"int32",u)]}function cy(r,t,e,o){let n=y.parseAxisParam(t,e)[0],s=[1,e[0],1];for(let h=0;h<n;h++)s[0]*=e[h];s[1]=e[n];for(let h=n+1;h<e.length;h++)s[2]*=e[h];let i=new Map,a=new Int32Array(e[n]),l=new Wt(s,o,r),u=[],c=s[0]===1&&s[2]===1;for(let h=0;h<e[n];h++){let g;if(c)g=r[h].toString();else{let x=[];for(let b=0;b<s[0];b++)for(let S=0;S<s[2];S++)x.push(l.get(b,h,S));g=x.join(",")}let d=i.get(g);if(d!=null)a[h]=d;else{let x=i.size;i.set(g,x),a[h]=x,u.push(h)}}let p=s.slice();p[1]=i.size;let m=new Wt(p,o);u.forEach((h,g)=>{for(let d=0;d<s[0];d++)for(let x=0;x<s[2];x++)m.set(l.get(d,h,x),d,g,x)});let f=e.slice();return f[n]=p[1],{outputValues:m.values,outputShape:f,indices:a}}nd("cpu",()=>new Kl,1);var uS=Ct(ls,r=>r>=0?r:Math.exp(r)-1),H$={kernelName:ls,backendName:"cpu",kernelFunc:uS};function cS(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{alpha:s}=o;Y([n],"leakyRelu");let i=y.sizeFromShape(n.shape),a=e.data.get(n.dataId).values,l=y.getTypedArrayFromDType("float32",i);for(let u=0;u<a.length;u++)l[u]=a[u]<0?s*a[u]:a[u];return e.makeTensorInfo(n.shape,"float32",l)}var K$={kernelName:Oi,backendName:"cpu",kernelFunc:cS};var fK=Ot((r,t)=>r<0?t*r:r);function pS(r){let{inputs:t,backend:e}=r,{x:o,alpha:n}=t;Y([o,n],"prelu");let s=e.data.get(o.dataId).values,i=e.data.get(n.dataId).values,[a,l]=fK(o.shape,n.shape,s,i,"float32");return e.makeTensorInfo(l,"float32",a)}var q$={kernelName:ji,backendName:"cpu",kernelFunc:pS};var mS=Ct(Is,r=>Math.max(0,r)),j$={kernelName:Is,backendName:"cpu",kernelFunc:mS};var fS=Ct(ks,r=>Math.min(Math.max(0,r),6)),X$={kernelName:ks,backendName:"cpu",kernelFunc:fS};function jl(r,t,e,o,n){if(e==="linear")return yr({inputs:{x:t},backend:r});if(e==="relu")return mS({inputs:{x:t},backend:r});if(e==="elu")return uS({inputs:{x:t},backend:r});if(e==="relu6")return fS({inputs:{x:t},backend:r});if(e==="prelu")return pS({inputs:{x:t,alpha:o},backend:r});if(e==="leakyrelu")return cS({inputs:{x:t},backend:r,attrs:{alpha:n}});if(e==="sigmoid")return rS({inputs:{x:t},backend:r});throw new Error(`Activation ${e} has not been implemented for the CPU backend.`)}function Lt(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{shape:s}=o,i=y.sizeFromShape(n.shape),a=y.inferFromImplicitShape(s,i),l=y.sizeFromShape(a);y.assert(i===l,()=>`The new shape (${a}) has ${l} elements and the old shape (${n.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`),e.incRef(n.dataId);let u=e.data.get(n.dataId);if(u.complexTensorInfos!=null){let c=u.complexTensorInfos.real,p=u.complexTensorInfos.imag;c.shape=a,p.shape=a}return{dataId:n.dataId,shape:a,dtype:n.dtype}}var Y$={kernelName:Yi,backendName:"cpu",kernelFunc:Lt};function hS(r){let{inputs:t,backend:e,attrs:o}=r,{a:n,b:s}=t,{transposeA:i,transposeB:a}=o;Y([n,s],"matMul");let l=n.shape.length,u=s.shape.length,c=i?n.shape[l-2]:n.shape[l-1],p=a?s.shape[u-1]:s.shape[u-2],m=i?n.shape[l-1]:n.shape[l-2],f=a?s.shape[u-2]:s.shape[u-1],h=n.shape.slice(0,-2),g=s.shape.slice(0,-2),d=y.sizeFromShape(h),x=y.sizeFromShape(g),S=no.assertAndGetBroadcastShape(n.shape.slice(0,-2),s.shape.slice(0,-2)).concat([m,f]);y.assert(c===p,()=>`Error in matMul: inner shapes (${c}) and (${p}) of Tensors with shapes ${n.shape} and ${s.shape} and transposeA=${i} and transposeB=${a} must match.`);let w=i?[d,c,m]:[d,m,c],T=a?[x,f,p]:[x,p,f],$=Lt({inputs:{x:n},backend:e,attrs:{shape:w}}),R=Lt({inputs:{x:s},backend:e,attrs:{shape:T}}),F=i?$.shape[1]:$.shape[2],O=i?$.shape[2]:$.shape[1],P=a?R.shape[1]:R.shape[2],B=Math.max(d,x),V=e.data.get($.dataId).values,G=e.data.get(R.dataId).values,H=y.computeStrides($.shape),W=y.computeStrides(R.shape),[j,Z,q]=i?[H[0],1,H[1]]:[H[0],H[1],1],[J,et,rt]=a?[1,W[1],W[0]]:[W[1],1,W[0]],at=O*P,it=mt([B,O,P],$.dtype),ct=it.values,lt=e.blockSize;for(let ft=0;ft<B;ft++){let St=ft%d,kt=ft%x;for(let vt=0;vt<O;vt+=lt){let zt=Math.min(vt+lt,O);for(let Mt=0;Mt<P;Mt+=lt){let ie=Math.min(Mt+lt,P);for(let me=0;me<F;me+=lt){let Oe=Math.min(me+lt,F);for(let fe=vt;fe<zt;fe++)for(let le=Mt;le<ie;le++){let Re=0;for(let ve=me;ve<Oe;ve++){let Kn=V[St*j+fe*Z+ve*q],pr=G[ve*J+le*et+kt*rt];Re+=Kn*pr}ct[ft*at+(fe*P+le)]+=Re}}}}}return e.disposeIntermediateTensorInfo($),e.disposeIntermediateTensorInfo(R),e.makeTensorInfo(S,it.dtype,it.values)}var Z$={kernelName:Si,backendName:"cpu",kernelFunc:hS};function hK(r){let{inputs:t,backend:e,attrs:o}=r,{a:n,b:s,bias:i,preluActivationWeights:a}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:p}=o,m,f,h,g=[];m=hS({inputs:{a:n,b:s},attrs:{transposeA:l,transposeB:u},backend:e}),i&&(f=Bn({inputs:{a:m,b:i},backend:e}),g.push(m),m=f),c&&(h=jl(e,m,c,a,p),g.push(m),m=h);for(let x of g)e.disposeIntermediateTensorInfo(x);return m}var J$={kernelName:il,backendName:"cpu",kernelFunc:hK};var dK=Ct(Yn,r=>Math.acos(r)),Q$={kernelName:Yn,backendName:"cpu",kernelFunc:dK};var gK=Ct(Zn,r=>Math.acosh(r)),tA={kernelName:Zn,backendName:"cpu",kernelFunc:gK};function xK(r){let{inputs:t,backend:e}=r,o=t;Y(t,"addN");let n=o.map(a=>e.data.get(a.dataId).values),s=mt(o[0].shape,o[0].dtype),i=s.values;for(let a=0;a<o.length;a++){let l=n[a];for(let u=0;u<i.length;u++)i[u]+=l[u]}return e.makeTensorInfo(s.shape,s.dtype,s.values)}var eA={kernelName:xi,backendName:"cpu",kernelFunc:xK};function yK(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o;Y(n,"all");let a=y.parseAxisParam(s,n.shape),l=a,u=I.getAxesPermutation(l,n.shape.length),c=n;u!=null&&(c=be({inputs:{x:n},backend:e,attrs:{perm:u}}),l=I.getInnerMostAxes(l.length,n.shape.length)),I.assertAxesAreInnerMostDims("all",l,c.shape.length);let[p,m]=I.computeOutAndReduceShapes(c.shape,l),f=y.sizeFromShape(m),h=y.makeZerosTypedArray(y.sizeFromShape(p),c.dtype),g=e.data.get(c.dataId).values;for(let x=0;x<h.length;++x){let b=x*f,S=g[b];for(let w=0;w<f;++w){let T=g[b+w];S=S&&T}h[x]=S}u!=null&&e.disposeIntermediateTensorInfo(c);let d=e.makeTensorInfo(p,c.dtype,h);if(i){let x=I.expandShapeToKeepDim(p,a),b=Lt({inputs:{x:d},backend:e,attrs:{shape:x}});return e.disposeIntermediateTensorInfo(d),b}return d}var rA={kernelName:fu,backendName:"cpu",kernelFunc:yK};function bK(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o;Y(n,"any");let a=y.parseAxisParam(s,n.shape),l=a,u=I.getAxesPermutation(l,n.shape.length),c=n;u!=null&&(c=be({inputs:{x:n},backend:e,attrs:{perm:u}}),l=I.getInnerMostAxes(l.length,n.shape.length)),I.assertAxesAreInnerMostDims("any",l,c.shape.length);let[p,m]=I.computeOutAndReduceShapes(c.shape,l),f=y.sizeFromShape(m),h=y.makeZerosTypedArray(y.sizeFromShape(p),c.dtype),g=e.data.get(c.dataId).values;for(let x=0;x<h.length;++x){let b=x*f,S=g[b];for(let w=0;w<f;++w){let T=g[b+w];S=S||T}h[x]=S}u!=null&&e.disposeIntermediateTensorInfo(c);let d=e.makeTensorInfo(p,c.dtype,h);if(i){let x=I.expandShapeToKeepDim(p,a),b=Lt({inputs:{x:d},backend:e,attrs:{shape:x}});return e.disposeIntermediateTensorInfo(d),b}return d}var oA={kernelName:hu,backendName:"cpu",kernelFunc:bK};function wK(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s}=o;Y(n,"argMax");let i=y.parseAxisParam(s,n.shape),a=I.getAxesPermutation(i,n.shape.length),l=n,u=[];a!=null&&(l=be({inputs:{x:n},backend:e,attrs:{perm:a}}),u.push(l),i=I.getInnerMostAxes(i.length,l.shape.length)),i=[i[0]],I.assertAxesAreInnerMostDims("argMax",i,l.shape.length);let[c,p]=I.computeOutAndReduceShapes(l.shape,i),m=y.sizeFromShape(c),f=y.makeZerosTypedArray(m,"int32"),h=y.sizeFromShape(p),g=e.data.get(l.dataId).values;for(let d=0;d<f.length;++d){let x=d*h,b=g[x],S=0;for(let w=0;w<h;++w){let T=g[x+w];T>b&&(b=T,S=w)}f[d]=S}return u.forEach(d=>e.disposeIntermediateTensorInfo(d)),e.makeTensorInfo(c,"int32",f)}var nA={kernelName:yi,backendName:"cpu",kernelFunc:wK};function CK(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s}=o;Y(n,"argMin");let i=y.parseAxisParam(s,n.shape),a=I.getAxesPermutation(i,n.shape.length),l=n,u=[];a!=null&&(l=be({inputs:{x:n},backend:e,attrs:{perm:a}}),u.push(l),i=I.getInnerMostAxes(i.length,l.shape.length)),i=[i[0]],I.assertAxesAreInnerMostDims("argMin",i,l.shape.length);let[c,p]=I.computeOutAndReduceShapes(l.shape,i),m=y.sizeFromShape(c),f=y.makeZerosTypedArray(m,"int32"),h=y.sizeFromShape(p),g=e.data.get(l.dataId).values;for(let d=0;d<f.length;++d){let x=d*h,b=g[x],S=0;for(let w=0;w<h;++w){let T=g[x+w];T<b&&(b=T,S=w)}f[d]=S}return u.forEach(d=>e.disposeIntermediateTensorInfo(d)),e.makeTensorInfo(c,"int32",f)}var sA={kernelName:bi,backendName:"cpu",kernelFunc:CK};var SK=Ct(Jn,r=>Math.asin(r)),iA={kernelName:Jn,backendName:"cpu",kernelFunc:SK};var NK=Ct(Qn,r=>Math.asinh(r)),aA={kernelName:Qn,backendName:"cpu",kernelFunc:NK};var vK=Ct(ts,r=>Math.atan(r)),lA={kernelName:ts,backendName:"cpu",kernelFunc:vK};var TK=Ot((r,t)=>Math.atan2(r,t)),IK=Bt(rs,TK),uA={kernelName:rs,backendName:"cpu",kernelFunc:IK};var kK=Ct(es,r=>Math.atanh(r)),cA={kernelName:es,backendName:"cpu",kernelFunc:kK};function Mp(r,t,e,o,n,s){let i=n.strideHeight,a=n.strideWidth,l=n.dilationHeight,u=n.dilationWidth,c=n.effectiveFilterHeight,p=n.effectiveFilterWidth,m=n.padInfo.top,f=n.padInfo.left,h=s==="max"?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,g=mt(n.outShape,e),d=g.values,x=n.outShape[1]*n.outShape[2]*n.outShape[3],b=n.outShape[2]*n.outShape[3],S=n.outShape[3];for(let w=0;w<n.batchSize;++w){let T=w*x,$=w*o[0];for(let R=0;R<n.inChannels;++R)for(let F=0;F<n.outHeight;++F){let O=F*i-m,P=Math.max(0,O),B=Math.min(n.inHeight,c+O),V=T+F*b;for(let G=0;G<n.outWidth;++G){let H=G*a-f,W=Math.max(0,H),j=Math.min(n.inWidth,p+H),Z=h,q=0,J=0;for(let rt=P;rt<B;rt+=l){let at=$+rt*o[1];for(let it=W;it<j;it+=u){let ct=at+it*o[2],lt=r[ct+R];s==="max"&&lt>Z?Z=lt:s==="avg"&&(q+=lt,J++)}if(isNaN(Z))break}let et=V+G*S+R;d[et]=s==="avg"?q/J:Z}}}return g}function py(r,t,e,o,n=!1,s=!1){let i=mt(o.outShape,"int32"),a=o.strideHeight,l=o.strideWidth,u=o.dilationHeight,c=o.dilationWidth,p=o.effectiveFilterHeight,m=o.effectiveFilterWidth,f=o.padInfo.top,h=o.padInfo.left,g=mt(t,e,r);for(let d=0;d<o.batchSize;++d)for(let x=0;x<o.inChannels;++x)for(let b=0;b<o.outHeight;++b){let S=b*a-f,w=S;for(;w<0;)w+=u;let T=Math.min(o.inHeight,p+S);for(let $=0;$<o.outWidth;++$){let R=$*l-h,F=R;for(;F<0;)F+=c;let O=Math.min(o.inWidth,m+R),P=Number.NEGATIVE_INFINITY,B=-1;for(let V=w;V<T;V+=u){let G=V-S;for(let H=F;H<O;H+=c){let W=H-R,j=g.get(d,V,H,x);j>P&&(P=j,n?B=s?((d*o.inHeight+V)*o.inWidth+H)*o.inChannels+x:(V*o.inWidth+H)*o.inChannels+x:B=G*m+W)}}i.set(B,d,b,$,x)}}return i}function my(r,t,e,o,n,s){let i=n.strideDepth,a=n.strideHeight,l=n.strideWidth,u=n.dilationDepth,c=n.dilationHeight,p=n.dilationWidth,m=n.effectiveFilterDepth,f=n.effectiveFilterHeight,h=n.effectiveFilterWidth,g=n.padInfo.front,d=n.padInfo.top,x=n.padInfo.left,b=s==="max"?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,S=mt(n.outShape,e),w=S.values,T=n.outShape[1]*n.outShape[2]*n.outShape[3]*n.outShape[4],$=n.outShape[2]*n.outShape[3]*n.outShape[4],R=n.outShape[3]*n.outShape[4],F=n.outShape[4];for(let O=0;O<n.batchSize;++O){let P=O*T,B=O*o[0];for(let V=0;V<n.inChannels;++V)for(let G=0;G<n.outDepth;++G){let H=G*i-g,W=H;for(;W<0;)W+=u;let j=Math.min(n.inDepth,m+H),Z=P+G*$;for(let q=0;q<n.outHeight;++q){let J=q*a-d,et=J;for(;et<0;)et+=c;let rt=Math.min(n.inHeight,f+J),at=Z+q*R;for(let it=0;it<n.outWidth;++it){let ct=it*l-x,lt=ct;for(;lt<0;)lt+=p;let ft=Math.min(n.inWidth,h+ct),St=at+it*F,kt=b,vt=0,zt=0;for(let ie=W;ie<j;ie+=u){let me=B+ie*o[1];for(let Oe=et;Oe<rt;Oe+=c){let fe=me+Oe*o[2];for(let le=lt;le<ft;le+=p){let Re=fe+le*o[3],ve=r[Re+V];if(s==="max"&&ve>kt?kt=ve:s==="avg"&&(vt+=ve,zt++),isNaN(kt))break}if(isNaN(kt))break}if(isNaN(kt))break}let Mt=St+V;w[Mt]=s==="avg"?vt/Math.max(zt,1):kt}}}}return S}function pA(r,t){let e=mt(t.outShape,"int32"),o=t.strideDepth,n=t.strideHeight,s=t.strideWidth,i=t.dilationDepth,a=t.dilationHeight,l=t.dilationWidth,u=t.effectiveFilterDepth,c=t.effectiveFilterHeight,p=t.effectiveFilterWidth,m=t.padInfo.front,f=t.padInfo.top,h=t.padInfo.left;for(let g=0;g<t.batchSize;++g)for(let d=0;d<t.inChannels;++d)for(let x=0;x<t.outDepth;++x){let b=x*o-m,S=b;for(;S<0;)S+=i;let w=Math.min(t.inDepth,u+b);for(let T=0;T<t.outHeight;++T){let $=T*n-f,R=$;for(;R<0;)R+=a;let F=Math.min(t.inHeight,c+$);for(let O=0;O<t.outWidth;++O){let P=O*s-h,B=P;for(;B<0;)B+=l;let V=Math.min(t.inWidth,p+P),G=Number.NEGATIVE_INFINITY,H=-1;for(let W=S;W<w;W+=i){let j=W-b;for(let Z=R;Z<F;Z+=a){let q=Z-$;for(let J=B;J<V;J+=l){let et=J-P,rt=r.get(g,W,Z,J,d);rt>=G&&(G=rt,H=j*c*p+q*c+et)}}}e.set(H,g,x,T,O,d)}}}return e}function EK(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t;Y(n,"avgPool");let{filterSize:s,strides:i,pad:a,dimRoundingMode:l}=o,u=1;y.assert(I.eitherStridesOrDilationsAreOne(i,u),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${u}'`);let c=I.computePool2DInfo(n.shape,s,i,u,a,l),p;if(c.filterWidth===1&&c.filterHeight===1&&y.arraysEqual(c.inShape,c.outShape))p=yr({inputs:{x:n},backend:e});else{let m=e.data.get(n.dataId).values,f=y.computeStrides(n.shape),h=Mp(m,n.shape,n.dtype,f,c,"avg");p=e.makeTensorInfo(c.outShape,n.dtype,h.values)}return p}var mA={kernelName:wi,backendName:"cpu",kernelFunc:EK};function $K(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{filterSize:s,strides:i,pad:a,dimRoundingMode:l,dataFormat:u}=o;Y(n,"avgPool3d");let c=I.computePool3DInfo(n.shape,s,i,1,a,l,u),p=e.data.get(n.dataId).values,m=my(p,n.shape,n.dtype,y.computeStrides(n.shape),c,"avg");return e.makeTensorInfo(m.shape,"float32",m.values)}var fA={kernelName:Ci,backendName:"cpu",kernelFunc:$K};function AK(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s}=t,{filterSize:i,strides:a,pad:l,dimRoundingMode:u}=o;Y([n,s],"avgPool3DGrad");let c=I.computePool3DInfo(s.shape,i,a,1,l,u),p=c.strideDepth,m=c.strideHeight,f=c.strideWidth,h=c.filterDepth,g=c.filterHeight,d=c.filterWidth,x=c.dilationDepth,b=c.dilationHeight,S=c.dilationWidth,w=c.effectiveFilterDepth,T=c.effectiveFilterHeight,$=c.effectiveFilterWidth,R=w-1-c.padInfo.front,F=$-1-c.padInfo.left,O=T-1-c.padInfo.top,P=mt(s.shape,"float32"),B=1/(h*g*d),V=e.bufferSync(n);for(let G=0;G<c.batchSize;++G)for(let H=0;H<c.inChannels;++H)for(let W=0;W<c.inDepth;++W)for(let j=0;j<c.inHeight;++j)for(let Z=0;Z<c.inWidth;++Z){let q=W-R,J=j-O,et=Z-F,rt=0;for(let at=0;at<w;at+=x){let it=(q+at)/p;if(!(it<0||it>=c.outDepth||Math.floor(it)!==it))for(let ct=0;ct<T;ct+=b){let lt=(J+ct)/m;if(!(lt<0||lt>=c.outHeight||Math.floor(lt)!==lt))for(let ft=0;ft<$;ft+=S){let St=(et+ft)/f;if(St<0||St>=c.outWidth||Math.floor(St)!==St)continue;let kt=V.get(G,it,lt,St,H);rt+=kt}}}P.set(rt*B,G,W,j,Z,H)}return e.makeTensorInfo(P.shape,P.dtype,P.values)}var hA={kernelName:gu,backendName:"cpu",kernelFunc:AK};function DK(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s}=t,i=s;Y([n,s],"avgPoolGrad");let{filterSize:a,strides:l,pad:u}=o,c=I.computePool2DInfo(i.shape,a,l,1,u),p=c.strideHeight,m=c.strideWidth,f=c.filterHeight,h=c.filterWidth,g=c.dilationHeight,d=c.dilationWidth,x=c.effectiveFilterHeight,b=c.effectiveFilterWidth,S=b-1-c.padInfo.left,w=x-1-c.padInfo.top,T=mt(i.shape,"float32"),$=1/(f*h),R=e.data.get(n.dataId).values,F=mt(n.shape,"float32",R);for(let O=0;O<c.batchSize;++O)for(let P=0;P<c.inChannels;++P)for(let B=0;B<c.inHeight;++B)for(let V=0;V<c.inWidth;++V){let G=B-w,H=V-S,W=0;for(let j=0;j<x;j+=g){let Z=(G+j)/p;if(!(Z<0||Z>=c.outHeight||Math.floor(Z)!==Z))for(let q=0;q<b;q+=d){let J=(H+q)/m;if(J<0||J>=c.outWidth||Math.floor(J)!==J)continue;let et=F.get(O,Z,J,P);W+=et}}T.set(W*$,O,B,V,P)}return e.makeTensorInfo(T.shape,T.dtype,T.values)}var dA={kernelName:du,backendName:"cpu",kernelFunc:DK};function RK(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,scale:s,offset:i,mean:a,variance:l}=t;y.assert(a.shape.length===l.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),y.assert(i==null||a.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),y.assert(s==null||a.shape.length===s.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks."),Y([n,a,l,s,i],"batchNorm");let{varianceEpsilon:u}=o;u==null&&(u=.001);let c=e.data.get(n.dataId).values,p=e.data.get(a.dataId).values,m=e.data.get(l.dataId).values,f=s?e.data.get(s.dataId).values:new Float32Array([1]),h=i?e.data.get(i.dataId).values:new Float32Array([0]),g=new Float32Array(c.length),d=h.length,x=f.length,b=m.length,S=p.length,w=0,T=0,$=0,R=0;for(let F=0;F<c.length;++F)g[F]=h[w++]+(c[F]-p[T++])*f[$++]/Math.sqrt(m[R++]+u),w>=d&&(w=0),T>=S&&(T=0),$>=x&&($=0),R>=b&&(R=0);return e.makeTensorInfo(n.shape,n.dtype,g)}var gA={kernelName:Fi,backendName:"cpu",kernelFunc:RK};function FK(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{blockShape:s,crops:i}=o;Y([n],"batchToSpaceND");let a=s.reduce((x,b)=>x*b),l=I.getReshaped(n.shape,s,a),u=I.getPermuted(l.length,s.length),c=I.getReshapedPermuted(n.shape,s,a),p=I.getSliceBeginCoords(i,s.length),m=I.getSliceSize(c,i,s.length),f=Lt({inputs:{x:n},backend:e,attrs:{shape:l}}),h=be({inputs:{x:f},backend:e,attrs:{perm:u}}),g=Lt({inputs:{x:h},backend:e,attrs:{shape:c}}),d=Ko({inputs:{x:g},backend:e,attrs:{begin:p,size:m}});return e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(g),d}var xA={kernelName:Ni,backendName:"cpu",kernelFunc:FK};function _K(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,weights:s}=t,{size:i}=o,a=e.data.get(n.dataId).values,l=e.data.get(s.dataId).values,u=Op(a,l,s.dtype,s.shape,i);return e.makeTensorInfo([i],s.dtype,u)}var yA={kernelName:xu,backendName:"cpu",kernelFunc:_K};function OK(r){let{inputs:t,backend:e}=r,{s0:o,s1:n}=t,s=e.data.get(o.dataId).values,i=e.data.get(n.dataId).values,a=I.assertAndGetBroadcastShape(Array.from(s),Array.from(i));return e.makeTensorInfo([a.length],"int32",Int32Array.from(a))}var bA={kernelName:yu,backendName:"cpu",kernelFunc:OK};var LK=Ct(ns,(r,t)=>{let e=t;return r>e.clipValueMax?e.clipValueMax:r<e.clipValueMin?e.clipValueMin:r}),wA={kernelName:ns,backendName:"cpu",kernelFunc:LK};var PK=r=>{let{x:t}=r.inputs,e=r.backend,o=new Float32Array(y.sizeFromShape(t.shape)),n=e.data.get(t.dataId),s=n.complexTensorInfos.real,i=n.complexTensorInfos.imag,a=e.data.get(s.dataId).values,l=e.data.get(i.dataId).values;for(let u=0;u<a.length;u++){let c=a[u],p=l[u];o[u]=Math.hypot(c,p)}return e.makeOutput(o,t.shape,"float32")},CA={kernelName:vi,backendName:"cpu",kernelFunc:PK};function Vn(r){let{inputs:t,backend:e}=r,{input:o}=t,n=e.data.get(o.dataId).complexTensorInfos.imag,s=e.data.get(n.dataId).values;return e.makeTensorInfo(n.shape,n.dtype,s)}var SA={kernelName:Pu,backendName:"cpu",kernelFunc:Vn};function Ma(r){let{inputs:t,backend:e,attrs:o}=r,{axis:n}=o,s=y.parseAxisParam(n,t[0].shape)[0],i=t.map(g=>g.shape);I.assertParamsConsistent(i,s);let a=I.computeOutShape(t.map(g=>g.shape),s);if(y.sizeFromShape(a)===0)return e.makeTensorInfo(a,t[0].dtype,[]);let l=t.filter(g=>y.sizeFromShape(g.shape)>0);if(l.length===1)return yr({inputs:{x:l[0]},backend:e});if(l[0].dtype==="complex64"){let g=l.map(w=>Wo({inputs:{input:w},backend:e})),d=l.map(w=>Vn({inputs:{input:w},backend:e})),x=Ma({inputs:g,backend:e,attrs:{axis:s}}),b=Ma({inputs:d,backend:e,attrs:{axis:s}}),S=qe({inputs:{real:x,imag:b},backend:e});return g.forEach(w=>e.disposeIntermediateTensorInfo(w)),d.forEach(w=>e.disposeIntermediateTensorInfo(w)),e.disposeIntermediateTensorInfo(x),e.disposeIntermediateTensorInfo(b),S}let u=l.map(g=>{let x=[-1,y.sizeFromShape(g.shape.slice(s))];return Lt({inputs:{x:g},backend:e,attrs:{shape:x}})}),c=u.map(g=>({vals:e.data.get(g.dataId).values,shape:g.shape}));a=I.computeOutShape(u.map(g=>g.shape),1);let p=u[0].shape[0]===1,m=qx(c,a,t[0].dtype,p),f=I.computeOutShape(l.map(g=>g.shape),s),h=e.makeTensorInfo(f,t[0].dtype,m);return u.forEach(g=>e.disposeIntermediateTensorInfo(g)),h}var NA={kernelName:Ti,backendName:"cpu",kernelFunc:Ma};function dS(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s}=t,{strides:i,pad:a,dataFormat:l,dilations:u,dimRoundingMode:c}=o;Y([n,s],"conv2d");let p=I.convertConv2DDataFormat(l),m=I.computeConv2DInfo(n.shape,s.shape,i,u,a,c,!1,p),f=m.filterHeight,h=m.filterWidth,g=m.dilationHeight,d=m.dilationWidth,x=m.padInfo.left,b=m.padInfo.top,S=m.dataFormat==="channelsLast",w=new Wt(m.outShape,n.dtype),T=y.computeStrides(n.shape),$=y.computeStrides(s.shape),R=T[0],F=S?T[1]:T[2],O=S?T[2]:1,P=S?1:T[1],B=w.strides[0],V=S?w.strides[1]:w.strides[2],G=S?w.strides[2]:1,H=S?1:w.strides[1],W=e.data.get(n.dataId).values,j=e.data.get(s.dataId).values,Z=w.values;for(let q=0;q<m.batchSize;++q){let J=q*R,et=q*B;for(let rt=0;rt<m.outHeight;++rt){let at=et+rt*V,it=rt*m.strideHeight-b;for(let ct=0;ct<f;++ct){let lt=it+ct*g;if(lt<0||lt>=m.inHeight)continue;let ft=ct*$[0],St=J+lt*F;for(let kt=0;kt<m.outWidth;++kt){let vt=at+kt*G,zt=kt*m.strideWidth-x;for(let Mt=0;Mt<h;++Mt){let ie=zt+Mt*d;if(ie<0||ie>=m.inWidth)continue;let me=ft+Mt*$[1],Oe=St+ie*O,fe=me;for(let le=0;le<m.inChannels;++le){let Re=W[Oe+le*P];for(let ve=0;ve<m.outChannels;++ve)Z[vt+ve*H]+=Re*j[fe+ve];fe+=m.outChannels}}}}}}return e.makeTensorInfo(w.shape,w.dtype,Z)}var vA={kernelName:Ii,backendName:"cpu",kernelFunc:dS};function zK(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,dy:s}=t,{strides:i,pad:a,dataFormat:l,dimRoundingMode:u,filterShape:c}=o;Y([n,s],"conv2dBackpropFilter");let p=I.convertConv2DDataFormat(l),m=I.computeConv2DInfo(n.shape,c,i,1,a,u,!1,p),{strideHeight:f,strideWidth:h,filterHeight:g,filterWidth:d}=m,x=m.dataFormat==="channelsLast",b=new Wt(m.filterShape,"float32"),S=m.padInfo.left,w=m.padInfo.top,T=e.data.get(n.dataId).values,$=e.data.get(s.dataId).values,R=new Wt(n.shape,n.dtype,T),F=new Wt(s.shape,s.dtype,$);for(let O=0;O<g;++O){let P=Math.max(0,Math.ceil((w-O)/f)),B=Math.min(m.outHeight,(m.inHeight+w-O)/f);for(let V=0;V<d;++V){let G=Math.max(0,Math.ceil((S-V)/h)),H=Math.min(m.outWidth,(m.inWidth+S-V)/h);for(let W=0;W<m.inChannels;++W)for(let j=0;j<m.outChannels;++j){let Z=0;for(let q=0;q<m.batchSize;++q)for(let J=P;J<B;++J){let et=O+J*f-w;for(let rt=G;rt<H;++rt){let at=V+rt*h-S;x?Z+=R.get(q,et,at,W)*F.get(q,J,rt,j):Z+=R.get(q,W,et,at)*F.get(q,j,J,rt)}}b.set(Z,O,V,W,j)}}}return e.makeTensorInfo(b.shape,b.dtype,b.values)}var TA={kernelName:wu,backendName:"cpu",kernelFunc:zK};function MK(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,filter:s}=t,{inputShape:i,strides:a,pad:l,dataFormat:u,dimRoundingMode:c}=o;Y([n,s],"conv2dBackpropInput");let p=y.computeStrides(s.shape),m=y.computeStrides(n.shape),f=I.convertConv2DDataFormat(u),h=I.computeConv2DInfo(i,s.shape,a,1,l,c,!1,f),g=new Wt(h.inShape,"float32"),d=g.values,x=e.data.get(n.dataId).values,b=e.data.get(s.dataId).values,[S,w,T]=p,{batchSize:$,filterHeight:R,filterWidth:F,inChannels:O,inHeight:P,inWidth:B,outChannels:V,outHeight:G,outWidth:H,strideHeight:W,strideWidth:j}=h;f=h.dataFormat;let Z=R-1-h.padInfo.top,q=F-1-h.padInfo.left,J=f==="channelsLast",et=g.strides[0],rt=J?g.strides[1]:g.strides[2],at=J?g.strides[2]:1,it=J?1:g.strides[1],ct=m[0],lt=J?m[1]:m[2],ft=J?m[2]:1,St=J?1:m[1];for(let kt=0;kt<$;++kt)for(let vt=0;vt<O;++vt)for(let zt=0;zt<P;++zt){let Mt=zt-Z,ie=Math.max(0,Math.ceil(Mt/W)),me=Math.min(G,(R+Mt)/W);for(let Oe=0;Oe<B;++Oe){let fe=Oe-q,le=Math.max(0,Math.ceil(fe/j)),Re=Math.min(H,(F+fe)/j),ve=0;for(let pr=ie;pr<me;++pr){let pi=pr*W-Mt;for(let ho=le;ho<Re;++ho){let Ka=ho*j-fe,Xo=ct*kt+lt*pr+ft*ho,qn=S*(R-1-pi)+w*(F-1-Ka)+T*vt;for(let mi=0;mi<V;++mi){let fi=x[Xo+St*mi],hi=b[qn+mi];ve+=fi*hi}}}let Kn=et*kt+rt*zt+at*Oe+it*vt;d[Kn]=ve}}return e.makeTensorInfo(g.shape,g.dtype,g.values)}var IA={kernelName:ki,backendName:"cpu",kernelFunc:MK};function BK(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s}=t,{strides:i,pad:a,dilations:l}=o;Y([n,s],"conv3d");let u=I.computeConv3DInfo(n.shape,s.shape,i,l,a),{filterDepth:c,filterHeight:p,filterWidth:m,dilationDepth:f,dilationHeight:h,dilationWidth:g,padInfo:d}=u,x=d.front,b=d.left,S=d.top,w=new Wt(u.outShape,n.dtype),T=e.data.get(n.dataId).values,$=e.data.get(s.dataId).values,R=w.values,F=y.computeStrides(n.shape),O=y.computeStrides(s.shape);for(let P=0;P<u.batchSize;++P){let B=P*F[0],V=P*w.strides[0];for(let G=0;G<u.outDepth;++G){let H=V+G*w.strides[1],W=G*u.strideDepth-x;for(let j=0;j<c;++j){let Z=W+j*f;if(Z<0||Z>=u.inDepth)continue;let q=j*O[0],J=B+Z*F[1];for(let et=0;et<u.outHeight;++et){let rt=H+et*w.strides[2],at=et*u.strideHeight-S;for(let it=0;it<p;++it){let ct=at+it*h;if(ct<0||ct>=u.inHeight)continue;let lt=q+it*O[1],ft=J+ct*F[2];for(let St=0;St<u.outWidth;++St){let kt=rt+St*u.outChannels,vt=St*u.strideWidth-b;for(let zt=0;zt<m;++zt){let Mt=vt+zt*g;if(Mt<0||Mt>=u.inWidth)continue;let ie=lt+zt*O[2],me=ft+Mt*u.inChannels,Oe=ie;for(let fe=0;fe<u.inChannels;++fe){let le=T[me+fe];for(let Re=0;Re<u.outChannels;++Re)R[kt+Re]+=le*$[Oe+Re];Oe+=u.outChannels}}}}}}}}return e.makeTensorInfo(w.shape,w.dtype,w.values)}var kA={kernelName:Ei,backendName:"cpu",kernelFunc:BK};function VK(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,dy:s}=t,{strides:i,pad:a,filterShape:l}=o;Y([n,s],"conv3dBackpropFilterV2");let u=y.computeStrides(n.shape),c=y.computeStrides(s.shape),p=I.computeConv3DInfo(n.shape,l,i,1,a),m=p.strideDepth,f=p.strideHeight,h=p.strideWidth,g=p.filterDepth,d=p.filterHeight,x=p.filterWidth,b=new Wt(p.filterShape,"float32"),S=b.values,[w,T,$,R]=b.strides,F=e.data.get(s.dataId).values,[O,P,B,V]=c,G=e.data.get(n.dataId).values,[H,W,j,Z]=u,q=p.padInfo.front,J=p.padInfo.left,et=p.padInfo.top;for(let rt=0;rt<g;++rt){let at=Math.max(0,Math.ceil((q-rt)/m)),it=Math.min(p.outDepth,(p.inDepth+q-rt)/m),ct=rt*w;for(let lt=0;lt<d;++lt){let ft=Math.max(0,Math.ceil((et-lt)/f)),St=Math.min(p.outHeight,(p.inHeight+et-lt)/f),kt=lt*T+ct;for(let vt=0;vt<x;++vt){let zt=Math.max(0,Math.ceil((J-vt)/h)),Mt=Math.min(p.outWidth,(p.inWidth+J-vt)/h),ie=vt*$+kt;for(let me=0;me<p.inChannels;++me){let Oe=me*R+ie;for(let fe=0;fe<p.outChannels;++fe){let le=0;for(let Re=0;Re<p.batchSize;++Re){let ve=Re*H,Kn=Re*O;for(let pr=at;pr<it;++pr){let ho=(rt+pr*m-q)*W+ve,Ka=pr*P+Kn;for(let Xo=ft;Xo<St;++Xo){let mi=(lt+Xo*f-et)*j+ho,fi=Xo*B+Ka;for(let hi=zt;hi<Mt;++hi){let nw=(vt+hi*h-J)*Z+mi,sw=hi*V+fi;le+=G[nw+me]*F[sw+fe]}}}}S[Oe+fe]=le}}}}}return e.makeTensorInfo(b.shape,b.dtype,b.values)}var EA={kernelName:Cu,backendName:"cpu",kernelFunc:VK};function GK(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,filter:s}=t,{pad:i,strides:a,inputShape:l}=o;Y([n],"conv3dBackpropInputV2");let u=y.computeStrides(n.shape),c=y.computeStrides(s.shape),p=I.computeConv3DInfo(l,s.shape,a,1,i),m=new Wt(p.inShape,"float32"),f=m.values,[h,g,d,x]=m.strides,b=e.data.get(n.dataId).values,[S,w,T,$]=u,R=e.data.get(s.dataId).values,[F,O,P,B]=c,{batchSize:V,filterDepth:G,filterHeight:H,filterWidth:W,inChannels:j,inDepth:Z,inHeight:q,inWidth:J,outChannels:et,outDepth:rt,outHeight:at,outWidth:it,strideDepth:ct,strideHeight:lt,strideWidth:ft}=p,St=G-1-p.padInfo.front,kt=H-1-p.padInfo.top,vt=W-1-p.padInfo.left;for(let zt=0;zt<V;++zt)for(let Mt=0;Mt<j;++Mt)for(let ie=0;ie<Z;++ie){let me=ie-St,Oe=Math.max(0,Math.ceil(me/ct)),fe=Math.min(rt,(G+me)/ct);for(let le=0;le<q;++le){let Re=le-kt,ve=Math.max(0,Math.ceil(Re/lt)),Kn=Math.min(at,(H+Re)/lt);for(let pr=0;pr<J;++pr){let pi=pr-vt,ho=Math.max(0,Math.ceil(pi/ft)),Ka=Math.min(it,(W+pi)/ft),Xo=0;for(let qn=Oe;qn<fe;++qn){let mi=qn*ct-me;for(let fi=ve;fi<Kn;++fi){let hi=fi*lt-Re;for(let nm=ho;nm<Ka;++nm){let nw=nm*ft-pi,sw=S*zt+w*qn+T*fi+$*nm,nP=F*(G-1-mi)+O*(H-1-hi)+P*(W-1-nw)+B*Mt;for(let Lh=0;Lh<et;++Lh){let sP=b[sw+Lh],iP=R[nP+Lh];Xo+=sP*iP}}}}f[h*zt+g*ie+d*le+x*pr+Mt]=Xo}}}return e.makeTensorInfo(m.shape,m.dtype,m.values)}var $A={kernelName:Su,backendName:"cpu",kernelFunc:GK};var WK=Ct(ss,r=>Math.cos(r)),AA={kernelName:ss,backendName:"cpu",kernelFunc:WK};var UK=Ct(is,r=>Math.cosh(r)),DA={kernelName:is,backendName:"cpu",kernelFunc:UK};function HK(r){let{inputs:t,backend:e,attrs:o}=r,{image:n,boxes:s,boxInd:i}=t,{cropSize:a,method:l,extrapolationValue:u}=o,[c,p,m,f]=n.shape,h=s.shape[0],[g,d]=a,x=mt([h,g,d,f],"float32"),b=e.data.get(s.dataId).values,S=e.data.get(i.dataId).values,w=e.data.get(n.dataId).values,T=y.computeStrides(n.shape),$=y.computeStrides(x.shape);for(let R=0;R<h;R++){let F=R*4,O=b[F],P=b[F+1],B=b[F+2],V=b[F+3],G=S[R];if(G>=c)continue;let H=g>1?(B-O)*(p-1)/(g-1):0,W=d>1?(V-P)*(m-1)/(d-1):0;for(let j=0;j<g;j++){let Z=g>1?O*(p-1)+j*H:.5*(O+B)*(p-1);if(Z<0||Z>p-1){for(let q=0;q<d;q++)for(let J=0;J<f;J++){let et=J+q*$[2]+j*$[1]+R*$[0];x.values[et]=u}continue}if(l==="bilinear"){let q=Math.floor(Z),J=Math.ceil(Z),et=Z-q;for(let rt=0;rt<d;rt++){let at=d>1?P*(m-1)+rt*W:.5*(P+V)*(m-1);if(at<0||at>m-1){for(let ft=0;ft<f;ft++){let St=ft+rt*$[2]+j*$[1]+R*$[0];x.values[St]=u}continue}let it=Math.floor(at),ct=Math.ceil(at),lt=at-it;for(let ft=0;ft<f;ft++){let St=ft+it*T[2]+q*T[1]+G*T[0],kt=w[St];St=ft+ct*T[2]+q*T[1]+G*T[0];let vt=w[St];St=ft+it*T[2]+J*T[1]+G*T[0];let zt=w[St];St=ft+ct*T[2]+J*T[1]+G*T[0];let Mt=w[St],ie=kt+(vt-kt)*lt,me=zt+(Mt-zt)*lt;St=ft+rt*$[2]+j*$[1]+R*$[0],x.values[St]=ie+(me-ie)*et}}}else for(let q=0;q<d;++q){let J=d>1?P*(m-1)+q*W:.5*(P+V)*(m-1);if(J<0||J>m-1){for(let at=0;at<f;at++){let it=at+q*$[2]+j*$[1]+R*$[0];x.values[it]=u}continue}let et=Math.round(J),rt=Math.round(Z);for(let at=0;at<f;at++){let it=at+et*T[2]+rt*T[1]+G*T[0],ct=at+q*$[2]+j*$[1]+R*$[0];x.values[ct]=w[it]}}}}return e.makeTensorInfo(x.shape,x.dtype,x.values)}var RA={kernelName:vu,backendName:"cpu",kernelFunc:HK};function KK(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,exclusive:i,reverse:a}=o;Y(n,"cumprod");let l=I.getAxesPermutation([s],n.shape.length),u=n;l!=null&&(u=be({inputs:{x:n},backend:e,attrs:{perm:l}}));let c=I.getInnerMostAxes(1,n.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumprod in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);let p=Le(u.dtype,"int32"),m=y.makeOnesTypedArray(y.sizeFromShape(u.shape),p),f=e.data.get(u.dataId).values,h=u.shape[u.shape.length-1],g=a?(x,b)=>x+h-b-1:(x,b)=>x+b;for(let x=0;x<f.length;x+=h)for(let b=0;b<h;b++){let S=g(x,b);if(b===0)m[S]=i?1:f[S];else{let w=g(x,b-1);m[S]=i?f[w]*m[w]:f[S]*m[w]}}let d=e.makeTensorInfo(u.shape,p,m);if(l!=null){let x=I.getUndoAxesPermutation(l),b=be({inputs:{x:d},backend:e,attrs:{perm:x}});return e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(u),b}return d}var FA={kernelName:Nu,backendName:"cpu",kernelFunc:KK};function qK(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,exclusive:i,reverse:a}=o;Y(n,"cumsum");let l=I.getAxesPermutation([s],n.shape.length),u=n;l!=null&&(u=be({inputs:{x:n},backend:e,attrs:{perm:l}}));let c=I.getInnerMostAxes(1,n.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);let p=Le(u.dtype,"int32"),m=y.makeZerosTypedArray(y.sizeFromShape(u.shape),p),f=e.data.get(u.dataId).values,h=u.shape[u.shape.length-1],g=a?(x,b)=>x+h-b-1:(x,b)=>x+b;for(let x=0;x<f.length;x+=h)for(let b=0;b<h;b++){let S=g(x,b);if(b===0)m[S]=i?0:f[S];else{let w=g(x,b-1);m[S]=i?f[w]+m[w]:f[S]+m[w]}}let d=e.makeTensorInfo(u.shape,p,m);if(l!=null){let x=I.getUndoAxesPermutation(l),b=be({inputs:{x:d},backend:e,attrs:{perm:x}});return e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(u),b}return d}var _A={kernelName:$i,backendName:"cpu",kernelFunc:qK};function jK(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,weights:s}=t,{size:i,binaryOutput:a}=o;if(n.shape.length===1){let l=e.data.get(n.dataId).values,u=e.data.get(s.dataId).values,c=Op(l,u,s.dtype,s.shape,i);return e.makeTensorInfo([i],s.dtype,c)}else if(n.shape.length===2){let l=e.bufferSync(n),u=e.bufferSync(s),c=Kx(l,u,i,a);return e.makeTensorInfo(c.shape,s.dtype,c.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${n.shape.length}.`)}var OA={kernelName:Tu,backendName:"cpu",kernelFunc:jK};function XK(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{blockSize:s,dataFormat:i}=o;y.assert(i==="NHWC",()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${i}`);let a=n.shape[0],l=n.shape[1],u=n.shape[2],c=n.shape[3],p=l*s,m=u*s,f=c/(s*s),h=e.data.get(n.dataId).values,g=new Float32Array(a*p*m*f),d=0;for(let x=0;x<a;++x)for(let b=0;b<p;++b){let S=Math.floor(b/s),w=b%s;for(let T=0;T<m;++T){let $=Math.floor(T/s),R=T%s,F=(w*s+R)*f;for(let O=0;O<f;++O){let B=O+F+c*($+u*(S+l*x));g[d++]=h[B]}}}return e.makeTensorInfo([a,p,m,f],n.dtype,g)}var LA={kernelName:Iu,backendName:"cpu",kernelFunc:XK};function gS(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s}=t,{strides:i,pad:a,dilations:l,dimRoundingMode:u}=o;Y([n,s],"depthwiseConv2DNative");let c=y.computeStrides(n.shape),p=y.computeStrides(s.shape),m=l;m==null&&(m=[1,1]),y.assert(I.eitherStridesOrDilationsAreOne(i,m),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${m}'`);let f=I.computeConv2DInfo(n.shape,s.shape,i,m,a,u,!0),{filterHeight:h,filterWidth:g,dilationHeight:d,dilationWidth:x,padInfo:b}=f,S=b.left,w=b.top,T=f.outChannels/f.inChannels,$=new Wt(f.outShape,n.dtype),R=e.data.get(n.dataId).values,F=e.data.get(s.dataId).values,O=$.values;for(let P=0;P<f.batchSize;++P){let B=P*c[0],V=P*$.strides[0];for(let G=0;G<f.outHeight;++G){let H=V+G*$.strides[1],W=G*f.strideHeight-w;for(let j=0;j<h;++j){let Z=W+j*d;if(Z<0||Z>=f.inHeight)continue;let q=j*p[0],J=B+Z*c[1];for(let et=0;et<f.outWidth;++et){let rt=H+et*$.strides[2],at=et*f.strideWidth-S;for(let it=0;it<g;++it){let ct=at+it*x;if(ct<0||ct>=f.inWidth)continue;let lt=q+it*p[1],ft=J+ct*f.inChannels,St=rt,kt=lt;for(let vt=0;vt<f.inChannels;++vt){let zt=R[ft+vt];for(let Mt=0;Mt<T;++Mt)O[St+Mt]+=zt*F[kt+Mt];St+=T,kt+=T}}}}}}return e.makeTensorInfo($.shape,$.dtype,$.values)}var PA={kernelName:Ai,backendName:"cpu",kernelFunc:gS};function YK(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,dy:s}=t,{strides:i,dilations:a,pad:l,dimRoundingMode:u,filterShape:c}=o;Y([n,s],"depthwiseConv2dNativeBackpropFilter");let p=I.computeConv2DInfo(n.shape,c,i,a,l,u,!0),{strideHeight:m,strideWidth:f,filterHeight:h,filterWidth:g}=p,d=new Wt(p.filterShape,"float32"),x=p.padInfo.left,b=p.padInfo.top,S=p.outChannels/p.inChannels,w=e.data.get(n.dataId).values,T=new Wt(n.shape,n.dtype,w),$=e.data.get(s.dataId).values,R=new Wt(s.shape,s.dtype,$);for(let F=0;F<h;++F){let O=Math.max(0,Math.ceil((b-F)/m)),P=Math.min(p.outHeight,(p.inHeight+b-F)/m);for(let B=0;B<g;++B){let V=Math.max(0,Math.ceil((x-B)/f)),G=Math.min(p.outWidth,(p.inWidth+x-B)/f);for(let H=0;H<p.outChannels;++H){let W=Math.trunc(H/S),j=H%S,Z=0;for(let q=0;q<p.batchSize;++q)for(let J=O;J<P;++J){let et=F+J*m-b;for(let rt=V;rt<G;++rt){let at=B+rt*f-x;Z+=T.get(q,et,at,W)*R.get(q,J,rt,H)}}d.set(Z,F,B,W,j)}}}return e.makeTensorInfo(d.shape,d.dtype,d.values)}var zA={kernelName:ku,backendName:"cpu",kernelFunc:YK};function ZK(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,filter:s}=t,{strides:i,dilations:a,pad:l,dimRoundingMode:u,inputShape:c}=o;Y([n,s],"depthwiseConv2DNativeBackpropInput");let p=y.computeStrides(n.shape),m=y.computeStrides(s.shape),f=I.computeConv2DInfo(c,s.shape,i,a,l,u,!0),h=new Wt(f.inShape,"float32"),g=h.values,[d,x,b]=h.strides,S=e.data.get(n.dataId).values,[w,T,$]=p,R=e.data.get(s.dataId).values,[F,O,P]=m,{batchSize:B,filterHeight:V,filterWidth:G,inChannels:H,inHeight:W,inWidth:j,outChannels:Z,outHeight:q,outWidth:J,strideHeight:et,strideWidth:rt}=f,at=V-1-f.padInfo.top,it=G-1-f.padInfo.left,ct=Z/H;for(let lt=0;lt<B;++lt)for(let ft=0;ft<H;++ft)for(let St=0;St<W;++St){let kt=St-at,vt=Math.max(0,Math.ceil(kt/et)),zt=Math.min(q,(V+kt)/et);for(let Mt=0;Mt<j;++Mt){let ie=Mt-it,me=Math.max(0,Math.ceil(ie/rt)),Oe=Math.min(J,(G+ie)/rt),fe=0;for(let le=vt;le<zt;++le){let Re=le*et-kt;for(let ve=me;ve<Oe;++ve){let Kn=ve*rt-ie,pr=w*lt+T*le+$*ve,pi=F*(V-1-Re)+O*(G-1-Kn)+P*ft;for(let ho=0;ho<ct;++ho){let Ka=ft*ct+ho,Xo=S[pr+Ka],qn=R[pi+ho];fe+=Xo*qn}}}g[d*lt+x*St+b*Mt+ft]=fe}}return e.makeTensorInfo(h.shape,h.dtype,h.values)}var MA={kernelName:Eu,backendName:"cpu",kernelFunc:ZK};function JK(r){let{inputs:t,backend:e}=r,{x:o}=t,n=y.sizeFromShape(o.shape),s=e.data.get(o.dataId).values,i=mt([n,n],o.dtype),a=i.values;for(let u=0;u<s.length;u++)a[u*n+u]=s[u];let l=[...o.shape,...o.shape];return e.makeTensorInfo(l,i.dtype,i.values)}var BA={kernelName:$u,backendName:"cpu",kernelFunc:JK};var VA={kernelName:Di,backendName:"cpu",kernelFunc:({inputs:r,backend:t,attrs:e})=>{let{x:o,filter:n}=r,{strides:s,pad:i,dilations:a}=e,l=t,u=l.data.get(o.dataId).values,c=o.shape.length,p=l.data.get(n.dataId).values,m=n.shape.length,{batchSize:f,inHeight:h,inWidth:g,inChannels:d,outHeight:x,outWidth:b,padInfo:S,strideHeight:w,strideWidth:T,filterHeight:$,filterWidth:R,dilationHeight:F,dilationWidth:O,outShape:P}=I.computeDilation2DInfo(o.shape,n.shape,s,i,"NHWC",a),B=y.sizeFromShape(P),V=P.length,G=y.getArrayFromDType(o.dtype,B);for(let W=0;W<f;++W)for(let j=0;j<x;++j){let Z=j*w-S.top;for(let q=0;q<b;++q){let J=q*T-S.left;for(let et=0;et<d;++et){let rt=Number.MIN_SAFE_INTEGER;for(let it=0;it<$;++it){let ct=Z+it*F;if(ct>=0&&ct<h)for(let lt=0;lt<R;++lt){let ft=J+lt*O;if(ft>=0&&ft<g){let St=y.locToIndex([W,ct,ft,et],c,y.computeStrides(o.shape)),kt=y.locToIndex([it,lt,et],m,y.computeStrides(n.shape)),vt=u[St]+p[kt];vt>rt&&(rt=vt)}}}let at=y.locToIndex([W,j,q,et],V,y.computeStrides(P));G[at]=rt}}}return{dataId:l.write(y.toTypedArray(G,o.dtype),P,o.dtype),shape:P,dtype:o.dtype}}};var GA={kernelName:pm,backendName:"cpu",kernelFunc:({inputs:r,backend:t,attrs:e})=>{let{x:o,filter:n,dy:s}=r,{strides:i,pad:a,dilations:l}=e,u=t,c=y.toNestedArray(o.shape,u.data.get(o.dataId).values),p=y.toNestedArray(n.shape,u.data.get(n.dataId).values),{batchSize:m,inHeight:f,inWidth:h,inChannels:g,outHeight:d,outWidth:x,padInfo:b,strideHeight:S,strideWidth:w,filterHeight:T,filterWidth:$,dilationHeight:R,dilationWidth:F,outShape:O}=I.computeDilation2DInfo(o.shape,n.shape,i,a,"NHWC",l);y.assert(s.rank===O.length,()=>`Error in ${pm}, dy must have the same rank as output ${O.length}, but got ${s.rank}`);let P=y.toNestedArray(O,u.data.get(s.dataId).values),B=y.makeZerosNestedTypedArray(n.shape,n.dtype);for(let G=0;G<m;++G)for(let H=0;H<d;++H){let W=H*S-b.top;for(let j=0;j<x;++j){let Z=j*w-b.left;for(let q=0;q<g;++q){let J=Number.MIN_SAFE_INTEGER,et=0,rt=0;for(let at=0;at<T;++at){let it=W+at*R;if(it>=0&&it<f)for(let ct=0;ct<$;++ct){let lt=Z+ct*F;if(lt>=0&&lt<h){let ft=c[G][it][lt][q]+p[at][ct][q];ft>J&&(J=ft,et=at,rt=ct)}}}B[et][rt][q]+=P[G][H][j][q]}}}return{dataId:u.write(y.toTypedArray(B,o.dtype),n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}};var WA={kernelName:cm,backendName:"cpu",kernelFunc:({inputs:r,backend:t,attrs:e})=>{let{x:o,filter:n,dy:s}=r,{strides:i,pad:a,dilations:l}=e,u=t,c=y.toNestedArray(o.shape,u.data.get(o.dataId).values),p=y.toNestedArray(n.shape,u.data.get(n.dataId).values),{batchSize:m,inHeight:f,inWidth:h,inChannels:g,outHeight:d,outWidth:x,padInfo:b,strideHeight:S,strideWidth:w,filterHeight:T,filterWidth:$,dilationHeight:R,dilationWidth:F,outShape:O}=I.computeDilation2DInfo(o.shape,n.shape,i,a,"NHWC",l);y.assert(s.rank===O.length,()=>`Error in ${cm}, dy must have the same rank as output ${O.length}, but got ${s.rank}`);let P=y.toNestedArray(O,u.data.get(s.dataId).values),B=y.makeZerosNestedTypedArray(o.shape,o.dtype);for(let G=0;G<m;++G)for(let H=0;H<d;++H){let W=H*S-b.top;for(let j=0;j<x;++j){let Z=j*w-b.left;for(let q=0;q<g;++q){let J=Number.MIN_SAFE_INTEGER,et=W<0?0:W,rt=Z<0?0:Z;for(let at=0;at<T;++at){let it=W+at*R;if(it>=0&&it<f)for(let ct=0;ct<$;++ct){let lt=Z+ct*F;if(lt>=0&&lt<h){let ft=c[G][it][lt][q]+p[at][ct][q];ft>J&&(J=ft,et=it,rt=lt)}}}B[G][et][rt][q]+=P[G][H][j][q]}}}return{dataId:u.write(y.toTypedArray(B,o.dtype),o.shape,o.dtype),shape:o.shape,dtype:o.dtype}}};function ii(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o;Y(n,"sum");let a;n.dtype==="bool"?a=Uo({inputs:{x:n},backend:e,attrs:{dtype:"int32"}}):a=yr({inputs:{x:n},backend:e});let l=a.shape.length,u=y.parseAxisParam(s,a.shape),c=I.getAxesPermutation(u,l),p=u,m=a;c!=null&&(m=be({inputs:{x:a},backend:e,attrs:{perm:c}}),p=I.getInnerMostAxes(p.length,l)),I.assertAxesAreInnerMostDims("sum",p,m.shape.length);let[f,h]=I.computeOutAndReduceShapes(m.shape,p),g=I.upcastType(m.dtype,"int32"),d=Fp(e,f,g),x=y.sizeFromShape(h),b=e.data.get(d.dataId).values,S=e.data.get(m.dataId).values;for(let w=0;w<b.length;++w){let T=w*x,$=0;for(let R=0;R<x;++R)$+=S[T+R];b[w]=$}if(i){let w=I.expandShapeToKeepDim(d.shape,u),T=d;d=Lt({inputs:{x:d},backend:e,attrs:{shape:w}}),e.disposeIntermediateTensorInfo(T)}return e.disposeIntermediateTensorInfo(a),c!=null&&e.disposeIntermediateTensorInfo(m),d}var UA={kernelName:ra,backendName:"cpu",kernelFunc:ii};function QK(r){let{inputs:t,backend:e,attrs:o}=r,{equation:n}=o,s=t,{allDims:i,summedDims:a,idDims:l}=I.decodeEinsumEquation(n,s.length);I.checkEinsumDimSizes(i.length,l,s);let{path:u,steps:c}=I.getEinsumComputePath(a,l),p=c.length,m=null,f=i.length,h=[];for(let g=0;g<p;++g){for(let d of c[g]){let{permutationIndices:x,expandDims:b}=I.getEinsumPermutation(f,l[d]),S;I.isIdentityPermutation(x)?S=s[d]:(S=be({inputs:{x:s[d]},backend:e,attrs:{perm:x}}),h.push(S));let w=S.shape.slice();for(let T=0;T<b.length;++T)w.splice(b[T],0,1);y.arraysEqual(S.shape,w)||(S=Lt({inputs:{x:S},backend:e,attrs:{shape:w}}),h.push(S)),m===null?m=S:(m=ql({inputs:{a:S,b:m},backend:e}),h.push(m))}g<p-1&&(u[g]>=0&&(m=ii({inputs:{x:m},backend:e,attrs:{axis:u[g]-(i.length-f),keepDims:!1}}),h.push(m)),f--)}for(let g of h)g!==m&&e.disposeIntermediateTensorInfo(g);return m}var HA={kernelName:Au,backendName:"cpu",kernelFunc:QK};function tq(r){let{inputs:t,backend:e}=r,{dy:o,y:n}=t;Y([o,n],"eluGrad");let s=new Float32Array(y.sizeFromShape(n.shape)),i=e.data.get(n.dataId).values,a=e.data.get(o.dataId).values;for(let l=0;l<i.length;++l){let u=i[l];u>=0?s[l]=a[l]:s[l]=a[l]*(u+1)}return e.makeTensorInfo(n.shape,"float32",s)}var KA={kernelName:Du,backendName:"cpu",kernelFunc:tq};var eq=I.ERF_P,rq=I.ERF_A1,oq=I.ERF_A2,nq=I.ERF_A3,sq=I.ERF_A4,iq=I.ERF_A5,aq=Ct(us,r=>{let t=Math.sign(r),e=Math.abs(r),o=1/(1+eq*e);return t*(1-((((iq*o+sq)*o+nq)*o+oq)*o+rq)*o*Math.exp(-e*e))}),qA={kernelName:us,backendName:"cpu",kernelFunc:aq};function Bp(r){let{inputs:t,backend:e,attrs:o}=r,{input:n}=t,{dim:s}=o,i=n.shape.length,a=n.shape.slice(),l=s;return s<0&&(y.assert(-(i+1)<=s,()=>`Axis must be in the interval [${-(i+1)}, ${i}]`),l=i+s+1),a.splice(l,0,1),Lt({inputs:{x:n},backend:e,attrs:{shape:a}})}var jA={kernelName:Ri,backendName:"cpu",kernelFunc:Bp};var lq=Ot((r,t)=>r/t),xh=Bt(as,lq),yh={kernelName:as,backendName:"cpu",kernelFunc:xh};function fy(r,t,e){let o=r.shape,n=o[0],s=o[1],i=e.data.get(r.dataId),a=i.complexTensorInfos.real,l=i.complexTensorInfos.imag,u=[n,s],c=y.sizeFromShape(u),p=y.getTypedArrayFromDType("float32",c),m=y.getTypedArrayFromDType("float32",c);for(let d=0;d<n;d++){let x=Ko({inputs:{x:a},backend:e,attrs:{begin:[d,0],size:[1,s]}}),b=Ko({inputs:{x:l},backend:e,attrs:{begin:[d,0],size:[1,s]}}),S=qe({inputs:{real:x,imag:b},backend:e}),{real:w,imag:T}=uq(S,t,e),$=I.mergeRealAndImagArrays(w,T);for(let R=0;R<s;R++){let F=I.getComplexWithIndex($,R);p[d*s+R]=F.real,m[d*s+R]=F.imag}e.disposeIntermediateTensorInfo(x),e.disposeIntermediateTensorInfo(b),e.disposeIntermediateTensorInfo(S)}let f=e.makeTensorInfo(u,"float32",p),h=e.makeTensorInfo(u,"float32",m),g=qe({inputs:{real:f,imag:h},backend:e});return e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(h),g}function uq(r,t,e){let o=y.sizeFromShape(r.shape),n=e.data.get(r.dataId),s=e.data.get(n.complexTensorInfos.real.dataId).values,i=e.data.get(n.complexTensorInfos.imag.dataId).values;if(cq(o)){let a=xS(s,i,o,t,e),l=[r.shape[0],r.shape[1]];if(t){let u=e.makeTensorInfo(l,"float32",a.real),c=e.makeTensorInfo(l,"float32",a.imag),p=e.makeTensorInfo([],"float32",y.createScalarValue(o,"float32")),m=yr({inputs:{x:p},backend:e}),f=yh.kernelFunc({inputs:{a:u,b:p},backend:e}),h=yh.kernelFunc({inputs:{a:c,b:m},backend:e}),g=e.data.get(f.dataId).values,d=e.data.get(h.dataId).values;return e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(c),e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(h),{real:g,imag:d}}return a}else{let a=I.mergeRealAndImagArrays(s,i),l=pq(a,o,t);return I.splitRealAndImagArrays(l)}}function cq(r){return(r&r-1)===0}function xS(r,t,e,o,n){if(e===1)return{real:r,imag:t};let s=I.mergeRealAndImagArrays(r,t),i=e/2,a=I.complexWithEvenIndex(s),l=a.real,u=a.imag,c=[l.length],p=n.makeTensorInfo(c,"float32",l),m=n.makeTensorInfo(c,"float32",u),f=qe({inputs:{real:p,imag:m},backend:n}),h=I.complexWithOddIndex(s),g=h.real,d=h.imag,x=[g.length],b=n.makeTensorInfo(x,"float32",g),S=n.makeTensorInfo(x,"float32",d),w=qe({inputs:{real:b,imag:S},backend:n}),T=xS(l,u,i,o,n),$=T.real,R=T.imag,F=[$.length],O=n.makeTensorInfo(F,"float32",$),P=n.makeTensorInfo(F,"float32",R),B=qe({inputs:{real:O,imag:P},backend:n}),V=xS(g,d,i,o,n),G=V.real,H=V.imag,W=[G.length],j=n.makeTensorInfo(W,"float32",G),Z=n.makeTensorInfo(W,"float32",H),q=qe({inputs:{real:j,imag:Z},backend:n}),J=I.exponents(e,o),et=[J.real.length],rt=n.makeTensorInfo(et,"float32",J.real),at=n.makeTensorInfo(et,"float32",J.imag),it=qe({inputs:{real:rt,imag:at},backend:n}),ct=ql({inputs:{a:it,b:q},backend:n}),lt=Bn({inputs:{a:B,b:ct},backend:n}),ft=dh({inputs:{a:B,b:ct},backend:n}),St=Wo({inputs:{input:lt},backend:n}),kt=Wo({inputs:{input:ft},backend:n}),vt=Vn({inputs:{input:lt},backend:n}),zt=Vn({inputs:{input:ft},backend:n}),Mt=Ma({inputs:[St,kt],backend:n,attrs:{axis:0}}),ie=Ma({inputs:[vt,zt],backend:n,attrs:{axis:0}}),me=n.data.get(Mt.dataId).values,Oe=n.data.get(ie.dataId).values;return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(b),n.disposeIntermediateTensorInfo(S),n.disposeIntermediateTensorInfo(w),n.disposeIntermediateTensorInfo(O),n.disposeIntermediateTensorInfo(P),n.disposeIntermediateTensorInfo(B),n.disposeIntermediateTensorInfo(j),n.disposeIntermediateTensorInfo(Z),n.disposeIntermediateTensorInfo(q),n.disposeIntermediateTensorInfo(rt),n.disposeIntermediateTensorInfo(at),n.disposeIntermediateTensorInfo(it),n.disposeIntermediateTensorInfo(ct),n.disposeIntermediateTensorInfo(lt),n.disposeIntermediateTensorInfo(ft),n.disposeIntermediateTensorInfo(St),n.disposeIntermediateTensorInfo(vt),n.disposeIntermediateTensorInfo(kt),n.disposeIntermediateTensorInfo(zt),n.disposeIntermediateTensorInfo(Mt),n.disposeIntermediateTensorInfo(ie),{real:me,imag:Oe}}function pq(r,t,e){let o=new Float32Array(t*2);for(let n=0;n<t;n++){let s=0,i=0;for(let a=0;a<t;a++){let l=I.exponent(n*a,t,e),u=I.getComplexWithIndex(r,a);s+=u.real*l.real-u.imag*l.imag,i+=u.real*l.imag+u.imag*l.real}e&&(s/=t,i/=t),I.assignToTypedArray(o,s,i,n)}return o}function mq(r){let{inputs:t,backend:e}=r,{input:o}=t,n=y.sizeFromShape(o.shape),s=o.shape[o.shape.length-1],i=n/s,a=Lt({inputs:{x:o},backend:e,attrs:{shape:[i,s]}}),l=fy(a,!1,e),u=Lt({inputs:{x:l},backend:e,attrs:{shape:o.shape}});return e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(l),u}var XA={kernelName:Ru,backendName:"cpu",kernelFunc:mq};function bh(r){let{backend:t,attrs:e}=r,{shape:o,value:n,dtype:s}=e,i=s||y.inferDtype(n),a=y.getArrayFromDType(i,y.sizeFromShape(o));return fq(a,n,i),t.makeTensorInfo(o,i,a)}var YA={kernelName:Fu,backendName:"cpu",kernelFunc:bh};function fq(r,t,e){r.fill(t)}var ZA={kernelName:_u,backendName:"cpu",kernelFunc:({inputs:r,attrs:t,backend:e})=>{let{image:o}=r,n=e,s=y.getTypedArrayFromDType(o.dtype,y.sizeFromShape(o.shape)),[i,a,l,u]=o.shape,c=n.data.get(o.dataId).values;for(let m=0;m<i;m++){let f=m*l*a*u;for(let h=0;h<a;h++){let g=h*(l*u);for(let d=0;d<l;d++){let x=d*u;for(let b=0;b<u;b++){let S=Math.round(l-d-1),w=f+g+x+b,T=c[w];if(S>=0&&S<l){let $=S*u,R=f+g+$+b;T=c[R]}s[w]=T}}}}return{dataId:n.write(s,o.shape,o.dtype),shape:o.shape,dtype:o.dtype}}};function hq(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s,bias:i,preluActivationWeights:a}=t,{strides:l,pad:u,dataFormat:c,dilations:p,dimRoundingMode:m,activation:f,leakyreluAlpha:h}=o,g=dS({inputs:{x:n,filter:s},backend:e,attrs:{strides:l,pad:u,dataFormat:c,dilations:p,dimRoundingMode:m}});if(i){let d=g;if(c==="NCHW"&&i.shape.length===1&&i.shape[0]!==1){let x=Lt({inputs:{x:i},backend:e,attrs:{shape:[i.shape[0],1,1]}});g=Bn({inputs:{a:g,b:x},backend:e}),e.disposeIntermediateTensorInfo(x)}else g=Bn({inputs:{a:g,b:i},backend:e});e.disposeIntermediateTensorInfo(d)}if(f){let d=g;if(c==="NCHW"&&f==="prelu"&&a.shape.length===1&&a.shape[0]!==1){let x=Lt({inputs:{x:a},backend:e,attrs:{shape:[a.shape[0],1,1]}});g=jl(e,g,f,x,h),e.disposeIntermediateTensorInfo(x)}else g=jl(e,g,f,a,h);e.disposeIntermediateTensorInfo(d)}return g}var JA={kernelName:al,backendName:"cpu",kernelFunc:hq};function dq(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s,bias:i,preluActivationWeights:a}=t,{strides:l,pad:u,dataFormat:c,dilations:p,dimRoundingMode:m,activation:f,leakyreluAlpha:h}=o,g=gS({inputs:{x:n,filter:s},backend:e,attrs:{strides:l,pad:u,dataFormat:c,dilations:p,dimRoundingMode:m}});if(i){let d=g;g=Bn({inputs:{a:g,b:i},backend:e}),e.disposeIntermediateTensorInfo(d)}if(f){let d=g;g=jl(e,g,f,a,h),e.disposeIntermediateTensorInfo(d)}return g}var QA={kernelName:ll,backendName:"cpu",kernelFunc:dq};function gq(r){let{inputs:t,backend:e}=r,{params:o,indices:n}=t,s=y.sizeFromShape(o.shape),i=n.shape,a=i[i.length-1],[l,u,c,p]=I.prepareAndValidate(o,n);if(u===0)return e.makeTensorInfo(l,o.dtype,[]);let m=e.data.get(n.dataId).values,f=e.bufferSync(o),h=jx(m,f,o.dtype,u,a,c,p,o.shape,s);return e.makeTensorInfo(l,o.dtype,h.values)}var t2={kernelName:Ou,backendName:"cpu",kernelFunc:gq};function xq(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,indices:s}=t,{axis:i,batchDims:a}=o;Y([n,s],"gatherV2");let l=y.parseAxisParam(i,n.shape)[0],u=e.data.get(s.dataId).values,c=n.shape[l];for(let w=0;w<u.length;++w){let T=u[w];y.assert(T<=c-1&&T>=0,()=>`GatherV2: the index value ${T} is not in [0, ${c-1}]`)}let p=a;a==null&&(p=0);let m=y.sizeFromShape(s.shape),f=I.segment_util.collectGatherOpShapeInfo(n,s,l,p),h=Lt({inputs:{x:n},backend:e,attrs:{shape:[f.batchSize,f.outerSize,f.dimSize,f.sliceSize]}}),g=Lt({inputs:{x:s},backend:e,attrs:{shape:[f.batchSize,m/f.batchSize]}}),d=[f.batchSize,f.outerSize,m/f.batchSize,f.sliceSize],x=e.bufferSync(g),b=e.bufferSync(h),S=Xx(b,x,d);return e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(g),e.makeTensorInfo(f.outputShape,S.dtype,S.values)}var e2={kernelName:_i,backendName:"cpu",kernelFunc:xq};function yq(r){let{inputs:t,backend:e}=r,{input:o}=t,n=y.sizeFromShape(o.shape),s=o.shape[o.shape.length-1],i=n/s,a=Lt({inputs:{x:o},backend:e,attrs:{shape:[i,s]}}),l=fy(a,!0,e),u=Lt({inputs:{x:l},backend:e,attrs:{shape:o.shape}});return e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(l),u}var r2={kernelName:Lu,backendName:"cpu",kernelFunc:yq};var bq=Ct(ds,r=>Number.isFinite(r)?1:0,"bool"),o2={kernelName:ds,backendName:"cpu",kernelFunc:bq};var wq=Ct(gs,r=>Math.abs(r)===1/0?1:0,"bool"),n2={kernelName:gs,backendName:"cpu",kernelFunc:wq};var Cq=Ct(xs,r=>Number.isNaN(r)?1:0,"bool"),s2={kernelName:xs,backendName:"cpu",kernelFunc:Cq};function Sq(r){let{backend:t,attrs:e}=r,{start:o,stop:n,num:s}=e,i=Yx(o,n,s);return t.makeTensorInfo([i.length],"float32",i)}var i2={kernelName:zu,backendName:"cpu",kernelFunc:Sq};var Nq=Ct(bs,r=>Math.log1p(r)),a2={kernelName:bs,backendName:"cpu",kernelFunc:Nq};var vq=Ot((r,t)=>r&&t),Tq=Bt(el,vq,null,"bool"),l2={kernelName:el,backendName:"cpu",kernelFunc:Tq};var Iq=Ct(rl,r=>r?0:1,"bool"),u2={kernelName:rl,backendName:"cpu",kernelFunc:Iq};var kq=Ot((r,t)=>r||t),Eq=Bt(ol,kq,null,"bool"),c2={kernelName:ol,backendName:"cpu",kernelFunc:Eq};function $q(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{depthRadius:s,bias:i,alpha:a,beta:l}=o;Y(n,"LRN");let u=n.shape[3],c=u-1,p=e.data.get(n.dataId).values,m=y.sizeFromShape(n.shape),f=new Float32Array(m);function h(g){let d=g%u,x=g-d+Math.max(0,d-s),b=g-d+Math.min(d+s,c),S=0;for(;x<=b;x++){let w=p[x];S+=w*w}return S}for(let g=0;g<m;g++){let d=h(g),x=p[g]*Math.pow(i+a*d,-l);f[g]=x}return e.makeTensorInfo(n.shape,n.dtype,f)}var p2={kernelName:Li,backendName:"cpu",kernelFunc:$q};function Aq(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,y:s,dy:i}=t,{depthRadius:a,bias:l,alpha:u,beta:c}=o;Y(i,"LRNGrad");let p=y.sizeFromShape(i.shape),m=i.shape[3],f=e.data.get(i.dataId).values,h=e.data.get(n.dataId).values,g=e.data.get(s.dataId).values,d=new Float32Array(p),x=p;for(let b=0;b<x;b++){let S=b%m,w=b-S+Math.max(0,S-a),T=b-S+Math.min(m,S+a+1),$=0;for(let R=w;R<T;R++)$+=Math.pow(h[R],2);$=u*$+l;for(let R=w;R<T;R++){let F=-2*u*c*h[R]*g[b]/$;b===R&&(F+=Math.pow($,-c)),F*=f[b],d[R]+=F}}return e.makeTensorInfo(i.shape,n.dtype,d)}var m2={kernelName:Mu,backendName:"cpu",kernelFunc:Aq};function yS(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{reductionIndices:s,keepDims:i}=o,a=e,l=n.shape,u=l.length,c=y.parseAxisParam(s,l),p=c,m=I.getAxesPermutation(p,u),f=a.data.get(n.dataId).values;if(m!=null){let w=new Array(u);for(let T=0;T<w.length;T++)w[T]=l[m[T]];f=Lp(f,l,n.dtype,m,w),p=I.getInnerMostAxes(p.length,u),l=w}Y(n,"max"),I.assertAxesAreInnerMostDims("max",p,u);let[h,g]=I.computeOutAndReduceShapes(l,p),d=y.sizeFromShape(g),x=Zx(f,d,h,n.dtype),b=a.write(x,h,n.dtype),S=h;return i&&(S=I.expandShapeToKeepDim(h,c)),{dataId:b,shape:S,dtype:n.dtype}}var f2={kernelName:Pi,backendName:"cpu",kernelFunc:yS};function Dq(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t;Y(n,"maxPool");let{filterSize:s,strides:i,pad:a,dimRoundingMode:l}=o,u=1;y.assert(I.eitherStridesOrDilationsAreOne(i,u),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${u}'`);let c=I.computePool2DInfo(n.shape,s,i,u,a,l),p;if(c.filterWidth===1&&c.filterHeight===1&&y.arraysEqual(c.inShape,c.outShape))p=yr({inputs:{x:n},backend:e});else{let m=e.data.get(n.dataId).values,f=y.computeStrides(n.shape),h=Mp(m,n.shape,n.dtype,f,c,"max");p=e.makeTensorInfo(c.outShape,n.dtype,h.values)}return p}var h2={kernelName:zi,backendName:"cpu",kernelFunc:Dq};function Rq(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{filterSize:s,strides:i,pad:a,dimRoundingMode:l,dataFormat:u}=o;Y(n,"maxPool3d");let c=I.computePool3DInfo(n.shape,s,i,1,a,l,u),p=e.data.get(n.dataId).values,m=my(p,n.shape,n.dtype,y.computeStrides(n.shape),c,"max");return e.makeTensorInfo(m.shape,"float32",m.values)}var d2={kernelName:Mi,backendName:"cpu",kernelFunc:Rq};function Fq(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s}=t,{filterSize:i,strides:a,pad:l,dimRoundingMode:u}=o;Y([n,s],"maxPool3DGrad");let c=I.computePool3DInfo(s.shape,i,a,1,l,u),p=e.bufferSync(s),m=pA(p,c),f=c.strideDepth,h=c.strideHeight,g=c.strideWidth,d=c.dilationDepth,x=c.dilationHeight,b=c.dilationWidth,S=c.effectiveFilterDepth,w=c.effectiveFilterHeight,T=c.effectiveFilterWidth,$=S-1-c.padInfo.front,R=T-1-c.padInfo.left,F=w-1-c.padInfo.top,O=mt(s.shape,"float32"),P=e.bufferSync(n);for(let B=0;B<c.batchSize;++B)for(let V=0;V<c.inChannels;++V)for(let G=0;G<c.inDepth;++G)for(let H=0;H<c.inHeight;++H)for(let W=0;W<c.inWidth;++W){let j=G-$,Z=H-F,q=W-R,J=0;for(let et=0;et<S;et+=d){let rt=(j+et)/f;if(!(rt<0||rt>=c.outDepth||Math.floor(rt)!==rt))for(let at=0;at<w;at+=x){let it=(Z+at)/h;if(!(it<0||it>=c.outHeight||Math.floor(it)!==it))for(let ct=0;ct<T;ct+=b){let lt=(q+ct)/g;if(lt<0||lt>=c.outWidth||Math.floor(lt)!==lt)continue;let ft=S*w*T-1-m.get(B,rt,it,lt,V),St=et*w*T+at*T+ct,kt=ft===St?1:0;if(kt===0)continue;let vt=P.get(B,rt,it,lt,V);J+=vt*kt}}}O.set(J,B,G,H,W,V)}return e.makeTensorInfo(O.shape,O.dtype,O.values)}var g2={kernelName:Vu,backendName:"cpu",kernelFunc:Fq};function _q(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s,output:i}=t,a=s;Y([s,i],"maxPoolGrad");let{filterSize:l,strides:u,pad:c,dimRoundingMode:p}=o,m=I.computePool2DInfo(a.shape,l,u,1,c,p),f=e.data.get(a.dataId).values,h=mt(m.outShape,a.dtype,py(f,a.shape,a.dtype,m).values),g=m.strideHeight,d=m.strideWidth,x=m.dilationHeight,b=m.dilationWidth,S=m.effectiveFilterHeight,w=m.effectiveFilterWidth,T=w-1-m.padInfo.left,$=S-1-m.padInfo.top,R=mt(a.shape,"float32"),F=e.data.get(n.dataId).values,O=mt(n.shape,"float32",F);for(let P=0;P<m.batchSize;++P)for(let B=0;B<m.inChannels;++B)for(let V=0;V<m.inHeight;++V)for(let G=0;G<m.inWidth;++G){let H=V-$,W=G-T,j=0;for(let Z=0;Z<S;Z+=x){let q=(H+Z)/g;if(!(q<0||q>=m.outHeight||Math.floor(q)!==q))for(let J=0;J<w;J+=b){let et=(W+J)/d;if(et<0||et>=m.outWidth||Math.floor(et)!==et)continue;let rt=S*w-1-h.get(P,q,et,B),at=Z*w+J,it=rt===at?1:0;if(it===0)continue;let ct=O.get(P,q,et,B);j+=ct*it}}R.set(j,P,V,G,B)}return e.makeTensorInfo(R.shape,R.dtype,R.values)}var x2={kernelName:Bu,backendName:"cpu",kernelFunc:_q};function y2(r,t,e,o,n){let s=y.computeStrides(t),i=Mp(r,t,e,s,n,"max"),a=py(r,t,e,n,!0,o);return[i.values,a.values]}var b2={kernelName:Gu,backendName:"cpu",kernelFunc:({inputs:r,attrs:t,backend:e})=>{let{x:o}=r,{filterSize:n,strides:s,pad:i,includeBatchInIndex:a}=t,l=e;Y(o,"MaxPoolWithArgmax");let u=l.data.get(o.dataId).values,c=I.computePool2DInfo(o.shape,n,s,[1,1],i),[p,m]=y2(u,o.shape,o.dtype,a,c),f=l.write(p,c.outShape,o.dtype),h=l.write(m,c.outShape,o.dtype);return[{dataId:f,shape:c.outShape,dtype:o.dtype},{dataId:h,shape:c.outShape,dtype:"int32"}]}};function Oq(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o,a=y.parseAxisParam(s,n.shape),u=I.computeOutAndReduceShapes(n.shape,a)[1],c=y.sizeFromShape(u),p=[],m=e.makeTensorInfo([],"float32",new Float32Array([c]));p.push(m);let f=Uo({inputs:{x:n},backend:e,attrs:{dtype:"float32"}});p.push(f);let h=xh({inputs:{a:f,b:m},backend:e});p.push(h);let g=ii({inputs:{x:h},backend:e,attrs:{axis:s,keepDims:i}});return p.forEach(d=>e.disposeIntermediateTensorInfo(d)),g}var w2={kernelName:Bi,backendName:"cpu",kernelFunc:Oq};function Lq(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o;Y(n,"min");let a=y.parseAxisParam(s,n.shape),l=a,u=I.getAxesPermutation(l,n.shape.length),c=n;u!=null&&(c=be({inputs:{x:n},backend:e,attrs:{perm:u}}),l=I.getInnerMostAxes(l.length,n.shape.length)),I.assertAxesAreInnerMostDims("min",l,c.shape.length);let[p,m]=I.computeOutAndReduceShapes(c.shape,l),f=y.sizeFromShape(m),h=y.makeZerosTypedArray(y.sizeFromShape(p),c.dtype),g=e.data.get(c.dataId).values;for(let x=0;x<h.length;++x){let b=x*f,S=g[b];for(let w=0;w<f;++w){let T=g[b+w];(Number.isNaN(T)||T<S)&&(S=T)}h[x]=S}u!=null&&e.disposeIntermediateTensorInfo(c);let d=e.makeTensorInfo(p,c.dtype,h);if(i){let x=I.expandShapeToKeepDim(p,a),b=Lt({inputs:{x:d},backend:e,attrs:{shape:x}});return e.disposeIntermediateTensorInfo(d),b}return d}var C2={kernelName:Vi,backendName:"cpu",kernelFunc:Lq};function Pq(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{paddings:s,mode:i}=o;Y(n,"mirrorPad");let a=s.map((S,w)=>S[0]+n.shape[w]+S[1]),l=s.map(S=>S[0]),u=s.map((S,w)=>S[0]+n.shape[w]),c=i==="reflect"?0:1,p=e.data.get(n.dataId).values,m=n.shape.length,f=y.computeStrides(n.shape),h=y.sizeFromShape(a),g=a.length,d=y.computeStrides(a),x=y.getTypedArrayFromDType(n.dtype,h);for(let S=0;S<h;S++){let w=y.indexToLoc(S,g,d);for(let $=0;$<g;$++)w[$]<l[$]?w[$]=l[$]*2-w[$]-c:w[$]>=u[$]&&(w[$]=(u[$]-1)*2-w[$]+c);w=w.map(($,R)=>$-l[R]);let T=y.locToIndex(w,m,f);x[S]=p[T]}return{dataId:e.write(x,a,n.dtype),shape:a,dtype:n.dtype}}var S2={kernelName:Gi,backendName:"cpu",kernelFunc:Pq};var zq=Ot((r,t)=>{let e=r%t;return r<0&&t<0||r>=0&&t>=0?e:(e+t)%t}),Mq=Bt(Ss,zq),N2={kernelName:Ss,backendName:"cpu",kernelFunc:Mq};var T2=sm(Tm());function bS(r){let{inputs:t,backend:e,attrs:o}=r,{logits:n}=t,{dim:s}=o,i=n.shape.length,a=s;if(a===-1&&(a=i-1),a!==i-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${i} and dim was ${a}`);let l=y.parseAxisParam([a],n.shape),u=yS({inputs:{x:n},backend:e,attrs:{reductionIndices:l,keepDims:!1}}),c=I.expandShapeToKeepDim(u.shape,l),p=Lt({inputs:{x:u},backend:e,attrs:{shape:c}}),m=dh({inputs:{a:n,b:p},backend:e}),f=VC({inputs:{x:m},backend:e}),h=ii({inputs:{x:f},backend:e,attrs:{axis:l,keepDims:!1}}),g=Lt({inputs:{x:h},backend:e,attrs:{shape:c}}),d=xh({inputs:{a:f,b:g},backend:e});return e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(g),d}var v2={kernelName:sa,backendName:"cpu",kernelFunc:bS};function Bq(r){let{inputs:t,backend:e,attrs:o}=r,{logits:n}=t,{numSamples:s,seed:i,normalized:a}=o;Y(n,"multinomial");let l=a?n:bS({inputs:{logits:n},backend:e,attrs:{dim:-1}}),u=l.shape[0],c=l.shape[1],p=e.data.get(l.dataId).values,m=[u,s],f=y.makeZerosTypedArray(y.sizeFromShape(m),"int32");for(let h=0;h<u;++h){let g=h*c,d=new Float32Array(c-1);d[0]=p[g];for(let S=1;S<d.length;++S)d[S]=d[S-1]+p[g+S];let x=T2.alea(i.toString()),b=h*s;for(let S=0;S<s;++S){let w=x();f[b+S]=d.length;for(let T=0;T<d.length;T++)if(w<d[T]){f[b+S]=T;break}}}return a||e.disposeIntermediateTensorInfo(l),e.makeTensorInfo(m,"int32",f)}var I2={kernelName:Wu,backendName:"cpu",kernelFunc:Bq};var Vq=gr.nonMaxSuppressionV3Impl;function Gq(r){let{inputs:t,backend:e,attrs:o}=r,{boxes:n,scores:s}=t,{maxOutputSize:i,iouThreshold:a,scoreThreshold:l}=o;Y(n,"NonMaxSuppression");let u=e.data.get(n.dataId).values,c=e.data.get(s.dataId).values,{selectedIndices:p}=Vq(u,c,i,a,l);return e.makeTensorInfo([p.length],"int32",new Int32Array(p))}var k2={kernelName:Uu,backendName:"cpu",kernelFunc:Gq};var Wq=gr.nonMaxSuppressionV4Impl;function Uq(r){let{inputs:t,backend:e,attrs:o}=r,{boxes:n,scores:s}=t,{maxOutputSize:i,iouThreshold:a,scoreThreshold:l,padToMaxOutputSize:u}=o;Y(n,"NonMaxSuppressionPadded");let c=e.data.get(n.dataId).values,p=e.data.get(s.dataId).values,{selectedIndices:m,validOutputs:f}=Wq(c,p,i,a,l,u);return[e.makeTensorInfo([m.length],"int32",new Int32Array(m)),e.makeTensorInfo([],"int32",new Int32Array([f]))]}var E2={kernelName:Hu,backendName:"cpu",kernelFunc:Uq};var Hq=gr.nonMaxSuppressionV5Impl;function Kq(r){let{inputs:t,backend:e,attrs:o}=r,{boxes:n,scores:s}=t,{maxOutputSize:i,iouThreshold:a,scoreThreshold:l,softNmsSigma:u}=o;Y(n,"NonMaxSuppressionWithScore");let c=e.data.get(n.dataId).values,p=e.data.get(s.dataId).values,m=i,f=a,h=l,g=u,{selectedIndices:d,selectedScores:x}=Hq(c,p,m,f,h,g);return[e.makeTensorInfo([d.length],"int32",new Int32Array(d)),e.makeTensorInfo([x.length],"float32",new Float32Array(x))]}var $2={kernelName:Ku,backendName:"cpu",kernelFunc:Kq};function qq(r){let{inputs:t,backend:e,attrs:o}=r,{indices:n}=t,{dtype:s,depth:i,onValue:a,offValue:l}=o;Y(n,"oneHot");let u=y.sizeFromShape(n.shape),c=new Float32Array(u*i);c.fill(l);let p=e.data.get(n.dataId).values;for(let m=0;m<u;++m)p[m]>=0&&p[m]<i&&(c[m*i+p[m]]=a);return e.makeTensorInfo([...n.shape,i],s,c)}var A2={kernelName:Hi,backendName:"cpu",kernelFunc:qq};function wh(r){let{inputs:t,backend:e}=r,{x:o}=t;if(o.dtype==="string")throw new Error("zerosLike is not supported for string tensors");if(o.dtype==="complex64"){let n=Wo({inputs:{input:o},backend:e}),s=wh({inputs:{x:n},backend:e}),i=Vn({inputs:{input:o},backend:e}),a=wh({inputs:{x:i},backend:e}),l=qe({inputs:{real:s,imag:a},backend:e});return e.disposeIntermediateTensorInfo(n),e.disposeIntermediateTensorInfo(s),e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(a),l}else return bh({backend:e,attrs:{shape:o.shape,value:0,dtype:o.dtype}})}var D2={kernelName:la,backendName:"cpu",kernelFunc:wh};function R2(r){let{inputs:t,backend:e}=r,{x:o}=t;if(o.dtype==="string")throw new Error("onesLike is not supported for string tensors");if(o.dtype==="complex64"){let n=Wo({inputs:{input:o},backend:e}),s=R2({inputs:{x:n},backend:e}),i=Vn({inputs:{input:o},backend:e}),a=wh({inputs:{x:i},backend:e}),l=qe({inputs:{real:s,imag:a},backend:e});return e.disposeIntermediateTensorInfo(n),e.disposeIntermediateTensorInfo(s),e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(a),l}else return bh({backend:e,attrs:{shape:o.shape,value:1,dtype:o.dtype}})}var F2={kernelName:Ui,backendName:"cpu",kernelFunc:R2};function wS(r){let{inputs:t,backend:e,attrs:o}=r,{axis:n}=o;if(t.length===1)return Bp({inputs:{input:t[0]},backend:e,attrs:{dim:n}});let s=t[0].shape,i=t[0].dtype;t.forEach(c=>{y.assertShapesMatch(s,c.shape,"All tensors passed to stack must have matching shapes"),y.assert(i===c.dtype,()=>"All tensors passed to stack must have matching dtypes")});let a=[],l=t.map(c=>{let p=Bp({inputs:{input:c},backend:e,attrs:{dim:n}});return a.push(p),p}),u=Ma({inputs:l,backend:e,attrs:{axis:n}});return a.forEach(c=>e.disposeIntermediateTensorInfo(c)),u}var _2={kernelName:Ki,backendName:"cpu",kernelFunc:wS};function jq(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{paddings:s,constantValue:i}=o;Y(n,"pad");let a=s.map((b,S)=>b[0]+n.shape[S]+b[1]),l=s.map(b=>b[0]),u=e.data.get(n.dataId).values,c=y.sizeFromShape(n.shape),p=n.shape.length,m=y.computeStrides(n.shape),f=y.sizeFromShape(a),h=a.length,g=y.computeStrides(a),d=y.getTypedArrayFromDType(n.dtype,f);i!==0&&d.fill(i);for(let b=0;b<c;b++){let w=y.indexToLoc(b,p,m).map(($,R)=>$+l[R]),T=y.locToIndex(w,h,g);d[T]=u[b]}return{dataId:e.write(d,a,n.dtype),shape:a,dtype:n.dtype}}var hy={kernelName:qi,backendName:"cpu",kernelFunc:jq};var Xq=Ot((r,t)=>Math.pow(r,t)),Yq=Bt(vs,Xq),O2={kernelName:vs,backendName:"cpu",kernelFunc:Yq};function Zq(r){let{inputs:t,backend:e,attrs:o}=r,{paramsNestedSplits:n,paramsDenseValues:s,indices:i}=t,{outputRaggedRank:a}=o,l=n.map(x=>e.data.get(x.dataId).values),u=n.map(x=>x.shape),c=e.data.get(s.dataId).values,p=e.data.get(i.dataId).values,[m,f,h]=Jx(l,u,c,s.shape,s.dtype,p,i.shape,a),g=m.map(x=>e.makeTensorInfo([x.length],"int32",x)),d=e.makeTensorInfo(h,s.dtype,f);return g.concat([d])}var L2={kernelName:qu,backendName:"cpu",kernelFunc:Zq};function Jq(r){let{inputs:t,backend:e}=r,{starts:o,limits:n,deltas:s}=t,i=e.data.get(o.dataId).values,a=e.data.get(n.dataId).values,l=e.data.get(s.dataId).values,[u,c]=Qx(i,o.shape,o.dtype,a,n.shape,l,s.shape),p=e.makeTensorInfo([u.length],"int32",u),m=e.makeTensorInfo([c.length],o.dtype,c);return[p,m]}var P2={kernelName:ju,backendName:"cpu",kernelFunc:Jq};function Qq(r){let{inputs:t,backend:e,attrs:o}=r,{shape:n,values:s,defaultValue:i,rowPartitionTensors:a}=t,{rowPartitionTypes:l}=o,u=e.data.get(n.dataId).values,c=e.data.get(s.dataId).values,p=e.data.get(i.dataId).values,m=a.map(d=>e.data.get(d.dataId).values),f=a.map(d=>d.shape),[h,g]=ty(u,n.shape,c,s.shape,s.dtype,p,i.shape,m,f,l);return e.makeTensorInfo(h,s.dtype,g)}var z2={kernelName:Xu,backendName:"cpu",kernelFunc:Qq};function tj(r){let{backend:t,attrs:e}=r,{start:o,stop:n,dtype:s,step:i}=e,a=ey(o,n,i,s);return t.makeTensorInfo([a.length],s,a)}var M2={kernelName:Yu,backendName:"cpu",kernelFunc:tj};var ej=Ct(Ts,r=>1/r),B2={kernelName:Ts,backendName:"cpu",kernelFunc:ej};function rj(r){let{inputs:t,backend:e,attrs:o}=r,{images:n}=t,{alignCorners:s,halfPixelCenters:i,size:a}=o;Y(n,"resizeBilinear");let l=y.computeStrides(n.shape),[u,c]=a,[p,m,f,h]=n.shape,g=e.data.get(n.dataId).values,d=new Float32Array(y.sizeFromShape([p,u,c,h])),x=[s&&u>1?m-1:m,s&&c>1?f-1:f],b=[s&&u>1?u-1:u,s&&c>1?c-1:c],S=0,w=x[0]/b[0],T=x[1]/b[1];for(let $=0;$<p;$++)for(let R=0;R<u;R++){let F;i?F=w*(R+.5)-.5:F=w*R;let O=Math.max(0,Math.floor(F)),P=F-O,B=Math.min(m-1,Math.ceil(F)),V=$*l[0]+O*l[1],G=$*l[0]+B*l[1];for(let H=0;H<c;H++){let W;i?W=T*(H+.5)-.5:W=T*H;let j=Math.max(0,Math.floor(W)),Z=W-j,q=Math.min(f-1,Math.ceil(W)),J=V+j*l[2],et=G+j*l[2],rt=V+q*l[2],at=G+q*l[2];for(let it=0;it<h;it++){let ct=g[J+it],lt=g[et+it],ft=g[rt+it],St=g[at+it],kt=ct+(ft-ct)*Z,vt=lt+(St-lt)*Z,zt=kt+(vt-kt)*P;d[S++]=zt}}}return e.makeTensorInfo([p,u,c,h],"float32",d)}var V2={kernelName:Ji,backendName:"cpu",kernelFunc:rj};function oj(r){let{inputs:t,backend:e,attrs:o}=r,{images:n,dy:s}=t,{alignCorners:i}=o;Y([s,n],"resizeBilinearGrad");let a=y.computeStrides(n.shape),[l,u,c,p]=n.shape,[,m,f]=s.shape,h=new Float32Array(l*u*c*p),g=[i&&m>1?u-1:u,i&&f>1?c-1:c],d=[i&&m>1?m-1:m,i&&f>1?f-1:f],x=g[0]/d[0],b=g[1]/d[1],S=e.data.get(s.dataId).values,w=0;for(let T=0;T<l;T++){let $=T*a[0];for(let R=0;R<m;R++){let F=R*x,O=Math.floor(F),P=Math.min(Math.ceil(F),u-1),B=$+O*a[1],V=$+P*a[1],G=F-O,H=1-G;for(let W=0;W<f;W++){let j=W*b,Z=Math.floor(j),q=Math.min(Math.ceil(j),c-1),J=j-Z,et=1-J,rt=B+Z*a[2],at=B+q*a[2],it=V+Z*a[2],ct=V+q*a[2],lt=H*et,ft=H*J,St=G*et,kt=G*J;for(let vt=0;vt<p;vt++){let zt=S[w++];h[rt+vt]+=zt*lt,h[at+vt]+=zt*ft,h[it+vt]+=zt*St,h[ct+vt]+=zt*kt}}}}return e.makeTensorInfo([l,c,u,p],"float32",h)}var G2={kernelName:Qu,backendName:"cpu",kernelFunc:oj};function nj(r){let{inputs:t,backend:e,attrs:o}=r,{images:n}=t,{alignCorners:s,halfPixelCenters:i,size:a}=o;Y(n,"resizeNearestNeighbor");let l=y.computeStrides(n.shape),[u,c]=a,[p,m,f,h]=n.shape,g=e.data.get(n.dataId).values,d=new Float32Array(p*u*c*h),x=[s&&u>1?m-1:m,s&&c>1?f-1:f],b=[s&&u>1?u-1:u,s&&c>1?c-1:c],S=x[0]/b[0],w=x[1]/b[1],T=0;for(let $=0;$<p;$++){let R=$*l[0];for(let F=0;F<u;F++){let O=i?S*(F+.5):S*F,P=Math.min(m-1,s?Math.round(O):Math.floor(O));i&&(P=Math.max(0,P));let B=R+P*l[1];for(let V=0;V<c;V++){let G=i?w*(V+.5):w*V,H=Math.min(f-1,s?Math.round(G):Math.floor(G));i&&(H=Math.max(0,H));let W=B+H*l[2];for(let j=0;j<h;j++){let Z=g[W+j];d[T++]=Z}}}}return e.makeTensorInfo([p,u,c,h],n.dtype,d)}var W2={kernelName:Zi,backendName:"cpu",kernelFunc:nj};function sj(r){let{inputs:t,backend:e,attrs:o}=r,{images:n,dy:s}=t,{alignCorners:i}=o;Y([s,n],"resizeNearestNeighborGrad");let a=y.computeStrides(n.shape),l=y.computeStrides(s.shape),[u,c,p,m]=n.shape,[,f,h]=s.shape,g=new Float32Array(u*c*p*m),d=e.data.get(s.dataId).values,x=[i&&f>1?c-1:c,i&&h>1?p-1:p],b=[i&&f>1?f-1:f,i&&h>1?h-1:h],S=x[0]/b[0],w=x[1]/b[1],T=1/S,$=1/w,R=Math.ceil(T)*2+2,F=Math.ceil($)*2+2;for(let O=0;O<u;O++){let P=O*a[0];for(let B=0;B<c;B++){let V=P+B*a[1],G=Math.floor(B*T),H=Math.floor(G-R/2);for(let W=0;W<p;W++){let j=V+W*a[2],Z=Math.floor(W*$),q=Math.floor(Z-F/2);for(let J=0;J<m;J++){let et=0;for(let rt=0;rt<R;rt++){let at=rt+H;if(at<0||at>=f)continue;let it=P+at*l[1],ct=at*S,lt=Math.min(c-1,i?Math.round(ct):Math.floor(ct));if(B===lt)for(let ft=0;ft<F;ft++){let St=ft+q;if(St<0||St>=h)continue;let kt=it+St*l[2],vt=St*w,zt=Math.min(p-1,i?Math.round(vt):Math.floor(vt));W===zt&&(et+=d[kt+J])}}g[j+J]=et}}}}return e.makeTensorInfo(n.shape,n.dtype,g)}var U2={kernelName:Ju,backendName:"cpu",kernelFunc:sj};function ij(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{dims:s}=o;Y(n,"reverse");let i=n.shape.length,a=y.parseAxisParam(s,n.shape);if(i===0)return yr({inputs:{x:n},backend:e});let l=new Wt(n.shape,n.dtype),u=e.bufferSync(n);for(let c=0;c<l.size;c++){let p=l.indexToLoc(c),m=p.slice();a.forEach(f=>m[f]=n.shape[f]-1-m[f]),l.set(u.get(...m),...p)}return e.makeTensorInfo(l.shape,l.dtype,l.values)}var H2={kernelName:Qi,backendName:"cpu",kernelFunc:ij};var K2={kernelName:gc,backendName:"cpu",kernelFunc:({inputs:r,attrs:t,backend:e})=>{let{image:o}=r,{radians:n,fillValue:s,center:i}=t,a=e,l=y.getTypedArrayFromDType(o.dtype,y.sizeFromShape(o.shape)),[u,c,p,m]=o.shape,[f,h]=I.getImageCenter(i,c,p),g=255,d=Math.sin(n),x=Math.cos(n),b=a.data.get(o.dataId).values;for(let w=0;w<u;w++){let T=w*p*c*m;for(let $=0;$<c;$++){let R=$*(p*m);for(let F=0;F<p;F++){let O=F*m;for(let P=0;P<m;P++){let B=[u,$,F,P],V=B[2],G=B[1],H=(V-f)*x-(G-h)*d,W=(V-f)*d+(G-h)*x;H=Math.round(H+f),W=Math.round(W+h);let j=s;if(typeof s!="number"&&(P===3?j=g:j=s[P]),H>=0&&H<p&&W>=0&&W<c){let q=W*(p*m),J=H*m,et=T+q+J+P;j=b[et]}let Z=T+R+O+P;l[Z]=j}}}}return{dataId:a.write(l,o.shape,o.dtype),shape:o.shape,dtype:o.dtype}}};var aj=Ct(Es,r=>{let t=Math.floor(r);return r-t<.5?Math.floor(r):r-t>.5?Math.ceil(r):t%2===0?t:t+1}),q2={kernelName:Es,backendName:"cpu",kernelFunc:aj};function lj(r){let{inputs:t,backend:e,attrs:o}=r,{indices:n,updates:s}=t,{shape:i}=o,{sliceRank:a,numUpdates:l,sliceSize:u,strides:c,outputSize:p}=I.calculateShapes(s,n,i),m=!0,f=e.bufferSync(n),h=e.bufferSync(s),g=mn(f,h,i,p,u,l,a,c,0,m);return e.makeTensorInfo(i,g.dtype,g.values)}var j2={kernelName:tc,backendName:"cpu",kernelFunc:lj};function uj(r,t){let e=0,o=r.length,n=0;for(;e<o;)n=Math.floor((e+o)/2),r[n]<t?e=n+1:o=n;return o}function cj(r,t){let e=0,o=r.length,n=0;for(;e<o;)n=Math.floor((e+o)/2),r[n]<=t?e=n+1:o=n;return o}function X2(r,t,e,o,n,s){let i=y.getArrayFromDType("int32",e*n);for(let a=0;a<e;++a){let l=r.slice(a*o,(a+1)*o),u=a*n;for(let c=0;c<n;++c)i[u+c]=s==="left"?uj(l,t[c+u]):cj(l,t[c+u])}return i}function pj(r){let{inputs:t,backend:e,attrs:o}=r,{sortedSequence:n,values:s}=t,{side:i}=o,a=e.data.get(n.dataId).values,l=e.data.get(s.dataId).values,u=X2(a,l,n.shape[0],n.shape[1],s.shape[1],i);return e.makeTensorInfo(s.shape,"int32",u)}var Y2={kernelName:rc,backendName:"cpu",kernelFunc:pj};function mj(r){let{inputs:t,backend:e}=r,{condition:o,t:n,e:s}=t;Y([o,n,s],"select");let i=o.shape.length,a=e.data.get(o.dataId).values,l=e.data.get(n.dataId).values,u=e.data.get(s.dataId).values,c=Le(n.dtype,s.dtype),p=y.makeZerosTypedArray(y.sizeFromShape(n.shape),c),m=0,f=i===0||i>1||n.shape.length===1?1:y.sizeFromShape(n.shape.slice(1));for(let h=0;h<a.length;h++)for(let g=0;g<f;g++)a[h]===1?p[m++]=l[h]:p[m++]=u[h];return e.makeTensorInfo(n.shape,c,p)}var Z2={kernelName:ta,backendName:"cpu",kernelFunc:mj};var fj=I.SELU_SCALEALPHA,hj=I.SELU_SCALE,dj=Ct(As,r=>r>=0?hj*r:fj*(Math.exp(r)-1)),J2={kernelName:As,backendName:"cpu",kernelFunc:dj};var gj=Ct(Fs,r=>r<0?-1:r>0?1:0),Q2={kernelName:Fs,backendName:"cpu",kernelFunc:gj};var xj=Ct(Ds,r=>Math.sin(r)),tD={kernelName:Ds,backendName:"cpu",kernelFunc:xj};var yj=Ct(Rs,r=>Math.sinh(r)),eD={kernelName:Rs,backendName:"cpu",kernelFunc:yj};var bj=11920928955078125e-23,rD=Math.log(bj)+2,wj=Ct(Os,r=>{let t=r>-rD,e=r<rD,o=Math.exp(r),n;return e?n=o:t?n=r:n=Math.log(1+o),n}),oD={kernelName:Os,backendName:"cpu",kernelFunc:wj};function Cj(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{blockShape:s,paddings:i}=o;Y([n],"spaceToBatchND");let a=y.sizeFromShape(s),l=[[0,0]];l.push(...i);for(let $=1+s.length;$<n.shape.length;++$)l.push([0,0]);let u=hy.kernelFunc({inputs:{x:n},backend:e,attrs:{paddings:l,constantValue:0}}),c=I.getReshaped(u.shape,s,a,!1),p=I.getPermuted(c.length,s.length,!1),m=I.getReshapedPermuted(u.shape,s,a,!1),g=Lt({inputs:{x:u},backend:e,attrs:{shape:c}}),b=be({inputs:{x:g},backend:e,attrs:{perm:p}}),T=Lt({inputs:{x:b},backend:e,attrs:{shape:m}});return e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(b),T}var nD={kernelName:oa,backendName:"cpu",kernelFunc:Cj};function Sj(r){let{inputs:t,backend:e}=r,{indices:o,values:n,denseShape:s,defaultValue:i}=t;if(s.shape.length!==1)throw new Error(`Dense shape must be a vector, saw:
        ${s.shape}`);if(o.shape.length!==2)throw new Error(`Indices must be a matrix, saw:
        ${o.shape}`);if(n.shape.length!==1)throw new Error(`Values must be a vector, saw:
        ${n.shape}`);if(i.shape.length!==0)throw new Error(`Default value must be a scalar, saw:
        ${i.shape}`);let a=e.data.get(o.dataId).values,l=e.data.get(n.dataId).values,u=e.data.get(s.dataId).values,c=e.data.get(i.dataId).values[0],[p,m,f,h,g]=ry(a,o.shape,o.dtype,l,n.dtype,u,c);return[e.makeTensorInfo(m,o.dtype,p),e.makeTensorInfo([m[0]],n.dtype,f),e.makeTensorInfo([h.length],"bool",new Uint8Array(h.map(d=>Number(d)))),e.makeTensorInfo([g.length],o.dtype,new Int32Array(g))]}var sD={kernelName:oc,backendName:"cpu",kernelFunc:Sj};function Nj(r){let{inputs:t,backend:e}=r,{inputIndices:o,inputShape:n,newShape:s}=t;if(o.shape.length!==2)throw new Error(`Input indices should be a matrix but received shape
        ${o.shape}`);if(n.shape.length!==1)throw new Error(`Input shape should be a vector but received shape
        ${n.shape}`);if(s.shape.length!==1)throw new Error(`Target shape should be a vector but received shape ${s.shape}`);let i=Array.from(e.data.get(n.dataId).values),a=e.data.get(o.dataId).values,l=Array.from(e.data.get(s.dataId).values),[u,c,p]=oy(a,o.shape,o.dtype,i,l);return[e.makeTensorInfo(c,o.dtype,u),e.makeTensorInfo([p.length],s.dtype,new Int32Array(p))]}var iD={kernelName:nc,backendName:"cpu",kernelFunc:Nj};function vj(r){let{inputs:t,backend:e}=r,{data:o,indices:n,segmentIds:s}=t;if(o.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(n.shape.length!==1)throw new Error(`Indices should be a vector but received shape
          ${n.shape}`);if(s.shape.length!==1)throw new Error(`Segment ids should be a vector but received shape
          ${s.shape}`);if(n.shape[0]!==s.shape[0])throw new Error("segmentIds and indices should have same size.");let i=e.data.get(o.dataId).values,a=e.data.get(n.dataId).values,l=e.data.get(s.dataId).values,[u,c]=zp(i,o.shape,o.dtype,a,l,!0);return e.makeTensorInfo(c,o.dtype,u)}var aD={kernelName:sc,backendName:"cpu",kernelFunc:vj};function Tj(r){let{inputs:t,backend:e}=r,{data:o,indices:n,segmentIds:s}=t;if(o.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(n.shape.length!==1)throw new Error(`Indices should be a vector but received shape
         ${n.shape}`);if(s.shape.length!==1)throw new Error(`Segment ids should be a vector but received shape
         ${s.shape}`);if(n.shape[0]!==s.shape[0])throw new Error("segmentIds and indices should have same size.");let i=e.data.get(o.dataId).values,a=e.data.get(n.dataId).values,l=e.data.get(s.dataId).values,[u,c]=zp(i,o.shape,o.dtype,a,l);return e.makeTensorInfo(c,o.dtype,u)}var lD={kernelName:ic,backendName:"cpu",kernelFunc:Tj};function Ij(r){let{inputs:t,backend:e,attrs:o}=r,{sparseIndices:n,sparseValues:s,defaultValue:i}=t,{outputShape:a}=o,{sliceRank:l,numUpdates:u,sliceSize:c,strides:p,outputSize:m}=I.calculateShapes(s,n,a),f=!1,h=e.bufferSync(n),g;switch(s.dtype){case"bool":{let d=e.bufferSync(s),x=!!e.data.get(i.dataId).values[0];g=mn(h,d,a,m,c,u,l,p,x,f);break}case"float32":{let d=e.bufferSync(s),x=e.data.get(i.dataId).values[0];g=mn(h,d,a,m,c,u,l,p,x,f);break}case"int32":{let d=e.bufferSync(s),x=e.data.get(i.dataId).values[0];g=mn(h,d,a,m,c,u,l,p,x,f);break}case"string":{let d=e.bufferSync(s),x=y.decodeString(e.data.get(i.dataId).values[0]);g=mn(h,d,a,m,c,u,l,p,x,f);break}default:throw new Error(`Unsupported type ${s.dtype}`)}return e.makeTensorInfo(a,g.dtype,g.values)}var uD={kernelName:ac,backendName:"cpu",kernelFunc:Ij};function kj(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{numOrSizeSplits:s,axis:i}=o,a=y.parseAxisParam(i,n.shape)[0],l=I.prepareSplitSize(n,s,a),u=new Array(n.shape.length).fill(0),c=n.shape.slice();return l.map(p=>{let m=[...c];m[a]=p;let f=Ko({inputs:{x:n},backend:e,attrs:{begin:u,size:m}});return u[a]+=p,f})}var cD={kernelName:na,backendName:"cpu",kernelFunc:kj};var pD={kernelName:lc,backendName:"cpu",kernelFunc:({inputs:r,backend:t})=>{let{x:e}=r,o=t;Y(e,"square");let n=o.data.get(e.dataId).values,s=new Float32Array(n.length);for(let a=0;a<n.length;++a){let l=n[a];s[a]=l*l}return{dataId:o.write(s,e.shape,e.dtype),shape:e.shape,dtype:e.dtype}}};var Ej=Ct(Vs,(r,t)=>{let e=t;return isNaN(r)?NaN:r>0?1:e.alpha}),mD={kernelName:Vs,backendName:"cpu",kernelFunc:Ej};function $j(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{begin:s,end:i,strides:a,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:p,shrinkAxisMask:m}=o;Y(n,"stridedSlice");let{finalShapeSparse:f,finalShape:h,isIdentity:g,sliceDim0:d,isSimpleSlice:x,begin:b,end:S,strides:w}=Ze.sliceInfo(n.shape,s,i,a,l,u,c,p,m),T;if(g)T=Lt({inputs:{x:n},backend:e,attrs:{shape:h}});else if(d||x){y.assert(n.shape.length>=1,()=>`Input must have rank at least 1, got: ${n.shape.length}`);let $=Ze.computeOutShape(b,S,w),R=Ko({inputs:{x:n},backend:e,attrs:{begin:b,size:$}});T=Lt({inputs:{x:R},backend:e,attrs:{shape:h}}),e.disposeIntermediateTensorInfo(R)}else{let $=e.bufferSync(n),R=ny(f,$,w,b);T=e.makeTensorInfo(h,R.dtype,R.values)}return T}var fD={kernelName:uc,backendName:"cpu",kernelFunc:$j};function Aj(r){let{inputs:t,backend:e,attrs:o}=r,{separator:n,nGramWidths:s,leftPad:i,rightPad:a,padWidth:l,preserveShortSequences:u}=o,{data:c,dataSplits:p}=t,m=e.data.get(c.dataId).values,f=e.data.get(p.dataId).values,[h,g]=sy(m,f,n,s,i,a,l,u);return[e.makeTensorInfo([h.length],"string",h),e.makeTensorInfo(p.shape,"int32",g)]}var hD={kernelName:cc,backendName:"cpu",kernelFunc:Aj};function Dj(r){let{inputs:t,backend:e,attrs:o}=r,{skipEmpty:n}=o,{input:s,delimiter:i}=t;if(s.dtype!=="string")throw new Error("Input must be of datatype string");if(s.shape.length!==1)throw new Error(`Input must be a vector, got shape: ${s.shape}`);if(i.shape.length!==0)throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);let a=e.data.get(s.dataId).values,l=e.data.get(i.dataId).values[0],[u,c,p]=iy(a,l,n),m=c.length;return[e.makeTensorInfo([m,2],"int32",u),e.makeTensorInfo([m],"string",c),e.makeTensorInfo([2],"int32",new Int32Array(p))]}var dD={kernelName:pc,backendName:"cpu",kernelFunc:Dj};function Rj(r){let{inputs:t,backend:e,attrs:o}=r,{numBuckets:n}=o,{input:s}=t;if(s.dtype!=="string")throw new Error("Input must be of datatype string");if(n<=0)throw new Error("Number of buckets must be at least 1");let i=e.data.get(s.dataId).values,a=ay(i,n);return e.makeTensorInfo(s.shape,"int32",a)}var gD={kernelName:mc,backendName:"cpu",kernelFunc:Rj};var Fj=Ct(Ms,r=>Math.tan(r)),xD={kernelName:Ms,backendName:"cpu",kernelFunc:Fj};var _j=Ct(Bs,r=>Math.tanh(r)),yD={kernelName:Bs,backendName:"cpu",kernelFunc:_j};function Oj(r){let{inputs:t,backend:e}=r,{tensor:o,indices:n,updates:s}=t,{sliceRank:i,numUpdates:a,sliceSize:l,strides:u,outputSize:c}=I.calculateShapes(s,n,o.shape),p=!1,m=e.bufferSync(n),f=e.bufferSync(s),h=e.bufferSync(o),g=mn(m,f,o.shape,c,l,a,i,u,h,p);return e.makeTensorInfo(o.shape,g.dtype,g.values)}var bD={kernelName:ec,backendName:"cpu",kernelFunc:Oj};function Lj(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{reps:s}=o;Y(n,"tile");let i=ly(e.bufferSync(n),s);return e.makeTensorInfo(i.shape,i.dtype,i.values)}var wD={kernelName:bn,backendName:"cpu",kernelFunc:Lj};function Pj(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{k:s,sorted:i}=o;Y(n,"topk");let a=e.data.get(n.dataId).values,[l,u]=uy(a,n.shape,n.dtype,s,i);return[e.makeTensorInfo(l.shape,l.dtype,l.values),e.makeTensorInfo(u.shape,u.dtype,u.values)]}var CD={kernelName:fc,backendName:"cpu",kernelFunc:Pj};function zj(r){let{inputs:t,attrs:e,backend:o}=r,{image:n,transforms:s}=t,{interpolation:i,fillMode:a,fillValue:l,outputShape:u}=e,[c,p,m,f]=n.shape,[h,g]=u??[p,m],d=[c,h,g,f],x=y.computeStrides(n.shape),b=x[0],S=x[1],w=x[2],T=y.computeStrides(d),$=T[0],R=T[1],F=T[2],O=y.getTypedArrayFromDType(n.dtype,y.sizeFromShape(d));O.fill(l);let P=o.data.get(n.dataId).values,B=o.data.get(s.dataId).values;for(let G=0;G<c;++G){let H=s.shape[0]===1?B:B.subarray(G*8,G*8+8);for(let W=0;W<h;++W)for(let j=0;j<g;++j)for(let Z=0;Z<f;++Z){let q,J=H[6]*j+H[7]*W+1;if(J===0)continue;let et=(H[0]*j+H[1]*W+H[2])/J,rt=(H[3]*j+H[4]*W+H[5])/J,at=SD(et,m,a),it=SD(rt,p,a);switch(i){case"nearest":q=Wj(P,p,m,b,S,w,G,it,at,Z,l);break;case"bilinear":q=Uj(P,p,m,b,S,w,G,it,at,Z,l);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${i}`)}let ct=G*$+W*R+j*F+Z;O[ct]=q}return o.makeTensorInfo(d,n.dtype,O)}return{dataId:o.write(O,d,n.dtype),shape:n.shape,dtype:n.dtype}}var ND={kernelName:hc,backendName:"cpu",kernelFunc:zj};function SD(r,t,e){switch(e){case"reflect":return Mj(r,t);case"wrap":return Bj(r,t);case"nearest":return Gj(r,t);case"constant":default:return Vj(r,t)}}function Mj(r,t){let e=r;if(e<0)if(t<=1)e=0;else{let o=2*t;e<o&&(e=o*Math.trunc(-e/o)+e),e=e<-t?e+o:-e-1}else if(e>t-1)if(t<=1)e=0;else{let o=2*t;e-=o*Math.trunc(e/o),e>=t&&(e=o-e-1)}return y.clamp(0,e,t-1)}function Bj(r,t){let e=r;if(e<0)if(t<=1)e=0;else{let o=t-1;e+=t*(Math.trunc(-e/o)+1)}else if(e>t-1)if(t<=1)e=0;else{let o=t-1;e-=t*Math.trunc(e/o)}return y.clamp(0,e,t-1)}function Vj(r,t){return r}function Gj(r,t){return y.clamp(0,r,t-1)}function Ch(r,t,e,o,n,s,i,a,l,u,c){let p=i*o+a*n+l*s+u;return 0<=a&&a<t&&0<=l&&l<e?r[p]:c}function Wj(r,t,e,o,n,s,i,a,l,u,c){let p=Math.round(a),m=Math.round(l);return Ch(r,t,e,o,n,s,i,p,m,u,c)}function Uj(r,t,e,o,n,s,i,a,l,u,c){let p=Math.floor(a),m=Math.floor(l),f=p+1,h=m+1,g=(h-l)*Ch(r,t,e,o,n,s,i,p,m,u,c)+(l-m)*Ch(r,t,e,o,n,s,i,p,h,u,c),d=(h-l)*Ch(r,t,e,o,n,s,i,f,m,u,c)+(l-m)*Ch(r,t,e,o,n,s,i,f,h,u,c);return(f-a)*g+(a-p)*d}function Hj(r){let{inputs:t,attrs:e,backend:o}=r,{axis:n}=e,{x:s}=t;Y(s,"unique");let i=o.data.get(s.dataId).values,{outputValues:a,outputShape:l,indices:u}=cy(i,n,s.shape,s.dtype);return[o.makeTensorInfo(l,s.dtype,a),o.makeTensorInfo([u.length],"int32",u)]}var vD={kernelName:dc,backendName:"cpu",kernelFunc:Hj};function Kj(r){let{inputs:t,backend:e,attrs:o}=r,{value:n}=t,{axis:s}=o;s<0&&(s+=n.shape.length);let i=n.shape.length,a=n.shape[s],l=new Array(i-1),u=0;for(let f=0;f<i;f++)f!==s&&(l[u++]=n.shape[f]);let c=new Array(i).fill(0),p=n.shape.slice();p[s]=1;let m=new Array(a);for(let f=0;f<m.length;f++){c[s]=f;let h=Ko({inputs:{x:n},backend:e,attrs:{begin:c,size:p}});m[f]=Lt({inputs:{x:h},backend:e,attrs:{shape:l}}),e.disposeIntermediateTensorInfo(h)}return m}var TD={kernelName:ia,backendName:"cpu",kernelFunc:Kj};function qj(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,segmentIds:s}=t,{numSegments:i}=o;Y(n,"unsortedSegmentSum");let a=n.shape.length,l=s.shape.length,u=[],c=[],p=a-l,m=s;for(let h=0;h<p;++h){let g=Bp({inputs:{input:m},backend:e,attrs:{dim:h+1}});m=g,c.push(g)}for(let h=0;h<i;++h){let g=y.createScalarValue(h,"int32"),d=e.makeTensorInfo([],"int32",g),x=MC({inputs:{a:d,b:m},backend:e}),b=Uo({inputs:{x},backend:e,attrs:{dtype:"float32"}}),S=ql({inputs:{a:b,b:n},backend:e}),w=ii({inputs:{x:S},backend:e,attrs:{axis:0,keepDims:!1}});u.push(w),c.push(d),c.push(x),c.push(b),c.push(S),c.push(w)}let f=wS({inputs:u,backend:e,attrs:{axis:0}});return c.forEach(h=>e.disposeIntermediateTensorInfo(h)),f}var ID={kernelName:aa,backendName:"cpu",kernelFunc:qj};var jj=[J$,i$,Q$,tA,p$,eA,rA,oA,nA,sA,iA,aA,lA,uA,cA,mA,fA,hA,dA,Z$,gA,xA,yA,m$,bA,c$,f$,wA,a$,CA,NA,vA,TA,IA,kA,EA,$A,AA,DA,RA,FA,_A,OA,LA,PA,zA,MA,BA,VA,GA,WA,HA,H$,KA,h$,qA,d$,jA,g$,XA,YA,ZA,x$,y$,JA,QA,t2,e2,b$,w$,l$,r2,SA,o2,n2,s2,K$,C$,S$,i2,N$,a2,l2,u2,c2,p2,m2,f2,v$,h2,d2,g2,x2,b2,w2,C2,T$,S2,N2,I2,I$,k$,k2,E2,$2,E$,A2,F2,_2,hy,O2,q$,A$,L2,P2,z2,M2,u$,yh,B2,j$,X$,Y$,V2,G2,W2,U2,H2,K2,q2,O$,j2,Y2,Z2,J2,P$,Q2,tD,eD,z$,v2,oD,nD,sD,iD,aD,lD,uD,cD,B$,pD,V$,G$,mD,fD,hD,dD,gD,W$,UA,xD,yD,bD,wD,CD,ND,$$,vD,TD,ID,D2];for(let r of jj)Bh(r);var Xl={},dy={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function kD(r,t){Xl[r]=t}function po(r,t){if(!(r in Xl)||t!=null){let o=Yj(r,t);if(o!==null)Xl[r]=o;else return console.log("Could not get context for WebGL version",r),null}let e=Xl[r];return e==null||e.isContextLost()?(delete Xl[r],po(r)):(e.disable(e.DEPTH_TEST),e.disable(e.STENCIL_TEST),e.disable(e.BLEND),e.disable(e.DITHER),e.disable(e.POLYGON_OFFSET_FILL),e.disable(e.SAMPLE_COVERAGE),e.enable(e.SCISSOR_TEST),e.enable(e.CULL_FACE),e.cullFace(e.BACK),Xl[r])}function Xj(r){if(!z().getBool("IS_SAFARI")&&typeof OffscreenCanvas<"u"&&r===2)return new OffscreenCanvas(300,150);if(typeof document<"u")return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}function Yj(r,t){if(r!==1&&r!==2)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");let e=t??Xj(r);return e.addEventListener("webglcontextlost",o=>{o.preventDefault(),delete Xl[r]},!1),z().getBool("SOFTWARE_WEBGL_ENABLED")&&(dy.failIfMajorPerformanceCaveat=!1),r===1?e.getContext("webgl",dy)||e.getContext("experimental-webgl",dy):e.getContext("webgl2",dy)}var Ba;(function(r){r[r.DENSE=0]="DENSE",r[r.SHARED_BATCH=1]="SHARED_BATCH"})(Ba||(Ba={}));var br;(function(r){r[r.RENDER=0]="RENDER",r[r.UPLOAD=1]="UPLOAD",r[r.PIXELS=2]="PIXELS",r[r.DOWNLOAD=3]="DOWNLOAD"})(br||(br={}));var lr;(function(r){r[r.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",r[r.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",r[r.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",r[r.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",r[r.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"})(lr||(lr={}));function Yl(r,t){return[t,r]}function ED(r,t){return r*t}function Sh(r){let t=y.sizeFromShape(r),e=Math.ceil(t/4);return y.sizeToSquarishShape(e)}function Gn(r,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(r/2))]}function $D(r,t){let[e,o]=Gn(r,t);return e*o*4}function Nh(r,t){let e=r,o,n,s,i,a,l,u,c,p,m;return z().getNumber("WEBGL_VERSION")===2?(o=e.R32F,n=e.R16F,s=e.RGBA16F,i=e.RGBA32F,a=e.RED,u=4,c=1,p=e.HALF_FLOAT,m=e.FLOAT,l=e.RGBA8):(o=r.RGBA,n=r.RGBA,s=r.RGBA,i=e.RGBA,a=r.RGBA,u=4,c=4,p=t!=null?t.HALF_FLOAT_OES:null,m=r.FLOAT,l=r.RGBA),{internalFormatFloat:o,internalFormatHalfFloat:n,internalFormatPackedHalfFloat:s,internalFormatPackedFloat:i,textureFormatFloat:a,downloadTextureFormat:l,downloadUnpackNumChannels:u,defaultNumChannels:c,textureTypeHalfFloat:p,textureTypeFloat:m}}function pt(r,t){let e=t();return z().getBool("DEBUG")&&Zj(r),e}function Zj(r){let t=r.getError();if(t!==r.NO_ERROR)throw new Error("WebGL Error: "+t6(r,t))}var Jj=596e-10,Qj=65504;function AD(r){return!!(z().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||r===0||Jj<Math.abs(r)&&Math.abs(r)<Qj)}function t6(r,t){switch(t){case r.NO_ERROR:return"NO_ERROR";case r.INVALID_ENUM:return"INVALID_ENUM";case r.INVALID_VALUE:return"INVALID_VALUE";case r.INVALID_OPERATION:return"INVALID_OPERATION";case r.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case r.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case r.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}function vh(r,t){return ai(r,()=>r.getExtension(t),'Extension "'+t+'" not supported on this browser.')}function DD(r,t){let e=ai(r,()=>r.createShader(r.VERTEX_SHADER),"Unable to create vertex WebGLShader.");if(pt(r,()=>r.shaderSource(e,t)),pt(r,()=>r.compileShader(e)),r.getShaderParameter(e,r.COMPILE_STATUS)===!1)throw console.log(r.getShaderInfoLog(e)),new Error("Failed to compile vertex shader.");return e}function RD(r,t){let e=ai(r,()=>r.createShader(r.FRAGMENT_SHADER),"Unable to create fragment WebGLShader.");if(pt(r,()=>r.shaderSource(e,t)),pt(r,()=>r.compileShader(e)),z().get("ENGINE_COMPILE_ONLY"))return e;if(r.getShaderParameter(e,r.COMPILE_STATUS)===!1)throw TS(t,r.getShaderInfoLog(e)),new Error("Failed to compile fragment shader.");return e}var e6=/ERROR: [0-9]+:([0-9]+):/g;function TS(r,t){let e=e6.exec(t);if(e==null){console.log(`Couldn't parse line number in error: ${t}`),console.log(r);return}let o=+e[1],n=r.split(`
`),s=n.length.toString().length+2,i=n.map((p,m)=>y.rightPad((m+1).toString(),s)+p),a=0;for(let p=0;p<i.length;p++)a=Math.max(i[p].length,a);let l=i.slice(0,o-1),u=i.slice(o-1,o),c=i.slice(o);console.log(l.join(`
`)),console.log(t.split(`
`)[0]),console.log(`%c ${y.rightPad(u[0],a)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join(`
`))}function FD(r){return ai(r,()=>r.createProgram(),"Unable to create WebGLProgram.")}function _D(r,t){if(pt(r,()=>r.linkProgram(t)),!z().get("ENGINE_COMPILE_ONLY")&&r.getProgramParameter(t,r.LINK_STATUS)===!1)throw console.log(r.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}function xy(r,t){if(pt(r,()=>r.validateProgram(t)),r.getProgramParameter(t,r.VALIDATE_STATUS)===!1)throw console.log(r.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function OD(r,t){let e=ai(r,()=>r.createBuffer(),"Unable to create WebGLBuffer");return pt(r,()=>r.bindBuffer(r.ARRAY_BUFFER,e)),pt(r,()=>r.bufferData(r.ARRAY_BUFFER,t,r.STATIC_DRAW)),e}function LD(r,t){let e=ai(r,()=>r.createBuffer(),"Unable to create WebGLBuffer");return pt(r,()=>r.bindBuffer(r.ELEMENT_ARRAY_BUFFER,e)),pt(r,()=>r.bufferData(r.ELEMENT_ARRAY_BUFFER,t,r.STATIC_DRAW)),e}function PD(r){return ai(r,()=>r.createTexture(),"Unable to create WebGLTexture.")}function zD(r,t){let e=z().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(r<=0||t<=0){let o=`[${r}x${t}]`;throw new Error("Requested texture size "+o+" is invalid.")}if(r>e||t>e){let o=`[${r}x${t}]`,n=`[${e}x${e}]`;throw new Error("Requested texture size "+o+" greater than WebGL maximum on this browser / GPU "+n+".")}}function MD(r){return ai(r,()=>r.createFramebuffer(),"Unable to create WebGLFramebuffer.")}function IS(r,t,e,o,n,s,i){let a=r.getAttribLocation(t,e);return a===-1?!1:(pt(r,()=>r.bindBuffer(r.ARRAY_BUFFER,o)),pt(r,()=>r.vertexAttribPointer(a,n,r.FLOAT,!1,s,i)),pt(r,()=>r.enableVertexAttribArray(a)),!0)}function r6(r,t,e){n6(r,e),pt(r,()=>r.activeTexture(r.TEXTURE0+e)),pt(r,()=>r.bindTexture(r.TEXTURE_2D,t))}function BD(r,t,e){return ai(r,()=>r.getUniformLocation(t,e),'uniform "'+e+'" not present in program.')}function VD(r,t,e){return r.getUniformLocation(t,e)}function GD(r,t,e,o){pt(r,()=>r6(r,t,o)),pt(r,()=>r.uniform1i(e,o))}function yy(r,t,e){pt(r,()=>r.bindFramebuffer(r.FRAMEBUFFER,e)),pt(r,()=>r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,t,0))}function kS(r,t){pt(r,()=>r.bindFramebuffer(r.FRAMEBUFFER,t)),pt(r,()=>r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,null,0))}function Th(r){let t=r.checkFramebufferStatus(r.FRAMEBUFFER);if(t!==r.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+o6(r,t))}function o6(r,t){switch(t){case r.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case r.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case r.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case r.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}function ai(r,t,e){let o=pt(r,()=>t());if(o==null)throw new Error(e);return o}function n6(r,t){let e=r.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,o=t+r.TEXTURE0;if(o<r.TEXTURE0||o>e){let n=`[gl.TEXTURE0, gl.TEXTURE${e}]`;throw new Error(`textureUnit must be in ${n}.`)}}function Va(r,t=2){return y.sizeFromShape(r.slice(0,r.length-t))}function Ga(r){if(r.length===0)throw Error("Cannot get rows and columns of an empty shape array.");return[r.length>1?r[r.length-2]:1,r[r.length-1]]}function Ih(r){let t=[1,1,1];return r.length===0||r.length===1&&r[0]===1||(t=[Va(r),...Ga(r)]),t}function WD(r,t=!1){let e=z().getNumber("WEBGL_MAX_TEXTURE_SIZE"),o=z().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");o===1/0&&z().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE")&&(o=e/2),t&&(e=e*2,o=o*2,r=r.map((a,l)=>l>=r.length-2?y.nearestLargerEven(r[l]):r[l]),r.length===1&&(r=[2,r[0]])),r.length!==2&&(r=y.squeezeShape(r).newShape);let n=y.sizeFromShape(r),s=null;r.length<=1&&n<=e?s=[1,n]:r.length===2&&r[0]<=e&&r[1]<=e?s=r:r.length===3&&r[0]*r[1]<=e&&r[2]<=e?s=[r[0]*r[1],r[2]]:r.length===3&&r[0]<=e&&r[1]*r[2]<=e?s=[r[0],r[1]*r[2]]:r.length===4&&r[0]*r[1]*r[2]<=e&&r[3]<=e?s=[r[0]*r[1]*r[2],r[3]]:r.length===4&&r[0]<=e&&r[1]*r[2]*r[3]<=e&&(s=[r[0],r[1]*r[2]*r[3]]);let i=s!=null&&Math.max(...s)>o&&Math.min(...s)<=(t?2:1)&&Math.min(...s)>0;if(s==null||i)if(t){let a=Va(r),l=2,u=2;r.length&&([l,u]=Ga(r)),n=a*(l/2)*(u/2),s=y.sizeToSquarishShape(n).map(c=>c*2)}else s=y.sizeToSquarishShape(n);return s}function gy(r){return r%2===0}function Zl(r,t){if(r=r.slice(-2),t=t.slice(-2),y.arraysEqual(r,t)||!r.length||!t.length||r[0]===0||r[1]===0||t[0]===0||t[1]===0)return!0;if(r.length!==t.length){let e=r[r.length-1],o=t[t.length-1];if(e===o||gy(e)&&gy(o)&&(r[0]===1||t[0]===1))return!0}return r[1]===t[1]&&gy(r[0])&&gy(t[0])}var SS,NS;function UD(r){if(SS==null){let t=po(r);SS=t.getParameter(t.MAX_TEXTURE_SIZE)}return SS}function HD(r){if(NS==null){let t=po(r);NS=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,NS)}function KD(r){if(r===0)return 0;let t,e=po(r);return vo(e,"EXT_disjoint_timer_query_webgl2")&&r===2?t=2:vo(e,"EXT_disjoint_timer_query")?t=1:t=0,t}function vo(r,t){return r.getExtension(t)!=null}function ES(r){try{if(po(r)!=null)return!0}catch(t){return console.log("Error when getting WebGL context: ",t),!1}return!1}function qD(r){if(r===0)return!1;let t=po(r);if(r===1){if(!vo(t,"OES_texture_float"))return!1}else if(!vo(t,"EXT_color_buffer_float"))return!1;return vS(t)}function jD(r){if(r===0)return!1;let t=po(r);if(r===1){if(!vo(t,"OES_texture_float")||!vo(t,"WEBGL_color_buffer_float"))return!1}else{if(vo(t,"EXT_color_buffer_float"))return vS(t);let o="EXT_color_buffer_half_float";if(vo(t,o)){let n=t.getExtension(o);return s6(t,n)}return!1}return vS(t)}function vS(r){let t=Nh(r),e=r.createTexture();r.bindTexture(r.TEXTURE_2D,e);let o=1,n=1;r.texImage2D(r.TEXTURE_2D,0,t.internalFormatFloat,o,n,0,t.textureFormatFloat,t.textureTypeFloat,null);let s=r.createFramebuffer();r.bindFramebuffer(r.FRAMEBUFFER,s),r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,e,0);let i=r.checkFramebufferStatus(r.FRAMEBUFFER)===r.FRAMEBUFFER_COMPLETE;return r.bindTexture(r.TEXTURE_2D,null),r.bindFramebuffer(r.FRAMEBUFFER,null),r.deleteTexture(e),r.deleteFramebuffer(s),i}function s6(r,t){let e=Nh(r,t),o=r.createTexture();r.bindTexture(r.TEXTURE_2D,o);let n=1,s=1;r.texImage2D(r.TEXTURE_2D,0,e.internalFormatHalfFloat,n,s,0,e.textureFormatFloat,e.textureTypeHalfFloat,null);let i=r.createFramebuffer();r.bindFramebuffer(r.FRAMEBUFFER,i),r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,o,0);let a=r.checkFramebufferStatus(r.FRAMEBUFFER)===r.FRAMEBUFFER_COMPLETE;return r.bindTexture(r.TEXTURE_2D,null),r.bindFramebuffer(r.FRAMEBUFFER,null),r.deleteTexture(o),r.deleteFramebuffer(i),a}function XD(r){return r!==2?!1:po(r).fenceSync!=null}function Wn(r,t){Array.isArray(r)||(r=[r]),r.forEach(e=>{e!=null&&y.assert(e.dtype!=="complex64",()=>`${t} does not support complex64 tensors in the WebGL backend.`)})}var bt=z();bt.registerFlag("HAS_WEBGL",()=>bt.getNumber("WEBGL_VERSION")>0);bt.registerFlag("WEBGL_VERSION",()=>ES(2)?2:ES(1)?1:0);bt.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",()=>!1);bt.registerFlag("WEBGL_BUFFER_SUPPORTED",()=>bt.get("WEBGL_VERSION")===2);bt.registerFlag("WEBGL_CPU_FORWARD",()=>!0);bt.registerFlag("WEBGL_FORCE_F16_TEXTURES",()=>!1);bt.registerFlag("WEBGL_PACK",()=>bt.getBool("HAS_WEBGL"));bt.registerFlag("WEBGL_PACK_NORMALIZATION",()=>bt.getBool("WEBGL_PACK"));bt.registerFlag("WEBGL_PACK_CLIP",()=>bt.getBool("WEBGL_PACK"));bt.registerFlag("WEBGL_PACK_DEPTHWISECONV",()=>bt.getBool("WEBGL_PACK"));bt.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",()=>bt.getBool("WEBGL_PACK"));bt.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",()=>bt.getBool("WEBGL_PACK"));bt.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",()=>bt.getBool("WEBGL_PACK"));bt.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",()=>bt.getBool("WEBGL_PACK"));bt.registerFlag("WEBGL_PACK_REDUCE",()=>bt.getBool("WEBGL_PACK"));bt.registerFlag("WEBGL_LAZILY_UNPACK",()=>bt.getBool("WEBGL_PACK"));bt.registerFlag("WEBGL_CONV_IM2COL",()=>bt.getBool("WEBGL_PACK"));bt.registerFlag("WEBGL_MAX_TEXTURE_SIZE",()=>UD(bt.getNumber("WEBGL_VERSION")));bt.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",()=>HD(bt.getNumber("WEBGL_VERSION")));bt.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",()=>{let r=bt.getNumber("WEBGL_VERSION");return r===0?0:KD(r)});bt.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",()=>bt.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!ma.isMobile());bt.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",()=>qD(bt.getNumber("WEBGL_VERSION")));bt.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",()=>bt.getBool("WEBGL_FORCE_F16_TEXTURES")?!1:bt.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"));bt.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",()=>jD(bt.getNumber("WEBGL_VERSION")));bt.registerFlag("WEBGL_FENCE_API_ENABLED",()=>XD(bt.getNumber("WEBGL_VERSION")));bt.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",()=>bt.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0);bt.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",()=>-1,r=>{if(r<0&&r!==-1)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${r}.`)});bt.registerFlag("WEBGL_FLUSH_THRESHOLD",()=>ma.isMobile()?1:-1,r=>{if(r<0&&r!==-1)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${r}.`)});bt.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",()=>128);bt.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",()=>!1);bt.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",()=>1e5);bt.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",()=>128);bt.registerFlag("WEBGL_EXP_CONV",()=>!1);bt.registerFlag("SOFTWARE_WEBGL_ENABLED",()=>bt.getBool("IS_TEST"));bt.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE",()=>1/0);bt.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE",()=>!1);bt.registerFlag("WEBGL2_ISNAN_CUSTOM",()=>!1);bt.registerFlag("ENGINE_COMPILE_ONLY",()=>!1);function we(){let r,t,e,o,n,s,i,a,l,u;return z().getNumber("WEBGL_VERSION")===2?(r="#version 300 es",t="in",e="out",o="in",n="texture",s="outputColor",i="out vec4 outputColor;",a=z().getBool("WEBGL2_ISNAN_CUSTOM")?`
      bool isnan_custom(float val) {
        uint floatToUint = floatBitsToUint(val);
        return (floatToUint & 0x7fffffffu) > 0x7f800000u;
      }

      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan_custom(val.x),
          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));
      }

      #define isnan(value) isnan_custom(value)
    `:"",l="",u=`
      #define round(value) newRound(value)
      int newRound(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 newRound(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `):(r="",t="attribute",e="varying",o="varying",n="texture2D",s="gl_FragColor",i="",a=`
      #define isnan(value) isnan_custom(value)
      bool isnan_custom(float val) {
        return (val > 0. || val < 1. || val == 0.) ? false : true;
      }
      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));
      }
    `,l=`
      uniform float INFINITY;

      bool isinf(float val) {
        return abs(val) == INFINITY;
      }
      bvec4 isinf(vec4 val) {
        return equal(abs(val), vec4(INFINITY));
      }
    `,u=`
      int round(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 round(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `),{version:r,attribute:t,varyingVs:e,varyingFs:o,texture2D:n,output:s,defineOutput:i,defineSpecialNaN:a,defineSpecialInf:l,defineRound:u}}function fn(r,t,e="index"){let o=y.computeStrides(t);return o.map((n,s)=>{let i=`int ${r[s]} = ${e} / ${n}`,a=s===o.length-1?`int ${r[s+1]} = ${e} - ${r[s]} * ${n}`:`index -= ${r[s]} * ${n}`;return`${i}; ${a};`}).join("")}function Jl(r,t,e="index"){let o=y.computeStrides(t);return o.map((n,s)=>{let i=`int ${r[s]} = ${e} / outShapeStrides[${s}]`,a=s===o.length-1?`int ${r[s+1]} = ${e} - ${r[s]} * outShapeStrides[${s}]`:`index -= ${r[s]} * outShapeStrides[${s}]`;return`${i}; ${a};`}).join("")}function i6(r,t){let e=r.length,o=r.map(s=>`${t}[${s}]`),n=new Array(e-1);n[e-2]=o[e-1];for(let s=e-3;s>=0;--s)n[s]=`(${n[s+1]} * ${o[s+1]})`;return n}function YD(r,t,e="index"){let o=r.map((s,i)=>i),n=i6(o,t);return n.map((s,i)=>{let a=`int ${r[i]} = ${e} / ${n[i]}`,l=i===n.length-1?`int ${r[i+1]} = ${e} - ${r[i]} * ${n[i]}`:`index -= ${r[i]} * ${n[i]}`;return`${a}; ${l};`}).join("")}function Vp(r){let t=y.computeStrides(r).map(e=>e.toString());return`
  int getFlatIndex(ivec3 coords) {
    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;
  }
`}function Gp(){return`
  int getFlatIndex(ivec3 coords) {
    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;
  }
`}var wy=`
  const float FLOAT_MAX = 1.70141184e38;
  const float FLOAT_MIN = 1.17549435e-38;

  lowp vec4 encode_float(highp float v) {
    if (isnan(v)) {
      return vec4(255, 255, 255, 255);
    }

    highp float av = abs(v);

    if(av < FLOAT_MIN) {
      return vec4(0.0, 0.0, 0.0, 0.0);
    } else if(v > FLOAT_MAX) {
      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;
    } else if(v < -FLOAT_MAX) {
      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;
    }

    highp vec4 c = vec4(0,0,0,0);

    highp float e = floor(log2(av));
    highp float m = exp2(fract(log2(av))) - 1.0;

    c[2] = floor(128.0 * m);
    m -= c[2] / 128.0;
    c[1] = floor(32768.0 * m);
    m -= c[1] / 32768.0;
    c[0] = floor(8388608.0 * m);

    highp float ebias = e + 127.0;
    c[3] = floor(ebias / 2.0);
    ebias -= c[3] * 2.0;
    c[2] += floor(ebias) * 128.0;

    c[3] += 128.0 * step(0.0, -v);

    return c / 255.0;
  }
`;var{getBroadcastDims:ZD}=I;function JD(r,t,e){let o=[];if(r.forEach(f=>{let h=y.sizeFromShape(f.shapeInfo.logicalShape);if(f.shapeInfo.isUniform?o.push(`uniform float ${f.name}${h>1?`[${h}]`:""};`):(o.push(`uniform sampler2D ${f.name};`),o.push(`uniform int offset${f.name};`)),e.enableShapeUniforms){let{uniformShape:g}=Cy(e.packedInputs,f.shapeInfo.logicalShape,f.shapeInfo.texShape);switch(g.length){case 1:o.push(`uniform int ${f.name}Shape;`);break;case 2:o.push(`uniform ivec2 ${f.name}Shape;`);break;case 3:o.push(`uniform ivec3 ${f.name}Shape;`);break;case 4:o.push(`uniform ivec4 ${f.name}Shape;`);break;default:break}o.push(`uniform ivec2 ${f.name}TexShape;`)}}),e.enableShapeUniforms){switch(t.logicalShape.length){case 1:o.push("uniform int outShape;");break;case 2:o.push("uniform ivec2 outShape;"),o.push("uniform int outShapeStrides;");break;case 3:o.push("uniform ivec3 outShape;"),o.push("uniform ivec2 outShapeStrides;");break;case 4:o.push("uniform ivec4 outShape;"),o.push("uniform ivec3 outShapeStrides;");break;default:break}o.push("uniform ivec2 outTexShape;")}e.customUniforms&&e.customUniforms.forEach(f=>{o.push(`uniform ${f.type} ${f.name}${f.arrayIndex?`[${f.arrayIndex}]`:""};`)});let n=o.join(`
`),s=r.map(f=>a6(f,t,e.packedInputs,e.enableShapeUniforms)).join(`
`),i=t.texShape,a=we(),l=c6(a),u,c,p=f6(a);return t.isPacked?(u=l6(t.logicalShape,i,e.enableShapeUniforms),c=m6(a)):(u=u6(t.logicalShape,i,e.enableShapeUniforms),c=p6(a)),e.packedInputs&&(p+=x6),[p,l,c,n,u,s,e.userCode].join(`
`)}function Up(r,t=!1){let e=r.shapeInfo.logicalShape;switch(e.length){case 0:return $6(r,t);case 1:return D6(r,t);case 2:return F6(r,t);case 3:return O6(r,t);case 4:return P6(r,t);case 5:return z6(r);case 6:return M6(r);default:throw new Error(`${e.length}-D input sampling is not yet supported`)}}function QD(r,t){switch(r.shapeInfo.logicalShape.length){case 0:return E6(r);case 1:return A6(r,t);case 2:return R6(r,t);case 3:return _6(r,t);default:return L6(r,t)}}function a6(r,t,e=!1,o){let n="";e?n+=QD(r,o):n+=Up(r,o);let s=r.shapeInfo.logicalShape,i=t.logicalShape;return s.length<=i.length&&(e?n+=B6(r,t):n+=V6(r,t)),n}function l6(r,t,e){switch(r.length){case 0:return tR();case 1:return y6(r,t,e);case 2:return I6(r,t,e);case 3:return w6(r,t,e);default:return S6(r,t,e)}}function u6(r,t,e){switch(r.length){case 0:return tR();case 1:return b6(r,t,e);case 2:return k6(r,t,e);case 3:return C6(r,t,e);case 4:return N6(r,t,e);case 5:return v6(r,t);case 6:return T6(r,t);default:throw new Error(`${r.length}-D output sampling is not yet supported`)}}function c6(r){return`
    float sampleTexture(sampler2D textureSampler, vec2 uv) {
      return ${r.texture2D}(textureSampler, uv).r;
    }
  `}function p6(r){return`
    void setOutput(float val) {
      ${r.output} = vec4(val, 0, 0, 0);
    }
  `}function m6(r){return`
    void setOutput(vec4 val) {
      ${r.output} = val;
    }
  `}function f6(r){return`${r.version}
    precision highp float;
    precision highp int;
    precision highp sampler2D;
    ${r.varyingFs} vec2 resultUV;
    ${r.defineOutput}
    const vec2 halfCR = vec2(0.5, 0.5);

    struct ivec5
    {
      int x;
      int y;
      int z;
      int w;
      int u;
    };

    struct ivec6
    {
      int x;
      int y;
      int z;
      int w;
      int u;
      int v;
    };

    uniform float NAN;
    ${r.defineSpecialNaN}
    ${r.defineSpecialInf}
    ${r.defineRound}

    int imod(int x, int y) {
      return x - y * (x / y);
    }

    int idiv(int a, int b, float sign) {
      int res = a / b;
      int mod = imod(a, b);
      if (sign < 0. && mod != 0) {
        res -= 1;
      }
      return res;
    }

    //Based on the work of Dave Hoskins
    //https://www.shadertoy.com/view/4djSRW
    #define HASHSCALE1 443.8975
    float random(float seed){
      vec2 p = resultUV * seed;
      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);
      p3 += dot(p3, p3.yzx + 19.19);
      return fract((p3.x + p3.y) * p3.z);
    }

    ${h6}
    ${d6}
    ${g6}
  `}var h6=`
vec2 uvFromFlat(int texNumR, int texNumC, int index) {
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {
  int texelIndex = index / 2;
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,d6=`
vec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,
  int texNumC, int row, int col) {
  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,g6=`
vec2 packedUVfrom3D(int texNumR, int texNumC,
    int texelsInBatch, int texelsInLogicalRow, int b,
    int row, int col) {
  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,x6=`
  float getChannel(vec4 frag, vec2 innerDims) {
    vec2 modCoord = mod(innerDims, 2.);
    return modCoord.x == 0. ?
      (modCoord.y == 0. ? frag.r : frag.g) :
      (modCoord.y == 0. ? frag.b : frag.a);
  }
  float getChannel(vec4 frag, int dim) {
    float modCoord = mod(float(dim), 2.);
    return modCoord == 0. ? frag.r : frag.g;
  }
`;function tR(){return`
    int getOutputCoords() {
      return 0;
    }
  `}function y6(r,t,e){let o=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];return o[0]===1?e?`
      int getOutputCoords() {
        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));
      }
    `:`
      int getOutputCoords() {
        return 2 * int(resultUV.x * ${o[1]}.0);
      }
    `:o[1]===1?e?`
      int getOutputCoords() {
        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));
      }
    `:`
      int getOutputCoords() {
        return 2 * int(resultUV.y * ${o[0]}.0);
      }
    `:e?`
    int getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);
    }
  `:`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${o[0]}, ${o[1]}));
      return 2 * (resTexRC.x * ${o[1]} + resTexRC.y);
    }
  `}function b6(r,t,e){return t[0]===1?e?`
      int getOutputCoords() {
        return int(resultUV.x * float(outTexShape[1]));
      }
    `:`
      int getOutputCoords() {
        return int(resultUV.x * ${t[1]}.0);
      }
    `:t[1]===1?e?`
      int getOutputCoords() {
        return int(resultUV.y * float(outTexShape[0]));
      }
    `:`
      int getOutputCoords() {
        return int(resultUV.y * ${t[0]}.0);
      }
    `:e?`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      return resTexRC.x * outTexShape[1] + resTexRC.y;
    }
  `:`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${t[0]}, ${t[1]}));
      return resTexRC.x * ${t[1]} + resTexRC.y;
    }
  `}function w6(r,t,e){if(e)return`
    ivec3 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec3(b, r, c);
    }
  `;let o=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],n=Math.ceil(r[2]/2),s=n*Math.ceil(r[1]/2);return`
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${o[0]}, ${o[1]}));
      int index = resTexRC.x * ${o[1]} + resTexRC.y;

      int b = index / ${s};
      index -= b * ${s};

      int r = 2 * (index / ${n});
      int c = imod(index, ${n}) * 2;

      return ivec3(b, r, c);
    }
  `}function C6(r,t,e){if(e)return`
  ivec3 getOutputCoords() {
    ivec2 resTexRC = ivec2(resultUV.yx *
                           vec2(outTexShape[0], outTexShape[1]));
    int index = resTexRC.x * outTexShape[1] + resTexRC.y;
    ${Jl(["r","c","d"],r)}
    return ivec3(r, c, d);
  }
`;let o=fn(["r","c","d"],r);return`
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;
      ${o}
      return ivec3(r, c, d);
    }
  `}function S6(r,t,e){if(e)return`
    ivec4 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatchN = texelsInBatch * outShape[1];

      int b2 = index / texelsInBatchN;
      index -= b2 * texelsInBatchN;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec4(b2, b, r, c);
    }
  `;let o=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],n=Math.ceil(r[r.length-1]/2),s=n*Math.ceil(r[r.length-2]/2),i=s,a="",l="b, r, c";for(let u=2;u<r.length-1;u++)i*=r[r.length-u-1],a=`
      int b${u} = index / ${i};
      index -= b${u} * ${i};
    `+a,l=`b${u}, `+l;return`
    ivec${r.length} getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${o[0]}, ${o[1]}));
      int index = resTexRC.x * ${o[1]} + resTexRC.y;

      ${a}

      int b = index / ${s};
      index -= b * ${s};

      int r = 2 * (index / ${n});
      int c = imod(index, ${n}) * 2;

      return ivec${r.length}(${l});
    }
  `}function N6(r,t,e){if(e)return`
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      ${Jl(["r","c","d","d2"],r)}
      return ivec4(r, c, d, d2);
    }
  `;let o=fn(["r","c","d","d2"],r);return`
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;
      ${o}
      return ivec4(r, c, d, d2);
    }
  `}function v6(r,t){let e=fn(["r","c","d","d2","d3"],r);return`
    ivec5 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},
                             ${t[1]}));

      int index = resTexRC.x * ${t[1]} + resTexRC.y;

      ${e}

      ivec5 outShape = ivec5(r, c, d, d2, d3);
      return outShape;
    }
  `}function T6(r,t){let e=fn(["r","c","d","d2","d3","d4"],r);return`
    ivec6 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;

      ${e}

      ivec6 result = ivec6(r, c, d, d2, d3, d4);
      return result;
    }
  `}function I6(r,t,e){let o=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(y.arraysEqual(r,t))return e?`
      ivec2 getOutputCoords() {
        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));
      }
    `:`
      ivec2 getOutputCoords() {
        return 2 * ivec2(resultUV.yx * vec2(${o[0]}, ${o[1]}));
      }
    `;let n=Math.ceil(r[1]/2);return e?`
    ivec2 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));

      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;
      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec2(r, c);
    }
  `:`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${o[0]}, ${o[1]}));

      int index = resTexRC.x * ${o[1]} + resTexRC.y;
      int r = 2 * (index / ${n});
      int c = imod(index, ${n}) * 2;

      return ivec2(r, c);
    }
  `}function k6(r,t,e){return y.arraysEqual(r,t)?e?`
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));
      }
    `:`
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));
      }
    `:r[1]===1?e?`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(index, 0);
      }
    `:`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${t[0]}, ${t[1]}));
        int index = resTexRC.x * ${t[1]} + resTexRC.y;
        return ivec2(index, 0);
      }
    `:r[0]===1?e?`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(0, index);
      }
    `:`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${t[0]}, ${t[1]}));
        int index = resTexRC.x * ${t[1]} + resTexRC.y;
        return ivec2(0, index);
      }
    `:e?`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      int r = index / outShape[1];
      int c = index - r * outShape[1];
      return ivec2(r, c);
    }
  `:`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;
      int r = index / ${r[1]};
      int c = index - r * ${r[1]};
      return ivec2(r, c);
    }
  `}function Ql(r){return`offset${r}`}function E6(r){let t=r.name,e="get"+t.charAt(0).toUpperCase()+t.slice(1),o=we();return`
    vec4 ${e}() {
      return ${o.texture2D}(${t}, halfCR);
    }
  `}function $6(r,t){let e=r.name,o="get"+e.charAt(0).toUpperCase()+e.slice(1);if(r.shapeInfo.isUniform)return`float ${o}() {return ${e};}`;let[n,s]=r.shapeInfo.texShape;if(n===1&&s===1)return`
      float ${o}() {
        return sampleTexture(${e}, halfCR);
      }
    `;let i=Ql(e);if(t)return`
    float ${o}() {
      vec2 uv = uvFromFlat(${e}TexShape[0], ${e}TexShape[1], ${i});
      return sampleTexture(${e}, uv);
    }
  `;let[a,l]=r.shapeInfo.texShape;return`
    float ${o}() {
      vec2 uv = uvFromFlat(${a}, ${l}, ${i});
      return sampleTexture(${e}, uv);
    }
  `}function A6(r,t){let e=r.name,o="get"+e.charAt(0).toUpperCase()+e.slice(1),n=r.shapeInfo.texShape,s=we();if(t)return`
    vec4 ${o}(int index) {
      ivec2 packedTexShape = ivec2(ceil(float(${e}TexShape[0]) / 2.0), ceil(float(${e}TexShape[1]) / 2.0));
      vec2 uv = packedUVfrom1D(
        packedTexShape[0], packedTexShape[1], index);
      return ${s.texture2D}(${e}, uv);
    }
  `;let i=[Math.ceil(n[0]/2),Math.ceil(n[1]/2)];return`
    vec4 ${o}(int index) {
      vec2 uv = packedUVfrom1D(
        ${i[0]}, ${i[1]}, index);
      return ${s.texture2D}(${e}, uv);
    }
  `}function D6(r,t){let e=r.name,o="get"+e.charAt(0).toUpperCase()+e.slice(1);if(r.shapeInfo.isUniform)return`
      float ${o}(int index) {
        ${Hp(r)}
      }
    `;let n=r.shapeInfo.texShape,s=n[0],i=n[1];if(i===1&&s===1)return`
      float ${o}(int index) {
        return sampleTexture(${e}, halfCR);
      }
    `;let a=Ql(e);return i===1?t?`
      float ${o}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${a}) + 0.5) / float(${e}TexShape[0]));
        return sampleTexture(${e}, uv);
      }
    `:`
      float ${o}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${a}) + 0.5) / ${s}.0);
        return sampleTexture(${e}, uv);
      }
    `:s===1?t?`
      float ${o}(int index) {
        vec2 uv = vec2((float(index + ${a}) + 0.5) / float(${e}TexShape[1]), 0.5);
        return sampleTexture(${e}, uv);
      }
    `:`
      float ${o}(int index) {
        vec2 uv = vec2((float(index + ${a}) + 0.5) / ${i}.0, 0.5);
        return sampleTexture(${e}, uv);
      }
    `:t?`
    float ${o}(int index) {
      vec2 uv = uvFromFlat(${e}TexShape[0], ${e}TexShape[1], index + ${a});
      return sampleTexture(${e}, uv);
    }
  `:`
    float ${o}(int index) {
      vec2 uv = uvFromFlat(${s}, ${i}, index + ${a});
      return sampleTexture(${e}, uv);
    }
  `}function R6(r,t){let e=r.shapeInfo.logicalShape,o=r.name,n="get"+o.charAt(0).toUpperCase()+o.slice(1),s=r.shapeInfo.texShape,i=s[0],a=s[1],l=we();if(s!=null&&y.arraysEqual(e,s))return t?`
      vec4 ${n}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}TexShape[1], ${o}TexShape[0]);

        return ${l.texture2D}(${o}, uv);
      }
    `:`
      vec4 ${n}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${a}.0, ${i}.0);

        return ${l.texture2D}(${o}, uv);
      }
    `;if(t)return`
    vec4 ${n}(int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${o}TexShape[0]) / 2.0), ceil(float(${o}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${o}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);
      return ${l.texture2D}(${o}, uv);
    }
  `;let u=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)],c=Math.ceil(e[1]/2);return`
    vec4 ${n}(int row, int col) {
      vec2 uv = packedUVfrom2D(${c}, ${u[0]}, ${u[1]}, row, col);
      return ${l.texture2D}(${o}, uv);
    }
  `}function F6(r,t){let e=r.shapeInfo.logicalShape,o=r.name,n="get"+o.charAt(0).toUpperCase()+o.slice(1),s=r.shapeInfo.texShape;if(s!=null&&y.arraysEqual(e,s)){if(t)return`
      float ${n}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    `;let m=s[0],f=s[1];return`
    float ${n}(int row, int col) {
      vec2 uv = (vec2(col, row) + halfCR) / vec2(${f}.0, ${m}.0);
      return sampleTexture(${o}, uv);
    }
  `}let{newShape:i,keptDims:a}=y.squeezeShape(e),l=i;if(l.length<e.length){let m=Kp(r,l),f=["row","col"];return`
      ${Up(m,t)}
      float ${n}(int row, int col) {
        return ${n}(${qp(f,a)});
      }
    `}if(r.shapeInfo.isUniform)return`
      float ${n}(int row, int col) {
        int index = round(dot(vec2(row, col), vec2(${e[1]}, 1)));
        ${Hp(r)}
      }
    `;let u=s[0],c=s[1],p=Ql(o);return c===1?t?`
      float ${n}(int row, int col) {
        float index = dot(vec3(row, col, ${p}), vec3(${o}Shape[1], 1, 1));
        vec2 uv = vec2(0.5, (index + 0.5) / float(${o}TexShape[0]));
        return sampleTexture(${o}, uv);
      }
    `:`
    float ${n}(int row, int col) {
      float index = dot(vec3(row, col, ${p}), vec3(${e[1]}, 1, 1));
      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);
      return sampleTexture(${o}, uv);
    }
  `:u===1?t?`
      float ${n}(int row, int col) {
        float index = dot(vec3(row, col, ${p}), vec3(${o}Shape[1], 1, 1));
        vec2 uv = vec2((index + 0.5) / float(${o}TexShape[1]), 0.5);
        return sampleTexture(${o}, uv);
      }
    `:`
    float ${n}(int row, int col) {
      float index = dot(vec3(row, col, ${p}), vec3(${e[1]}, 1, 1));
      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);
      return sampleTexture(${o}, uv);
    }
  `:t?`
      float ${n}(int row, int col) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${o}Shape[1] + col + ${p};
        vec2 uv = uvFromFlat(${o}TexShape[0], ${o}TexShape[1], index);
        return sampleTexture(${o}, uv);
      }
    `:`
  float ${n}(int row, int col) {
    // Explicitly use integer operations as dot() only works on floats.
    int index = row * ${e[1]} + col + ${p};
    vec2 uv = uvFromFlat(${u}, ${c}, index);
    return sampleTexture(${o}, uv);
  }
`}function _6(r,t){let e=r.shapeInfo.logicalShape,o=r.name,n="get"+o.charAt(0).toUpperCase()+o.slice(1),s=r.shapeInfo.texShape,i=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];if(e[0]===1){let m=e.slice(1),f=[1,2],h=Kp(r,m),g=["b","row","col"];return`
        ${QD(h,t)}
        vec4 ${n}(int b, int row, int col) {
          return ${n}(${qp(g,f)});
        }
      `}let a=we();if(t)return`
    vec4 ${n}(int b, int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${o}TexShape[0]) / 2.0), ceil(float(${o}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${o}Shape[2]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${o}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom3D(
        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);
      return ${a.texture2D}(${o}, uv);
    }
  `;let l=i[0],u=i[1],c=Math.ceil(e[2]/2),p=c*Math.ceil(e[1]/2);return`
    vec4 ${n}(int b, int row, int col) {
      vec2 uv = packedUVfrom3D(
        ${l}, ${u}, ${p}, ${c}, b, row, col);
      return ${a.texture2D}(${o}, uv);
    }
  `}function O6(r,t){let e=r.shapeInfo.logicalShape,o=r.name,n="get"+o.charAt(0).toUpperCase()+o.slice(1),s=e[1]*e[2],i=e[2],{newShape:a,keptDims:l}=y.squeezeShape(e),u=a;if(u.length<e.length){let g=Kp(r,u),d=["row","col","depth"];return`
        ${Up(g,t)}
        float ${n}(int row, int col, int depth) {
          return ${n}(${qp(d,l)});
        }
      `}if(r.shapeInfo.isUniform)return`
      float ${n}(int row, int col, int depth) {
        int index = round(dot(vec3(row, col, depth),
                          vec3(${s}, ${i}, 1)));
        ${Hp(r)}
      }
    `;let c=r.shapeInfo.texShape,p=c[0],m=c[1],f=r.shapeInfo.flatOffset;if(m===s&&f==null)return t?`
      float ${n}(int row, int col, int depth) {
        int stride1 = ${o}Shape[2];
        float texR = float(row);
        float texC = dot(vec2(col, depth), vec2(stride1, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    `:`
        float ${n}(int row, int col, int depth) {
          float texR = float(row);
          float texC = dot(vec2(col, depth), vec2(${i}, 1));
          vec2 uv = (vec2(texC, texR) + halfCR) /
                     vec2(${m}.0, ${p}.0);
          return sampleTexture(${o}, uv);
        }
      `;if(m===i&&f==null)return t?`
      float ${n}(int row, int col, int depth) {
        float texR = dot(vec2(row, col), vec2(${o}Shape[1], 1));
        float texC = float(depth);
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    `:`
    float ${n}(int row, int col, int depth) {
      float texR = dot(vec2(row, col), vec2(${e[1]}, 1));
      float texC = float(depth);
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${m}.0, ${p}.0);
      return sampleTexture(${o}, uv);
    }
  `;let h=Ql(o);return t?`
    float ${n}(int row, int col, int depth) {
      // Explicitly use integer operations as dot() only works on floats.
      int stride0 = ${o}Shape[1] * ${o}Shape[2];
      int stride1 = ${o}Shape[2];
      int index = row * stride0 + col * stride1 + depth + ${h};
      vec2 uv = uvFromFlat(${o}TexShape[0], ${o}TexShape[1], index);
      return sampleTexture(${o}, uv);
    }
    `:`
      float ${n}(int row, int col, int depth) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${s} + col * ${i} + depth + ${h};
        vec2 uv = uvFromFlat(${p}, ${m}, index);
        return sampleTexture(${o}, uv);
      }
  `}function L6(r,t){let e=r.name,o="get"+e.charAt(0).toUpperCase()+e.slice(1),n=we();if(t)return`
    vec4 ${o}(int b2, int b, int row, int col) {
      int valuesPerRow = int(ceil(float(${e}Shape[3]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${e}Shape[2]) / 2.0));
      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);
      texelsInBatch *= ${e}Shape[1];
      index = b2 * texelsInBatch + index;
      ivec2 packedTexShape = ivec2(ceil(float(${e}TexShape[0]) / 2.0), ceil(float(${e}TexShape[1]) / 2.0));
      int texR = index / packedTexShape[1];
      int texC = index - texR * packedTexShape[1];
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${n.texture2D}(${e}, uv);
    }
  `;let s=r.shapeInfo.logicalShape,i=s.length,a=r.shapeInfo.texShape,l=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],u=l[0],c=l[1],p=Math.ceil(s[i-1]/2),m=p*Math.ceil(s[i-2]/2),f="int b, int row, int col",h=`b * ${m} + (row / 2) * ${p} + (col / 2)`;for(let g=2;g<i-1;g++)f=`int b${g}, `+f,m*=s[i-g-1],h=`b${g} * ${m} + `+h;return`
    vec4 ${o}(${f}) {
      int index = ${h};
      int texR = index / ${c};
      int texC = index - texR * ${c};
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${u});
      return ${n.texture2D}(${e}, uv);
    }
  `}function P6(r,t){let e=r.shapeInfo.logicalShape,o=r.name,n="get"+o.charAt(0).toUpperCase()+o.slice(1),s=e[3],i=e[2]*s,a=e[1]*i,{newShape:l,keptDims:u}=y.squeezeShape(e);if(l.length<e.length){let b=Kp(r,l),S=["row","col","depth","depth2"];return`
      ${Up(b,t)}
      float ${n}(int row, int col, int depth, int depth2) {
        return ${n}(${qp(S,u)});
      }
    `}if(r.shapeInfo.isUniform)return`
      float ${n}(int row, int col, int depth, int depth2) {
        int index = round(dot(vec4(row, col, depth, depth2),
                          vec4(${a}, ${i}, ${s}, 1)));
        ${Hp(r)}
      }
    `;let c=r.shapeInfo.flatOffset,p=r.shapeInfo.texShape,m=p[0],f=p[1],h=`int stride2 = ${o}Shape[3];`,g=`int stride1 = ${o}Shape[2] * stride2;`,d=`int stride0 = ${o}Shape[1] * stride1;`;if(f===a&&c==null)return t?`
      float ${n}(int row, int col, int depth, int depth2) {
        ${h}
        ${g}
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(stride1, stride2, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    `:`
      float ${n}(int row, int col, int depth, int depth2) {
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(${i}, ${s}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${f}.0, ${m}.0);
        return sampleTexture(${o}, uv);
      }
    `;if(f===s&&c==null)return t?`
      float ${n}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${o}Shape[1] * ${o}Shape[2], ${o}Shape[2], 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    `:`
      float ${n}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${e[1]*e[2]}, ${e[2]}, 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${f}.0, ${m}.0);
        return sampleTexture(${o}, uv);
      }
    `;let x=Ql(o);return t?`
    float ${n}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      ${h}
      ${g}
      ${d}
      int index = row * stride0 + col * stride1 +
          depth * stride2 + depth2;
      vec2 uv = uvFromFlat(${o}TexShape[0], ${o}TexShape[1], index + ${x});
      return sampleTexture(${o}, uv);
    }
  `:`
    float ${n}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${a} + col * ${i} +
          depth * ${s} + depth2;
      vec2 uv = uvFromFlat(${m}, ${f}, index + ${x});
      return sampleTexture(${o}, uv);
    }
  `}function z6(r){let t=r.shapeInfo.logicalShape,e=r.name,o="get"+e.charAt(0).toUpperCase()+e.slice(1),n=t[4],s=t[3]*n,i=t[2]*s,a=t[1]*i,{newShape:l,keptDims:u}=y.squeezeShape(t);if(l.length<t.length){let g=Kp(r,l),d=["row","col","depth","depth2","depth3"];return`
      ${Up(g)}
      float ${o}(int row, int col, int depth, int depth2, int depth3) {
        return ${o}(${qp(d,u)});
      }
    `}if(r.shapeInfo.isUniform)return`
      float ${o}(int row, int col, int depth, int depth2, int depth3) {
        float index = dot(
          vec4(row, col, depth, depth2),
          vec4(${a}, ${i}, ${s}, ${n})) +
          depth3;
        ${Hp(r)}
      }
    `;let c=r.shapeInfo.flatOffset,p=r.shapeInfo.texShape,m=p[0],f=p[1];if(f===a&&c==null)return`
      float ${o}(int row, int col, int depth, int depth2, int depth3) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
                         vec4(${i}, ${s}, ${n}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${f}.0, ${m}.0);
        return sampleTexture(${e}, uv);
      }
    `;if(f===n&&c==null)return`
      float ${o}(int row, int col, int depth, int depth2, int depth3) {
        float texR = dot(
          vec4(row, col, depth, depth2),
          vec4(${t[1]*t[2]*t[3]},
               ${t[2]*t[3]}, ${t[3]}, 1));
        int texC = depth3;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${f}.0, ${m}.0);
        return sampleTexture(${e}, uv);
      }
    `;let h=Ql(e);return`
    float ${o}(int row, int col, int depth, int depth2, int depth3) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${a} + col * ${i} + depth * ${s} +
          depth2 * ${n} + depth3 + ${h};
      vec2 uv = uvFromFlat(${m}, ${f}, index);
      return sampleTexture(${e}, uv);
    }
  `}function M6(r){let t=r.shapeInfo.logicalShape,e=r.name,o="get"+e.charAt(0).toUpperCase()+e.slice(1),{newShape:n,keptDims:s}=y.squeezeShape(t);if(n.length<t.length){let d=Kp(r,n),x=["row","col","depth","depth2","depth3","depth4"];return`
      ${Up(d)}
      float ${o}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        return ${o}(${qp(x,s)});
      }
    `}let i=t[5],a=t[4]*i,l=t[3]*a,u=t[2]*l,c=t[1]*u;if(r.shapeInfo.isUniform)return`
      float ${o}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
        int index = round(dot(
          vec4(row, col, depth, depth2),
          vec4(${c}, ${u}, ${l}, ${a})) +
          dot(
            vec2(depth3, depth4),
            vec2(${i}, 1)));
        ${Hp(r)}
      }
    `;let p=r.shapeInfo.flatOffset,m=r.shapeInfo.texShape,f=m[0],h=m[1];if(h===c&&p==null)return`
      float ${o}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
          vec4(${u}, ${l}, ${a}, ${i})) +
               float(depth4);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${h}.0, ${f}.0);
        return sampleTexture(${e}, uv);
      }
    `;if(h===i&&p==null)return`
      float ${o}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        float texR = dot(vec4(row, col, depth, depth2),
          vec4(${t[1]*t[2]*t[3]*t[4]},
               ${t[2]*t[3]*t[4]},
               ${t[3]*t[4]},
               ${t[4]})) + float(depth3);
        int texC = depth4;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${h}.0, ${f}.0);
        return sampleTexture(${e}, uv);
      }
    `;let g=Ql(e);return`
    float ${o}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${c} + col * ${u} + depth * ${l} +
          depth2 * ${a} + depth3 * ${i} + depth4 + ${g};
      vec2 uv = uvFromFlat(${f}, ${h}, index);
      return sampleTexture(${e}, uv);
    }
  `}function Hp(r){let t=r.name,e=y.sizeFromShape(r.shapeInfo.logicalShape);return e<2?`return ${t};`:`
    for (int i = 0; i < ${e}; i++) {
      if (i == index) {
        return ${t}[i];
      }
    }
  `}function B6(r,t){let e=r.name,o=e.charAt(0).toUpperCase()+e.slice(1),n="get"+o+"AtOutCoords",s=r.shapeInfo.logicalShape.length,i=t.logicalShape.length,a=ZD(r.shapeInfo.logicalShape,t.logicalShape),l=It(i),u=i-s,c,p=["x","y","z","w","u","v"];s===0?c="":i<2&&a.length>=1?c="coords = 0;":c=a.map(b=>`coords.${p[b+u]} = 0;`).join(`
`);let m="";i<2&&s>0?m="coords":m=r.shapeInfo.logicalShape.map((b,S)=>`coords.${p[S+u]}`).join(", ");let f="return outputValue;",g=y.sizeFromShape(r.shapeInfo.logicalShape)===1,x=y.sizeFromShape(t.logicalShape)===1;if(s===1&&!g&&!x)f=`
      return vec4(outputValue.xy, outputValue.xy);
    `;else if(g&&!x)i===1?f=`
        return vec4(outputValue.x, outputValue.x, 0., 0.);
      `:f=`
        return vec4(outputValue.x);
      `;else if(a.length){let b=s-2,S=s-1;a.indexOf(b)>-1&&a.indexOf(S)>-1?f="return vec4(outputValue.x);":a.indexOf(b)>-1?f="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":a.indexOf(S)>-1&&(f="return vec4(outputValue.xx, outputValue.zz);")}return`
    vec4 ${n}() {
      ${l} coords = getOutputCoords();
      ${c}
      vec4 outputValue = get${o}(${m});
      ${f}
    }
  `}function V6(r,t){let e=r.name,o=e.charAt(0).toUpperCase()+e.slice(1),n="get"+o+"AtOutCoords",s=t.texShape,i=r.shapeInfo.texShape,a=r.shapeInfo.logicalShape.length,l=t.logicalShape.length;if(!r.shapeInfo.isUniform&&a===l&&r.shapeInfo.flatOffset==null&&y.arraysEqual(i,s))return`
      float ${n}() {
        return sampleTexture(${e}, resultUV);
      }
    `;let u=It(l),c=ZD(r.shapeInfo.logicalShape,t.logicalShape),p=l-a,m,f=["x","y","z","w","u","v"];a===0?m="":l<2&&c.length>=1?m="coords = 0;":m=c.map(g=>`coords.${f[g+p]} = 0;`).join(`
`);let h="";return l<2&&a>0?h="coords":h=r.shapeInfo.logicalShape.map((g,d)=>`coords.${f[d+p]}`).join(", "),`
    float ${n}() {
      ${u} coords = getOutputCoords();
      ${m}
      return get${o}(${h});
    }
  `}function It(r){if(r<=1)return"int";if(r===2)return"ivec2";if(r===3)return"ivec3";if(r===4)return"ivec4";if(r===5)return"ivec5";if(r===6)return"ivec6";throw Error(`GPU for rank ${r} is not yet supported`)}function Cy(r,t,e){let{newShape:o,keptDims:n}=y.squeezeShape(t),s=t.length,i=r&&s===3&&t[0]===1,a=i?t.slice(1):o,l=!r&&s>1&&!y.arraysEqual(t,e)&&o.length<s||i;return{useSqueezeShape:l,uniformShape:l?a:t,keptDims:n}}function Kp(r,t){let e=JSON.parse(JSON.stringify(r));return e.shapeInfo.logicalShape=t,e}function qp(r,t){return t.map(e=>r[e]).join(", ")}function rR(r,t,e,o){let n=e.map((c,p)=>{let m={logicalShape:c.shape,texShape:c.isUniform?null:c.texData.texShape,isUniform:c.isUniform,isPacked:c.isUniform?!1:c.texData.isPacked,flatOffset:null};return c.texData!=null&&c.texData.slice!=null&&c.texData.slice.flatOffset>0&&(m.flatOffset=c.texData.slice.flatOffset),{name:t.variableNames[p],shapeInfo:m}}),s=n.map(c=>c.shapeInfo),i={logicalShape:o.shape,texShape:o.texData.texShape,isUniform:!1,isPacked:o.texData.isPacked,flatOffset:null},a=JD(n,i,t),l=RD(r.gl,a),u=r.createProgram(l);return z().get("ENGINE_COMPILE_ONLY")?{program:t,fragmentShader:l,source:a,webGLProgram:u,inShapeInfos:s,outShapeInfo:i,variablesLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:(r.buildVao(u),Object.assign({program:t,fragmentShader:l,source:a,webGLProgram:u,inShapeInfos:s,outShapeInfo:i},$S(r,t,u)))}function $S(r,t,e){let o=[],n=[],s,i,a,l=null,u=null;u=r.getUniformLocation(e,"NAN",!1),z().getNumber("WEBGL_VERSION")===1&&(l=r.getUniformLocation(e,"INFINITY",!1));let c=!1;for(let p of t.variableNames){let m={name:p,uniform:r.getUniformLocation(e,p,c),offset:r.getUniformLocation(e,`offset${p}`,c)};t.enableShapeUniforms&&(m.shape=r.getUniformLocation(e,`${p}Shape`,c),m.texShape=r.getUniformLocation(e,`${p}TexShape`,c)),o.push(m)}if(t.enableShapeUniforms&&(s=r.getUniformLocation(e,"outShape",c),a=r.getUniformLocation(e,"outShapeStrides",c),i=r.getUniformLocation(e,"outTexShape",c)),t.customUniforms)for(let p of t.customUniforms)n.push(r.getUniformLocation(e,p.name,c));return{variablesLocations:o,customUniformLocations:n,infLoc:l,nanLoc:u,outShapeLocation:s,outShapeStridesLocation:a,outTexShapeLocation:i}}function eR(r,t){if(r.length!==t.length)throw Error(`Binary was compiled with ${r.length} inputs, but was executed with ${t.length} inputs`);r.forEach((e,o)=>{let n=e.logicalShape,s=t[o],i=s.shape;if(!y.arraysEqual(n,i))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${n} and ${i} must match`);if(e.isUniform&&s.isUniform)return;let a=e.texShape,l=s.isUniform?null:s.texData.texShape;if(!y.arraysEqual(a,l))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${a} and ${l} must match`)})}function oR(r,t,e,o,n){t.program.enableShapeUniforms||(eR(t.inShapeInfos,e),eR([t.outShapeInfo],[o]));let s=o.texData.texture,i=o.texData.texShape;o.texData.isPacked?r.setOutputPackedMatrixTexture(s.texture,i[0],i[1]):r.setOutputMatrixTexture(s.texture,i[0],i[1]),r.setProgram(t.webGLProgram),r.bindVertexArray(t.webGLProgram.vao),z().getNumber("WEBGL_VERSION")===1&&t.infLoc!==null&&r.gl.uniform1f(t.infLoc,1/0),t.nanLoc!==null&&r.gl.uniform1f(t.nanLoc,NaN);for(let l=0;l<e.length;++l){let u=e[l],{uniform:c,offset:p,shape:m,texShape:f}=t.variablesLocations[l];if(m){let{uniformShape:h}=Cy(t.program.packedInputs,u.shape,u.texData.texShape);switch(h.length){case 1:r.gl.uniform1iv(m,new Int32Array(h));break;case 2:r.gl.uniform2iv(m,new Int32Array(h));break;case 3:r.gl.uniform3iv(m,new Int32Array(h));break;case 4:r.gl.uniform4iv(m,new Int32Array(h));break;default:break}}if(f&&r.gl.uniform2i(f,u.texData.texShape[0],u.texData.texShape[1]),c!=null){if(u.isUniform){if(y.sizeFromShape(u.shape)<2)r.gl.uniform1f(c,u.uniformValues[0]);else{let h=u.uniformValues;h instanceof Float32Array||(h=new Float32Array(h)),r.gl.uniform1fv(c,h)}continue}u.texData.slice!=null&&p!=null&&r.gl.uniform1i(p,u.texData.slice.flatOffset),r.setInputMatrixTexture(u.texData.texture.texture,c,l)}}let a=t.outShapeLocation;if(a)switch(o.shape.length){case 1:r.gl.uniform1iv(a,new Int32Array(o.shape));break;case 2:r.gl.uniform2iv(a,new Int32Array(o.shape));break;case 3:r.gl.uniform3iv(a,new Int32Array(o.shape));break;case 4:r.gl.uniform4iv(a,new Int32Array(o.shape));break;default:break}if(t.outShapeStridesLocation){let l=y.computeStrides(o.shape);switch(o.shape.length){case 2:r.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(l));break;case 3:r.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(l));break;case 4:r.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(l));break;default:break}}if(t.outTexShapeLocation&&r.gl.uniform2i(t.outTexShapeLocation,o.texData.texShape[0],o.texData.texShape[1]),t.program.customUniforms&&n)for(let l=0;l<t.program.customUniforms.length;++l){let u=t.program.customUniforms[l],c=t.customUniformLocations[l],p=n[l];if(u.type==="float")r.gl.uniform1fv(c,p);else if(u.type==="vec2")r.gl.uniform2fv(c,p);else if(u.type==="vec3")r.gl.uniform3fv(c,p);else if(u.type==="vec4")r.gl.uniform4fv(c,p);else if(u.type==="int")r.gl.uniform1iv(c,p);else if(u.type==="ivec2")r.gl.uniform2iv(c,p);else if(u.type==="ivec3")r.gl.uniform3iv(c,p);else if(u.type==="ivec4")r.gl.uniform4iv(c,p);else throw Error(`uniform type ${u.type} is not supported yet.`)}r.executeProgram()}function nR(r,t,e){let o="";t.concat(e).forEach(i=>{let a=i.texData!=null&&i.texData.slice!=null&&i.texData.slice.flatOffset>0;if(r.enableShapeUniforms&&!i.isUniform){let l=i.texData.texShape,{useSqueezeShape:u,uniformShape:c,keptDims:p}=Cy(r.packedInputs,i.shape,l),m="",f="",h="";if(c.length===1&&r.packedInputs){let T=[Math.ceil(l[0]/2),Math.ceil(l[1]/2)];m=`${T[0]>1}_${T[1]>1}`}else if(c.length===2&&!r.packedInputs)f=`${c[0]>1}_${c[1]>1}`;else if(c.length>2&&!r.packedInputs){let T=y.computeStrides(c);h=`${T[0]===l[1]}_${T[T.length-1]===l[1]}`}let g=i.shape.length,d=c.length===2&&y.arraysEqual(i.shape,l),x=y.sizeFromShape(i.shape)===1,b=I.getBroadcastDims(i.shape,e.shape),S=!r.packedInputs&&g===e.shape.length&&y.arraysEqual(l,e.texData.texShape),w=r.packedInputs||c.length>2?"":`${l[0]>1}_${l[1]>1}`;o+=`${g}_${S}_${u?p:""}_${c.length}_${x}_${b}_${d}_${m}_${f}_${h}_${w}_${a}`}else{let l=i.isUniform?"uniform":i.texData.texShape;o+=`${i.shape}_${l}_${a}`}});let n=r.userCode,s=r.constructor.name;return s+="_"+o+"_"+n+`${z().getNumber("WEBGL_VERSION")}`,s}function Kt(r){return z().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&r<=4}var Sy=class{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=Ba.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];let e=we();this.outputShape=t,this.enableShapeUniforms=Kt(this.outputShape.length),this.userCode=`
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms?Jl(["r","c","d"],t):fn(["r","c","d"],t)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getA(rc.x, rc.y, rc.z);
        }

        ${e.output} = result;
      }
    `}};var Ny=class{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=Ba.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];let e=we();this.outputShape=t,this.enableShapeUniforms=Kt(this.outputShape.length),this.userCode=`
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms?Jl(["r","c","d"],t):fn(["r","c","d"],t)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));
        }

        ${e.output} = result;
      }
    `}};var vy=class{constructor(t){this.variableNames=["A"],this.outTexUsage=br.DOWNLOAD;let e=we();this.outputShape=t,this.userCode=`
      ${wy}

      void main() {
        float x = getAAtOutCoords();
        ${e.output} = encode_float(x);
      }
    `}};var Ty=class{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=br.DOWNLOAD;let e=we();this.outputShape=t,this.userCode=`
      ${wy}

      void main() {
        ivec3 coords = getOutputCoords();
        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));
        ${e.output} = encode_float(x);
      }
    `}};var U6={R:0,G:1,B:2,A:3},kh=class{constructor(t,e=!1,o="RGBA"){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];let n=we();this.outputShape=t,this.enableShapeUniforms=Kt(this.outputShape.length);let s="result";e&&(s="floor(result * 255. + 0.5)");let i="";for(let a=0;a<o.length;a++){let l=o[a];i+=`
          if(offset == ${a}) {
            result = values[${U6[l]}];
          }`}this.userCode=`
      ${this.enableShapeUniforms?Gp():Vp(t)}

      void main() {
        ivec3 coords = getOutputCoords();
        int flatIndex = getFlatIndex(coords);
        float result = 0.;
        int offset = imod(flatIndex, ${o.length});

        flatIndex = idiv(flatIndex, ${o.length}, 1.);

        int r = flatIndex / texShape[1];
        if (r < texShape[0]) {
          int c = imod(flatIndex, texShape[1]);
          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
          vec4 values = ${n.texture2D}(A, uv);
          ${i}
        }
        ${n.output} = vec4(${s}, 0., 0., 0.);
      }
    `}};var Iy=class{constructor(t,e=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];let o=we();this.outputShape=t,this.enableShapeUniforms=Kt(this.outputShape.length);let n="",s="result";e&&(s="floor(result * 255. + 0.5)");for(let i=0;i<=1;i++)for(let a=0;a<=1;a++){let l=i*2+a;n+=`
          localCoords = coords;
          if(localCoords[2] + ${a} < ${this.enableShapeUniforms?"outShape[2]":`${t[2]}`}) {
          localCoords[2] += ${a};
          if (localCoords[1] + ${i} < ${this.enableShapeUniforms?"outShape[1]":`${t[1]}`}) {
            localCoords[1] += ${i};

            flatIndex = getFlatIndex(localCoords);
            offset = imod(flatIndex, 4);

            flatIndex = idiv(flatIndex, 4, 1.);

            int r = flatIndex / texShape[1];
            int c = imod(flatIndex, texShape[1]);
            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
            values = ${o.texture2D}(A, uv);

            if (offset == 0) {
              result[${l}] = values[0];
            } else if (offset == 1) {
              result[${l}] = values[1];
            } else if (offset == 2) {
              result[${l}] = values[2];
            } else {
              result[${l}] = values[3];
            }
          }
        }
        `}this.userCode=`
        ${this.enableShapeUniforms?Gp():Vp(t)}

        void main() {
          ivec3 coords = getOutputCoords();

          vec4 result = vec4(0.);
          int flatIndex, r, c, offset;
          ivec3 localCoords;
          vec2 uv;
          vec4 values;

          ${n}

          ${o.output} = ${s};
        }
    `}};function sR(r){let t=we(),e=`${t.version}
    precision highp float;
    ${t.attribute} vec3 clipSpacePos;
    ${t.attribute} vec2 uv;
    ${t.varyingVs} vec2 resultUV;

    void main() {
      gl_Position = vec4(clipSpacePos, 1);
      resultUV = uv;
    }`;return DD(r,e)}function iR(r){let t=new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]);return OD(r,t)}function aR(r){let t=new Uint16Array([0,1,2,2,1,3]);return LD(r,t)}function Eh(r,t,e,o,n,s){zD(t,e);let i=PD(r),a=r.TEXTURE_2D;return pt(r,()=>r.bindTexture(a,i)),pt(r,()=>r.texParameteri(a,r.TEXTURE_WRAP_S,r.CLAMP_TO_EDGE)),pt(r,()=>r.texParameteri(a,r.TEXTURE_WRAP_T,r.CLAMP_TO_EDGE)),pt(r,()=>r.texParameteri(a,r.TEXTURE_MIN_FILTER,r.NEAREST)),pt(r,()=>r.texParameteri(a,r.TEXTURE_MAG_FILTER,r.NEAREST)),z().getNumber("WEBGL_VERSION")===1?pt(r,()=>r.texImage2D(a,0,o,t,e,0,n,s,null)):pt(r,()=>r.texStorage2D(a,1,o,t,e)),pt(r,()=>r.bindTexture(r.TEXTURE_2D,null)),{texture:i,texShape:[e,t]}}function AS(r){return r.internalFormatFloat}function lR(r,t,e,o){let[n,s]=Yl(t,e);return Eh(r,n,s,AS(o),o.textureFormatFloat,r.FLOAT)}function DS(r){return r.internalFormatHalfFloat}function uR(r,t,e,o){let[n,s]=Yl(t,e);return Eh(r,n,s,DS(o),o.textureFormatFloat,o.textureTypeHalfFloat)}function RS(r){return r.downloadTextureFormat}function cR(r,t,e,o){let[n,s]=Yl(t,e);return Eh(r,n,s,RS(o),r.RGBA,r.UNSIGNED_BYTE)}function FS(r){return r.internalFormatPackedFloat}function pR(r,t,e,o){let[n,s]=Gn(t,e);return Eh(r,n,s,FS(o),r.RGBA,r.FLOAT)}function _S(r){return r.internalFormatPackedHalfFloat}function mR(r,t,e,o){let[n,s]=Gn(t,e);return Eh(r,n,s,_S(o),r.RGBA,o.textureTypeHalfFloat)}function fR(r,t,e){return pt(r,()=>r.bindBuffer(r.ARRAY_BUFFER,e)),IS(r,t,"clipSpacePos",e,3,20,0)&&IS(r,t,"uv",e,2,20,12)}function hR(r,t,e,o,n,s){pt(r,()=>r.bindTexture(r.TEXTURE_2D,t));let i,a,l;n instanceof Uint8Array?(i=new Uint8Array(e*o*4),a=r.UNSIGNED_BYTE,l=r.RGBA):(i=new Float32Array(e*o*4),a=r.FLOAT,l=s.internalFormatPackedFloat),i.set(n),z().getNumber("WEBGL_VERSION")===2?pt(r,()=>r.texSubImage2D(r.TEXTURE_2D,0,0,0,e,o,r.RGBA,a,i)):pt(r,()=>r.texImage2D(r.TEXTURE_2D,0,l,e,o,0,r.RGBA,a,i)),pt(r,()=>r.bindTexture(r.TEXTURE_2D,null))}function dR(r,t,e){pt(r,()=>r.bindTexture(r.TEXTURE_2D,t)),e.data instanceof Uint8Array?z().getNumber("WEBGL_VERSION")===2?pt(r,()=>r.texSubImage2D(r.TEXTURE_2D,0,0,0,e.width,e.height,r.RGBA,r.UNSIGNED_BYTE,e.data)):pt(r,()=>r.texImage2D(r.TEXTURE_2D,0,r.RGBA,e.width,e.height,0,r.RGBA,r.UNSIGNED_BYTE,e.data)):z().getNumber("WEBGL_VERSION")===2?pt(r,()=>r.texSubImage2D(r.TEXTURE_2D,0,0,0,r.RGBA,r.UNSIGNED_BYTE,e)):pt(r,()=>r.texImage2D(r.TEXTURE_2D,0,r.RGBA,r.RGBA,r.UNSIGNED_BYTE,e)),pt(r,()=>r.bindTexture(r.TEXTURE_2D,null))}function gR(r,t,e,o){let n=r.createBuffer();pt(r,()=>r.bindBuffer(r.PIXEL_PACK_BUFFER,n));let a=4*4*t*e;return pt(r,()=>r.bufferData(r.PIXEL_PACK_BUFFER,a,r.STREAM_READ)),pt(r,()=>r.readPixels(0,0,e,t,r.RGBA,r.FLOAT,0)),pt(r,()=>r.bindBuffer(r.PIXEL_PACK_BUFFER,null)),n}function xR(r,t,e){let o=r,n=new Float32Array(e);return o.bindBuffer(o.PIXEL_PACK_BUFFER,t),o.getBufferSubData(o.PIXEL_PACK_BUFFER,0,n),o.bindBuffer(o.PIXEL_PACK_BUFFER,null),n}function yR(r,t,e,o){let[n,s]=Yl(t,e),i=4,a=new Uint8Array(ED(t*e,i));return pt(r,()=>r.readPixels(0,0,n,s,o.downloadTextureFormat,r.UNSIGNED_BYTE,a)),new Float32Array(a.buffer)}function bR(r,t,e,o,n,s,i,a){let l=r,u=new Float32Array($D(s,i));return l.bindBuffer(l.PIXEL_PACK_BUFFER,t),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}function wR(r,t,e){let o=new Float32Array(t*e*4);return pt(r,()=>r.readPixels(0,0,e,t,r.RGBA,r.FLOAT,o)),o}var jp=class{constructor(t){this.outputTexture=null,this.program=null,this.disposed=!1,this.itemsToPoll=[];let e=z().getNumber("WEBGL_VERSION");if(t!=null?(this.gl=t,kD(e,t)):this.gl=po(e),t=this.gl,z().getNumber("WEBGL_VERSION")===2){let s=t;this.createVertexArray=()=>pt(s,()=>s.createVertexArray()),this.bindVertexArray=i=>pt(s,()=>s.bindVertexArray(i)),this.deleteVertexArray=i=>pt(s,()=>s.deleteVertexArray(i)),this.getVertexArray=()=>pt(s,()=>s.getParameter(s.VERTEX_ARRAY_BINDING))}else if(t!=null){let s=t.getExtension("OES_vertex_array_object");if(s==null)throw new Error("All WebGL1 implementations are expected to offer OES_vertex_array_object.");this.createVertexArray=()=>pt(t,()=>s.createVertexArrayOES()),this.bindVertexArray=i=>pt(t,()=>s.bindVertexArrayOES(i)),this.deleteVertexArray=i=>pt(t,()=>s.deleteVertexArrayOES(i)),this.getVertexArray=()=>pt(t,()=>t.getParameter(s.VERTEX_ARRAY_BINDING_OES))}let o="WEBGL_color_buffer_float",n="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),z().getNumber("WEBGL_VERSION")===1){let s="OES_texture_float",i="OES_texture_half_float";if(this.textureFloatExtension=vh(this.gl,s),vo(this.gl,i))this.textureHalfFloatExtension=vh(this.gl,i);else if(z().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(o),vo(this.gl,n))this.colorBufferHalfFloatExtension=vh(this.gl,n);else if(z().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(o="EXT_color_buffer_float",vo(this.gl,o))this.colorBufferFloatExtension=this.gl.getExtension(o);else if(vo(this.gl,n))this.colorBufferHalfFloatExtension=this.gl.getExtension(n);else throw new Error("GL context does not support color renderable floats");this.vertexBuffer=iR(this.gl),this.indexBuffer=aR(this.gl),this.framebuffer=MD(this.gl),this.textureConfig=Nh(this.gl,this.textureHalfFloatExtension)}get debug(){return z().getBool("DEBUG")}dispose(){if(this.disposed)return;this.program!=null&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),this.outputTexture!=null&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");let t=this.gl;pt(t,()=>t.finish()),pt(t,()=>t.bindFramebuffer(t.FRAMEBUFFER,null)),pt(t,()=>t.deleteFramebuffer(this.framebuffer)),pt(t,()=>t.bindBuffer(t.ARRAY_BUFFER,null)),pt(t,()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null)),pt(t,()=>t.deleteBuffer(this.indexBuffer)),this.disposed=!0}createFloat32MatrixTexture(t,e){return this.throwIfDisposed(),lR(this.gl,t,e,this.textureConfig)}createFloat16MatrixTexture(t,e){return this.throwIfDisposed(),uR(this.gl,t,e,this.textureConfig)}createUnsignedBytesMatrixTexture(t,e){return this.throwIfDisposed(),cR(this.gl,t,e,this.textureConfig)}uploadPixelDataToTexture(t,e){this.throwIfDisposed(),dR(this.gl,t,e)}uploadDenseMatrixToTexture(t,e,o,n){this.throwIfDisposed(),hR(this.gl,t,e,o,n,this.textureConfig)}createFloat16PackedMatrixTexture(t,e){return this.throwIfDisposed(),mR(this.gl,t,e,this.textureConfig)}createPackedMatrixTexture(t,e){return this.throwIfDisposed(),pR(this.gl,t,e,this.textureConfig)}deleteMatrixTexture(t){this.throwIfDisposed(),this.outputTexture===t&&(kS(this.gl,this.framebuffer),this.outputTexture=null),pt(this.gl,()=>this.gl.deleteTexture(t))}downloadByteEncodedFloatMatrixFromOutputTexture(t,e,o){return this.downloadMatrixDriver(t,()=>yR(this.gl,e,o,this.textureConfig))}downloadPackedMatrixFromBuffer(t,e,o,n,s,i){return bR(this.gl,t,e,o,n,s,i,this.textureConfig)}downloadFloat32MatrixFromBuffer(t,e){return xR(this.gl,t,e)}createBufferFromTexture(t,e,o){this.bindTextureToFrameBuffer(t);let n=gR(this.gl,e,o,this.textureConfig);return this.unbindTextureToFrameBuffer(),n}createAndWaitForFence(){let t=this.createFence(this.gl);return this.pollFence(t)}createFence(t){let e,o;if(z().getBool("WEBGL_FENCE_API_ENABLED")){let n=t,s=n.fenceSync(n.SYNC_GPU_COMMANDS_COMPLETE,0);t.flush(),o=()=>{let i=n.clientWaitSync(s,0,0);return i===n.ALREADY_SIGNALED||i===n.CONDITION_SATISFIED},e=s}else z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(e=this.beginQuery(),this.endQuery(),o=()=>this.isQueryAvailable(e,z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):o=()=>!0;return{query:e,isFencePassed:o}}downloadMatrixFromPackedTexture(t,e,o){return this.downloadMatrixDriver(t,()=>wR(this.gl,e,o))}createProgram(t){this.throwIfDisposed();let e=this.gl;this.vertexShader==null&&(this.vertexShader=sR(e));let o=FD(e);pt(e,()=>e.attachShader(o,this.vertexShader)),pt(e,()=>e.attachShader(o,t)),_D(e,o);let n=Object.assign(o,{vao:this.createVertexArray()});return this.debug&&xy(e,n),n}buildVao(t){this.setProgram(t),this.bindVertexArray(t.vao);let e=this.gl;pt(e,()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,this.indexBuffer)),fR(e,t,this.vertexBuffer)}deleteProgram(t){this.throwIfDisposed(),t===this.program&&(this.program=null),t!=null&&(pt(this.gl,()=>this.gl.deleteProgram(t)),this.deleteVertexArray(t.vao))}setProgram(t){this.throwIfDisposed(),this.program=t,this.program!=null&&this.debug&&xy(this.gl,this.program),pt(this.gl,()=>this.gl.useProgram(t))}getUniformLocation(t,e,o=!0){return this.throwIfDisposed(),o?BD(this.gl,t,e):VD(this.gl,t,e)}getAttributeLocation(t,e){return this.throwIfDisposed(),pt(this.gl,()=>this.gl.getAttribLocation(t,e))}getUniformLocationNoThrow(t,e){return this.throwIfDisposed(),this.gl.getUniformLocation(t,e)}setInputMatrixTexture(t,e,o){this.throwIfDisposed(),this.throwIfNoProgram(),GD(this.gl,t,e,o)}setOutputMatrixTexture(t,e,o){this.setOutputMatrixTextureDriver(t,o,e)}setOutputPackedMatrixTexture(t,e,o){this.throwIfDisposed();let[n,s]=Gn(e,o);this.setOutputMatrixTextureDriver(t,n,s)}setOutputMatrixWriteRegion(t,e,o,n){this.setOutputMatrixWriteRegionDriver(o,t,n,e)}setOutputPackedMatrixWriteRegion(t,e,o,n){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){this.program!=null&&xy(this.gl,this.program),Th(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();let t=this.gl;if(this.debug){let e=this.getVertexArray();console.assert(e===this.program.vao,"VAO changed between setProgram and executeProgram!"),this.debugValidate()}pt(t,()=>t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),pt(this.gl,()=>this.gl.finish())}getQueryTimerExtension(){return this.disjointQueryTimerExtension==null&&(this.disjointQueryTimerExtension=vh(this.gl,z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")===2?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")===2){let o=this.gl,n=this.getQueryTimerExtensionWebGL2(),s=o.createQuery();return o.beginQuery(n.TIME_ELAPSED_EXT,s),s}let t=this.getQueryTimerExtensionWebGL1(),e=t.createQueryEXT();return t.beginQueryEXT(t.TIME_ELAPSED_EXT,e),e}endQuery(){if(z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")===2){let e=this.gl,o=this.getQueryTimerExtensionWebGL2();e.endQuery(o.TIME_ELAPSED_EXT);return}let t=this.getQueryTimerExtensionWebGL1();t.endQueryEXT(t.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(t){return await y.repeatedTry(()=>this.disposed||this.isQueryAvailable(t,z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))),this.getQueryTime(t,z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(t,e){if(e===0)return null;if(e===2){let o=this.gl;return o.getQueryParameter(t,o.QUERY_RESULT)/1e6}else{let o=this.getQueryTimerExtensionWebGL1();return o.getQueryObjectEXT(t,o.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(t,e){if(e===0)return!0;if(e===2){let o=this.gl,n=this.getQueryTimerExtensionWebGL2(),s=o.getQueryParameter(t,o.QUERY_RESULT_AVAILABLE);return this.disjoint==null&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),s&&!this.disjoint}else{let o=this.getQueryTimerExtensionWebGL1(),n=o.getQueryObjectEXT(t,o.QUERY_RESULT_AVAILABLE_EXT);return this.disjoint==null&&(this.disjoint=this.gl.getParameter(o.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(t){return new Promise(e=>{this.addItemToPoll(()=>t.isFencePassed(),()=>e())})}pollItems(){let t=K6(this.itemsToPoll.map(e=>e.isDoneFn));for(let e=0;e<=t;++e){let{resolveFn:o}=this.itemsToPoll[e];o()}this.itemsToPoll=this.itemsToPoll.slice(t+1)}addItemToPoll(t,e){if(this.itemsToPoll.push({isDoneFn:t,resolveFn:e}),this.itemsToPoll.length>1)return;let o;"setTimeoutCustom"in z().platform&&(o=z().platform.setTimeoutCustom.bind(z().platform)),y.repeatedTry(()=>(this.pollItems(),this.itemsToPoll.length===0),()=>0,null,o)}bindTextureToFrameBuffer(t){this.throwIfDisposed(),yy(this.gl,t,this.framebuffer),this.debug&&Th(this.gl)}unbindTextureToFrameBuffer(){this.outputTexture!=null?(yy(this.gl,this.outputTexture,this.framebuffer),this.debug&&Th(this.gl)):kS(this.gl,this.framebuffer)}downloadMatrixDriver(t,e){this.bindTextureToFrameBuffer(t);let o=e();return this.unbindTextureToFrameBuffer(),o}setOutputMatrixTextureDriver(t,e,o){this.throwIfDisposed();let n=this.gl;yy(n,t,this.framebuffer),this.debug&&Th(n),this.outputTexture=t,pt(n,()=>n.viewport(0,0,e,o)),pt(n,()=>n.scissor(0,0,e,o))}setOutputMatrixWriteRegionDriver(t,e,o,n){this.throwIfDisposed(),pt(this.gl,()=>this.gl.scissor(t,e,o,n))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(this.program==null)throw new Error("No GPU program is currently set.")}};function K6(r){let t=0;for(;t<r.length&&r[t]();++t);return t-1}var{addImpl:CR,bincountImpl:ky,bincountReduceImpl:SR,castImpl:NR,ceilImpl:vR,concatImpl:TR,equalImpl:IR,expImpl:kR,expm1Impl:ER,floorImpl:$R,gatherNdImpl:AR,gatherV2Impl:DR,greaterImpl:RR,greaterEqualImpl:FR,lessImpl:_R,lessEqualImpl:OR,linSpaceImpl:LR,logImpl:PR,maxImpl:zR,maximumImpl:MR,minimumImpl:BR,multiplyImpl:VR,negImpl:GR,notEqualImpl:WR,prodImpl:UR,raggedGatherImpl:HR,raggedRangeImpl:KR,raggedTensorToTensorImpl:qR,rangeImpl:jR,rsqrtImpl:XR,scatterImpl:YR,sigmoidImpl:ZR,simpleAbsImpl:Ey,sliceImpl:JR,sparseFillEmptyRowsImpl:QR,sparseReshapeImpl:tF,sparseSegmentReductionImpl:$y,sqrtImpl:eF,staticRegexReplaceImpl:rF,stridedSliceImpl:oF,stringNGramsImpl:nF,stringSplitImpl:sF,stringToHashBucketFastImpl:iF,subImpl:aF,tileImpl:lF,topKImpl:uF,transposeImpl:tu,uniqueImpl:cF}=lS;function OS(r,t){return["x","y","z","w","u","v"].slice(0,t).map(e=>`${r}.${e}`)}function Ae(r,t){return t===1?[r]:OS(r,t)}function pF(r,t){if(r===1)return"rc";let e="";for(let o=0;o<r;o++)e+=t[o],o<r-1&&(e+=",");return e}var Ay=class{constructor(t){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=t,this.rank=t.length,this.enableShapeUniforms=Kt(this.outputShape.length),this.rank===0)this.userCode=`
        void main() {
          setOutput(vec4(getA(), 0., 0., 0.));
        }
      `;else{let e=Ae("rc",this.rank),o=It(this.rank),n=this.getOutOfBoundsCondition(e),s=this.getSetup(e),i=this.getOutput(e);this.userCode=`
        void main() {
          ${o} rc = getOutputCoords();

          if(${n}) {
            setOutput(vec4(0));
          } else {
            ${s}

            setOutput(vec4(${i}));
          }
        }
      `}}getSourceCoordsArr(t){let e=[];for(let o=0;o<=1;o++)for(let n=0;n<=1;n++){let s=`${o===0?"r":"rp1"}, ${n===0?"c":"cp1"}`;for(let i=2;i<this.rank;i++)s=`${t[t.length-1-i]},`+s;e.push(s)}return e}getOutOfBoundsCondition(t){if(this.rank===1)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let e="";for(let o=this.rank-2;o<this.rank;o++)e+=`${t[o]} >= ${this.enableShapeUniforms?`outShape[${o}]`:this.outputShape[o]}`,o<this.rank-1&&(e+="||");return e}getSetup(t){if(this.rank===1)return"";let e=t.slice(-2),o=this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1],n=this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2];return`
      int r = ${e[0]};
      int c = ${e[1]};
      int rp1 = r + 1;
      int cp1 = c + 1;

      bool cEdge = cp1 >= ${o};
      bool rEdge = rp1 >= ${n};
    `}getOutput(t){let e=this.getSourceCoordsArr(t);return this.rank===1?`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`:`getA(${e[0]}),
            cEdge ? 0. : getA(${e[1]}),
            rEdge ? 0. : getA(${e[2]}),
            rEdge || cEdge ? 0. : getA(${e[3]})`}};var Xp=class{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=t,this.enableShapeUniforms=Kt(this.outputShape.length);let o="";for(let n=0;n<4;n++){let s="thisRC = rc;";n%2===1&&(s+="thisRC.z += 1;"),n>1&&(s+="thisRC.y += 1;"),o+=`
        ${s}
        ${n>0?"if(thisRC.y < rows && thisRC.z < cols){":""}
          int flatIndex = getFlatIndex(thisRC);

          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);
          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));

          result[${n}] =
            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);
        ${n>0?"}":""}
      `}this.userCode=`
      ${q6(e,this.enableShapeUniforms)}
      ${this.enableShapeUniforms?Gp():Vp(t)}

      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0.);

        ivec3 thisRC;
        int rows = ${this.enableShapeUniforms?"outShape[1]":t[1]};
        int cols = ${this.enableShapeUniforms?"outShape[2]":t[2]};

        ${o}

        setOutput(result);
      }
    `}};function q6(r,t){return`
    ivec3 inputCoordsFromReshapedOutCoords(int index) {
      ${t?YD(["r","c","d"],"inputShape"):fn(["r","c","d"],r)}
      return ivec3(r, c, d);
    }
  `}var Dy=class{constructor(t){this.gpgpu=t,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.usedTextures={},this.logEnabled=!1}acquireTexture(t,e,o){let n=fF(e,o),s=hF(t,n,o);s in this.freeTextures||(this.freeTextures[s]=[]),s in this.usedTextures||(this.usedTextures[s]=[]);let i=mF(t,n,this.gpgpu.gl,this.gpgpu.textureConfig,o);if(this.freeTextures[s].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=i,this.log();let l=this.freeTextures[s].pop();return this.usedTextures[s].push(l),l}let a;return n===lr.PACKED_2X2_FLOAT32?a=this.gpgpu.createPackedMatrixTexture(t[0],t[1]):n===lr.PACKED_2X2_FLOAT16?a=this.gpgpu.createFloat16PackedMatrixTexture(t[0],t[1]):n===lr.UNPACKED_FLOAT32?a=this.gpgpu.createFloat32MatrixTexture(t[0],t[1]):n===lr.UNPACKED_FLOAT16?a=this.gpgpu.createFloat16MatrixTexture(t[0],t[1]):n===lr.PACKED_4X1_UNSIGNED_BYTE&&(a=this.gpgpu.createUnsignedBytesMatrixTexture(t[0],t[1])),this.usedTextures[s].push(a),this.numUsedTextures++,this._numBytesAllocated+=i,this.log(),a}releaseTexture(t,e,o,n){if(this.freeTextures==null)return;let s=fF(o,n),i=hF(e,s,n);i in this.freeTextures||(this.freeTextures[i]=[]);let a=mF(e,s,this.gpgpu.gl,this.gpgpu.textureConfig,n),l=z().get("WEBGL_DELETE_TEXTURE_THRESHOLD");l!==-1&&this._numBytesAllocated>l?(this.gpgpu.deleteMatrixTexture(t.texture),this._numBytesAllocated-=a):(this.freeTextures[i].push(t),this.numFreeTextures++,this._numBytesFree+=a),this.numUsedTextures--;let u=this.usedTextures[i],c=u&&u.indexOf(t);if(c==null||c<0)throw new Error("Cannot release a texture that was never provided by this texture manager");u[c]=u[u.length-1],u.pop(),this.log()}log(){if(!this.logEnabled)return;let t=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${t})`);let e=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*e)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(this.freeTextures!=null){for(let t in this.freeTextures)this.freeTextures[t].forEach(e=>{this.gpgpu.deleteMatrixTexture(e.texture)});for(let t in this.usedTextures)this.usedTextures[t].forEach(e=>{this.gpgpu.deleteMatrixTexture(e.texture)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}};function j6(r,t){let e=r;if(t===e.R32F)return 4;if(t===e.R16F)return 2;if(t===e.RGBA32F)return 16;if(t===r.RGBA)return 16;if(t===e.RGBA16F)return 8;if(t===e.RGBA8)return 4;throw new Error(`Unknown internal format ${t}`)}function mF(r,t,e,o,n){let s=X6(t,o),i;if(n){let[l,u]=Gn(r[0],r[1]);i=l*u}else{let[l,u]=Yl(r[0],r[1]);i=l*u}let a=j6(e,s);return i*a}function X6(r,t){switch(r){case lr.PACKED_2X2_FLOAT32:return FS(t);case lr.PACKED_2X2_FLOAT16:return _S(t);case lr.UNPACKED_FLOAT32:return AS(t);case lr.UNPACKED_FLOAT16:return DS(t);case lr.PACKED_4X1_UNSIGNED_BYTE:return RS(t);default:throw new Error(`Unknown physical texture type ${r}`)}}function Y6(r){return z().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?r?lr.PACKED_2X2_FLOAT32:lr.UNPACKED_FLOAT32:r?lr.PACKED_2X2_FLOAT16:lr.UNPACKED_FLOAT16}function fF(r,t){if(r===br.UPLOAD)return lr.PACKED_2X2_FLOAT32;if(r===br.RENDER||r==null)return Y6(t);if(r===br.DOWNLOAD||r===br.PIXELS)return lr.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${r}`)}function hF(r,t,e){return`${r[0]}_${r[1]}_${t}_${e}`}var ur=class{constructor(t,e){this.variableNames=["A"],this.outputShape=t,this.enableShapeUniforms=Kt(this.outputShape.length),this.userCode=`
      float unaryOperation(float x) {
        ${e}
      }

      void main() {
        float x = getAAtOutCoords();
        float y = unaryOperation(x);

        setOutput(y);
      }
    `}},Ue="if (isnan(x)) return x;",dF="return x;",LS="return abs(x);";var gF="return (x >= 0.0) ? x : (exp(x) - 1.0);",xF=Ue+`
  return (x < 0.0) ? 0.0 : x;
`,yF=Ue+`
  return (x < 0.0) ? 0.0 : min(6.0, x);
`,Un="return x;",bF="return 1.0 / (1.0 + exp(-1.0 * x));";var CF="return x;",SF=`
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`,NF=`
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,vF=`
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,TF="return 1.0 / (1.0 + exp(-1.0 * x));",Zr=class{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.enableShapeUniforms=Kt(this.outputShape.length),this.userCode=`
      vec4 unaryOperation(vec4 x) {
        ${e}
      }

      void main() {
        vec4 x = getAAtOutCoords();
        vec4 y = unaryOperation(x);

        setOutput(y);
      }
    `}};var Ry=class{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=t,this.enableShapeUniforms=Kt(this.outputShape.length);let e=t.length,o=Ae("rc",e),n=It(e),s=pF(e,o),i=o.slice(-2),a=e<=1?"rc":`vec2(${i.join(",")})`;this.userCode=`
      void main() {
        ${n} rc = getOutputCoords();
        vec4 packedInput = getA(${s});

        setOutput(getChannel(packedInput, ${a}));
      }
    `}};var J6=gr.whereImpl,Q6=1e-7,tX=1e-4,Fy={};function eX(r){return r in Fy||(Fy[r]={}),Fy[r]}var rX=z().getNumber("CPU_HANDOFF_SIZE_THRESHOLD"),oX=600;function nX(){return z().global.screen==null?1024:z().global.screen.height*z().global.screen.width*window.devicePixelRatio*oX/1024/1024}var eu=class extends jn{nextDataId(){return eu.nextDataId++}constructor(t){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!z().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let e;if(t!=null){if(t instanceof jp)e=t;else{let o=po(z().getNumber("WEBGL_VERSION"),t);e=new jp(o)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{let o=po(z().getNumber("WEBGL_VERSION"));e=new jp(o),this.binaryCache=eX(z().getNumber("WEBGL_VERSION")),this.gpgpuCreatedLocally=!0}this.gpgpu=e,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new Dy(this.gpgpu),this.numMBBeforeWarning=nX(),this.texData=new qa(this,Wr())}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}writeTexture(t,e,o,n,s,i){let a=this.makeTensorInfo(e,o),l=this.texData.get(a.dataId);l.isPacked=!1,l.texture={texture:t,texShape:[n,s]},l.texShape=[n,s];let u=Ih(e),c=new kh(u,!1,i),p=this.runWebGLProgram(c,[a],o,[[n,s]]);return p.shape=e,l.texture=null,this.disposeIntermediateTensorInfo(a),p.dataId}write(t,e,o){if((z().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||z().getBool("DEBUG"))&&this.checkNumericalProblems(t),o==="complex64"&&t!=null)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");let n={id:this.nextDataId()};return this.texData.set(n,{shape:e,dtype:o,values:t,usage:br.UPLOAD,refCount:1}),n}refCount(t){return this.texData.has(t)?this.texData.get(t).refCount:0}incRef(t){let e=this.texData.get(t);e.refCount++}decRef(t){if(this.texData.has(t)){let e=this.texData.get(t);e.refCount--}}move(t,e,o,n,s){if(z().getBool("DEBUG")&&this.checkNumericalProblems(e),n==="complex64")throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(t,{shape:o,dtype:n,values:e,usage:br.UPLOAD,refCount:s})}disposeIntermediateTensorInfo(t){this.disposeData(t.dataId)}readSync(t){let e=this.texData.get(t),{values:o,dtype:n,complexTensorInfos:s,slice:i,shape:a,isPacked:l}=e;if(i!=null){let m;l?m=new Zr(a,Un):m=new ur(a,Un);let f=this.runWebGLProgram(m,[{dataId:t,shape:a,dtype:n}],n),h=this.readSync(f.dataId);return this.disposeIntermediateTensorInfo(f),h}if(o!=null)return this.convertAndCacheOnCPU(t);if(n==="string")return o;let u=this.activeTimers!=null,c;u&&(c=y.now());let p;if(n==="complex64"){let m=this.readSync(s.real.dataId),f=this.readSync(s.imag.dataId);p=I.mergeRealAndImagArrays(m,f)}else p=this.getValuesFromTexture(t);return u&&(this.downloadWaitMs+=y.now()-c),this.convertAndCacheOnCPU(t,p)}async read(t){if(this.pendingRead.has(t)){let h=this.pendingRead.get(t);return new Promise(g=>h.push(g))}let e=this.texData.get(t),{values:o,shape:n,slice:s,dtype:i,complexTensorInfos:a,isPacked:l}=e;if(s!=null){let h;l?h=new Zr(n,Un):h=new ur(n,Un);let g=this.runWebGLProgram(h,[{dataId:t,shape:n,dtype:i}],i),d=this.read(g.dataId);return this.disposeIntermediateTensorInfo(g),d}if(o!=null)return this.convertAndCacheOnCPU(t);if(z().getBool("DEBUG")&&!z().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&z().getNumber("WEBGL_VERSION")===2)throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let u=null,c;if(i!=="complex64"&&z().get("WEBGL_BUFFER_SUPPORTED")){c=this.decode(t);let h=this.texData.get(c.dataId);u=this.gpgpu.createBufferFromTexture(h.texture.texture,...Sh(n))}this.pendingRead.set(t,[]),i!=="complex64"&&await this.gpgpu.createAndWaitForFence();let p;if(i==="complex64"){let h=await Promise.all([this.read(a.real.dataId),this.read(a.imag.dataId)]),g=h[0],d=h[1];p=I.mergeRealAndImagArrays(g,d)}else if(u==null)p=this.getValuesFromTexture(t);else{let h=y.sizeFromShape(n);p=this.gpgpu.downloadFloat32MatrixFromBuffer(u,h)}if(c!=null&&this.disposeIntermediateTensorInfo(c),u!=null){let h=this.gpgpu.gl;pt(h,()=>h.deleteBuffer(u))}let m=this.convertAndCacheOnCPU(t,p),f=this.pendingRead.get(t);return this.pendingRead.delete(t),f.forEach(h=>h(m)),this.pendingDisposal.has(t)&&(this.pendingDisposal.delete(t),this.disposeData(t)&&Wr().removeDataId(t,this),this.pendingDeletes--),m}readToGPU(t,e={}){let o=this.texData.get(t),{values:n,shape:s,slice:i,dtype:a,isPacked:l,texture:u}=o;if(a==="complex64")throw new Error("Does not support reading texture for complex64 dtype.");if(i!=null){let f;l?f=new Zr(s,Un):f=new ur(s,Un);let h=this.runWebGLProgram(f,[{dataId:t,shape:s,dtype:a}],a),g=this.readToGPU(h,e);return this.disposeIntermediateTensorInfo(h),g}if(u==null)throw n!=null?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");let c=this.decode(t,e.customTexShape),p=Wr().makeTensorFromTensorInfo(c),m=this.texData.get(c.dataId);return Object.assign({tensorRef:p},m.texture)}bufferSync(t){let e=this.readSync(t.dataId);if(t.dtype==="string")try{let o=e.map(n=>y.decodeString(n));return mt(t.shape,t.dtype,o)}catch{throw new Error("Failed to decode encoded string bytes into utf-8")}return mt(t.shape,t.dtype,e)}checkNumericalProblems(t){if(t!=null)for(let e=0;e<t.length;e++){let o=t[e];if(!AD(o))throw z().getBool("WEBGL_RENDER_FLOAT32_CAPABLE")?Error(`The value ${o} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`):Error(`The value ${o} cannot be represented on this device.`)}}getValuesFromTexture(t){let{shape:e,dtype:o,isPacked:n}=this.texData.get(t),s=y.sizeFromShape(e);if(z().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){let m=this.decode(t),f=this.texData.get(m.dataId),h=this.gpgpu.downloadMatrixFromPackedTexture(f.texture.texture,...Sh(e)).subarray(0,s);return this.disposeIntermediateTensorInfo(m),h}let i=z().getBool("WEBGL_PACK")&&n===!0,a=i?Ih(e):e,l=i?new Ty(a):new vy(a),u=this.runWebGLProgram(l,[{shape:a,dtype:o,dataId:t}],"float32"),c=this.texData.get(u.dataId),p=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(c.texture.texture,c.texShape[0],c.texShape[1]).subarray(0,s);return this.disposeIntermediateTensorInfo(u),p}timerAvailable(){return z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(t){let e=this.activeTimers,o=[],n=!1;this.programTimersStack==null?(this.programTimersStack=o,n=!0):this.activeTimers.push(o),this.activeTimers=o,t();let s=y.flatten(this.activeTimers.map(l=>l.query)).filter(l=>l!=null),i=y.flatten(this.activeTimers.map(l=>l.name)).filter(l=>l!=null);this.activeTimers=e,n&&(this.programTimersStack=null);let a={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(async()=>{if(z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){let l=await Promise.all(s);a.kernelMs=y.sum(l),a.getExtraProfileInfo=()=>l.map((u,c)=>({name:i[c],ms:u})).map(u=>`${u.name}: ${u.ms}`).join(", ")}else a.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,a})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:y.now(),endMs:null}}endTimer(t){return z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),t):(t.endMs=y.now(),t)}async getQueryTime(t){if(z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(t);let e=t;return e.endMs-e.startMs}disposeData(t,e=!1){if(this.pendingDisposal.has(t))return!1;if(!this.texData.has(t))return!0;if(e?this.texData.get(t).refCount=0:this.texData.get(t).refCount--,!e&&this.texData.get(t).refCount>0)return!1;if(this.pendingRead.has(t))return this.pendingDisposal.add(t),this.pendingDeletes++,!1;this.releaseGPUData(t);let{complexTensorInfos:o}=this.texData.get(t);return o!=null&&(this.disposeData(o.real.dataId,e),this.disposeData(o.imag.dataId,e)),this.texData.delete(t),!0}releaseGPUData(t){let{texture:e,dtype:o,texShape:n,usage:s,isPacked:i,slice:a}=this.texData.get(t),l=a&&a.origDataId||t,u=this.dataRefCount.get(l);u>1?this.dataRefCount.set(l,u-1):(this.dataRefCount.delete(l),e!=null&&(this.numBytesInGPU-=this.computeBytes(n,o),this.textureManager.releaseTexture(e,n,s,i)));let c=this.texData.get(t);c.texture=null,c.texShape=null,c.isPacked=!1,c.slice=null}getTexture(t){return this.uploadToGPU(t),this.texData.get(t).texture.texture}getDataInfo(t){return this.texData.get(t)}shouldExecuteOnCPU(t,e=rX){return z().getBool("WEBGL_CPU_FORWARD")&&t.every(o=>this.texData.get(o.dataId).texture==null&&y.sizeFromShape(o.shape)<e)}getGPGPUContext(){return this.gpgpu}where(t){I.warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");let e=t.dataSync();return J6(t.shape,e)}packedUnaryOp(t,e,o){let n=new Zr(t.shape,e),s=this.compileAndRun(n,[t],o);return Wr().makeTensorFromTensorInfo(s)}abs(t){if(this.shouldExecuteOnCPU([t])&&t.dtype!=="complex64"){let n=Ey(this.texData.get(t.dataId).values);return this.makeOutput(t.shape,t.dtype,n)}if(z().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,LS,t.dtype);let e=new ur(t.shape,LS),o=this.compileAndRun(e,[t]);return Wr().makeTensorFromTensorInfo(o)}makeTensorInfo(t,e,o){let n;if(e==="string"&&o!=null&&o.length>0&&y.isString(o[0])){let s=o.map(i=>y.encodeString(i));n=this.write(s,t,e)}else n=this.write(o,t,e);return this.texData.get(n).usage=null,{dataId:n,shape:t,dtype:e}}makeOutput(t,e,o){return Wr().makeTensorFromTensorInfo(this.makeTensorInfo(t,e,o),this)}unpackTensor(t){let e=new Ry(t.shape);return this.runWebGLProgram(e,[t],t.dtype)}packTensor(t){let e=new Ay(t.shape),o=!0;return this.runWebGLProgram(e,[t],t.dtype,null,o)}packedReshape(t,e){let o=[Va(t.shape),...Ga(t.shape)],n={dtype:t.dtype,shape:o,dataId:t.dataId},s=[Va(e),...Ga(e)],i=new Xp(s,o),a=!0,l=[o],u=this.runWebGLProgram(i,[n],t.dtype,l,a);return{dataId:u.dataId,shape:e,dtype:u.dtype}}decode(t,e){let o=this.texData.get(t),{isPacked:n,shape:s,dtype:i}=o;if(e!=null){let m=y.sizeFromShape(s),f=e[0]*e[1]*4;y.assert(m<=f,()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data.")}let a=Ih(s),l;n?l=new Ny(a):l=new Sy(a);let u=!0,c=[e??Sh(a)],p=this.runWebGLProgram(l,[{shape:a,dtype:i,dataId:t}],i,c,u,e);return{dtype:i,shape:s,dataId:p.dataId}}runWebGLProgram(t,e,o,n,s=!1,i){let a=this.makeTensorInfo(t.outputShape,o),l=this.texData.get(a.dataId);if(t.packedOutput&&(l.isPacked=!0),t.outPackingScheme===Ba.DENSE){let x=i??Sh(t.outputShape);l.texShape=x.map(b=>b*2)}if(t.outTexUsage!=null&&(l.usage=t.outTexUsage),y.sizeFromShape(a.shape)===0)return l.values=y.getTypedArrayFromDType(a.dtype,0),a;let u=[],c=e.map(x=>{if(x.dtype==="complex64")throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let b=this.texData.get(x.dataId);if(b.texture==null){if(!t.packedInputs&&y.sizeFromShape(x.shape)<=z().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:x.shape,texData:null,isUniform:!0,uniformValues:b.values};t.packedInputs&&(b.isPacked=!0,b.shape=x.shape)}if(this.uploadToGPU(x.dataId),!!b.isPacked!=!!t.packedInputs)x=b.isPacked?this.unpackTensor(x):this.packTensor(x),u.push(x),b=this.texData.get(x.dataId);else if(b.isPacked&&!Zl(b.shape,x.shape)){let S=x,w=x.shape;x.shape=b.shape,x=this.packedReshape(x,w),u.push(x),b=this.texData.get(x.dataId),S.shape=w}return{shape:x.shape,texData:b,isUniform:!1}});this.uploadToGPU(a.dataId);let p={shape:a.shape,texData:l,isUniform:!1},m=nR(t,c,p),f=this.getAndSaveBinary(m,()=>rR(this.gpgpu,t,c,p)),h=this.activeTimers!=null,g;h&&(g=this.startTimer()),z().get("ENGINE_COMPILE_ONLY")||oR(this.gpgpu,f,c,p,n),u.forEach(x=>this.disposeIntermediateTensorInfo(x)),h&&(g=this.endTimer(g),this.activeTimers.push({name:t.constructor.name,query:this.getQueryTime(g)}));let d=z().get("WEBGL_FLUSH_THRESHOLD");if(d>0){let x=y.now();x-this.lastGlFlushTime>d&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=x)}if(!z().getBool("WEBGL_LAZILY_UNPACK")&&l.isPacked&&s===!1){let x=this.unpackTensor(a);return this.disposeIntermediateTensorInfo(a),x}return a}compileAndRun(t,e,o,n,s=!1){return o=o||e[0].dtype,this.runWebGLProgram(t,e,o,n,s)}getAndSaveBinary(t,e){return t in this.binaryCache||(this.binaryCache[t]=e()),this.binaryCache[t]}getTextureManager(){return this.textureManager}dispose(){this.disposed||(z().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach(e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]}),this.textureManager.dispose(),this.canvas!=null&&typeof HTMLCanvasElement<"u"&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return this.floatPrecisionValue==null&&(this.floatPrecisionValue=M(()=>{if(!z().get("WEBGL_RENDER_FLOAT32_ENABLED")){let t=z().getBool("DEBUG");z().set("DEBUG",!1);let e=this.abs(st(1e-8)).dataSync()[0];if(z().set("DEBUG",t),e>0)return 32}return 16})),this.floatPrecisionValue}epsilon(){return this.floatPrecision()===32?Q6:tX}uploadToGPU(t){let e=this.texData.get(t),{shape:o,dtype:n,values:s,texture:i,usage:a,isPacked:l}=e;if(i!=null)return;let u=this.activeTimers!=null,c;u&&(c=y.now());let p=e.texShape;if(p==null&&(p=WD(o,l),e.texShape=p),s!=null){let m=Ih(o),f,h=p[1],g=p[0],d=s instanceof Uint8Array||s instanceof Uint8ClampedArray;(l||!d)&&([h,g]=Gn(p[0],p[1])),l?f=new Iy(m,d):f=new kh(m,d);let x=d?[g,h]:p,b=this.makeTensorInfo(x,n),S=this.texData.get(b.dataId);d?S.usage=br.PIXELS:S.usage=br.UPLOAD,S.texShape=x,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(b.dataId),h,g,s);let w=[[g,h]],T=!0,$=this.runWebGLProgram(f,[b],n,w,T),R=this.texData.get($.dataId);e.texShape=R.texShape,e.isPacked=R.isPacked,e.usage=R.usage,z().get("ENGINE_COMPILE_ONLY")?this.disposeData($.dataId):(e.texture=R.texture,e.values=null,this.texData.delete($.dataId)),this.disposeIntermediateTensorInfo(b),u&&(this.uploadWaitMs+=y.now()-c)}else{let m=this.acquireTexture(p,a,n,l);e.texture=m}}convertAndCacheOnCPU(t,e){let o=this.texData.get(t),{dtype:n}=o;return e!=null&&(o.values=sX(e,n)),o.values}acquireTexture(t,e,o,n){if(this.numBytesInGPU+=this.computeBytes(t,o),!this.warnedAboutMemory&&this.numBytesInGPU>this.numMBBeforeWarning*1024*1024){let s=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${s} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(t,e,n)}computeBytes(t,e){return t[0]*t[1]*y.bytesPerElement(e)}checkCompileCompletion(){for(let[,t]of Object.entries(this.binaryCache))this.checkCompletion_(t)}async checkCompileCompletionAsync(){let t=[];if(this.gpgpu.parallelCompilationExtension){for(let[,e]of Object.entries(this.binaryCache))t.push(this.checkCompletionAsync_(e));return Promise.all(t)}else{for(let[,e]of Object.entries(this.binaryCache)){let o=new Promise(n=>{try{this.checkCompletion_(e),n(!0)}catch(s){throw s}});t.push(o)}return Promise.all(t)}}async checkCompletionAsync_(t){return this.gpgpu.gl.getProgramParameter(t.webGLProgram,this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?this.checkCompletion_(t):(await Rm(),this.checkCompletionAsync_(t))}checkCompletion_(t){if(this.gpgpu.gl.getProgramParameter(t.webGLProgram,this.gpgpu.gl.LINK_STATUS)===!1)throw console.log(this.gpgpu.gl.getProgramInfoLog(t.webGLProgram)),this.gpgpu.gl.getShaderParameter(t.fragmentShader,this.gpgpu.gl.COMPILE_STATUS)===!1?(TS(t.source,this.gpgpu.gl.getShaderInfoLog(t.fragmentShader)),new Error("Failed to compile fragment shader.")):new Error("Failed to link vertex and fragment shaders.");return!0}getUniformLocations(){for(let t of Object.values(this.binaryCache)){this.gpgpu.buildVao(t.webGLProgram);let{variablesLocations:e,customUniformLocations:o,infLoc:n,nanLoc:s,outShapeLocation:i,outShapeStridesLocation:a,outTexShapeLocation:l}=$S(this.gpgpu,t.program,t.webGLProgram);t.variablesLocations=e,t.customUniformLocations=o,t.infLoc=n,t.nanLoc=s,t.outShapeLocation=i,t.outShapeStridesLocation=a,t.outTexShapeLocation=l}}createTensorFromGPUData(t,e,o){t.channels=t.channels||"RGBA";let{texture:n,height:s,width:i,channels:a}=t,l=Wr().backend;if(!l.gpgpu.gl.isTexture(n))throw new Error("The texture is invalid. Also, please make sure the texture and the TFJS WebGL backend are using the same canvas. If you want to use your own custom canvas, you have to create and use the custom TFJS WebGL backend created from the canvas through 'new tf.MathBackendWebGL(customCanvas)'.");let u=l.writeTexture(n,e,o,s,i,a);return Wr().makeTensorFromDataId(u,e,o,l)}};eu.nextDataId=0;function sX(r,t){if(t==="float32"||t==="complex64")return r;if(t==="int32"||t==="bool"){let e=t==="int32"?new Int32Array(r.length):new Uint8Array(r.length);for(let o=0;o<e.length;++o)e[o]=Math.round(r[o]);return e}else throw new Error(`Unknown dtype ${t}`)}ma.isBrowser()&&nd("webgl",()=>new eu,2);var Yp=`
  if (isnan(a)) return a;
  if (isnan(b)) return b;
`;var To=class{constructor(t,e,o){this.variableNames=["A","B"],this.outputShape=I.assertAndGetBroadcastShape(e,o),this.enableShapeUniforms=Kt(this.outputShape.length),this.userCode=`
      float binaryOperation(float a, float b) {
        ${t}
      }

      void main() {
        float a = getAAtOutCoords();
        float b = getBAtOutCoords();
        setOutput(binaryOperation(a, b));
      }
    `}};var mo=`
  result.r = isNaN.r ? NAN : result.r;
  result.g = isNaN.g ? NAN : result.g;
  result.b = isNaN.b ? NAN : result.b;
  result.a = isNaN.a ? NAN : result.a;
`;var qo=class{constructor(t,e,o,n=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=I.assertAndGetBroadcastShape(e,o);let s=this.outputShape.length;this.enableShapeUniforms=Kt(s);let i="";if(n)if(s===0||y.sizeFromShape(this.outputShape)===1)i=`
          result.y = 0.;
          result.z = 0.;
          result.w = 0.;
        `;else if(i=`
          ${It(s)} coords = getOutputCoords();
        `,s===1)this.enableShapeUniforms?i+=`
            result.y = (coords + 1) >= outShape ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `:i+=`
            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `;else{let l=Ae("coords",s);this.enableShapeUniforms?i+=`
            bool nextRowOutOfBounds =
              (${l[s-2]} + 1) >= outShape[${s} - 2];
            bool nextColOutOfBounds =
              (${l[s-1]} + 1) >= outShape[${s} - 1];
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `:i+=`
            bool nextRowOutOfBounds =
              (${l[s-2]} + 1) >= ${this.outputShape[s-2]};
            bool nextColOutOfBounds =
              (${l[s-1]} + 1) >= ${this.outputShape[s-1]};
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `}this.userCode=`
      vec4 binaryOperation(vec4 a, vec4 b) {
        ${t}
      }

      void main() {
        vec4 a = getAAtOutCoords();
        vec4 b = getBAtOutCoords();

        vec4 result = binaryOperation(a, b);
        ${i}

        setOutput(result);
      }
    `}};function De(r){let{inputs:t,backend:e}=r,{x:o}=t;return e.incRef(o.dataId),{dataId:o.dataId,shape:o.shape,dtype:o.dtype}}var IF={kernelName:yn,backendName:"webgl",kernelFunc:De};function Jr(r){let{inputs:t,backend:e}=r,{real:o,imag:n}=t,s=e.makeTensorInfo(o.shape,"complex64"),i=e.texData.get(s.dataId),a=De({inputs:{x:o},backend:e}),l=De({inputs:{x:n},backend:e});return i.complexTensorInfos={real:a,imag:l},s}var kF={kernelName:bu,backendName:"webgl",kernelFunc:Jr};var PS="return (a < 0.) ? b * a : a;",zS=`
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;function iX(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{alpha:s}=o,i=e.makeTensorInfo([],"float32",y.createScalarValue(s,"float32")),a=z().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new qo(zS,n.shape,i.shape):new To(PS,n.shape,i.shape),l=e.runWebGLProgram(a,[n,i],"float32");return e.disposeIntermediateTensorInfo(i),l}var EF={kernelName:Oi,backendName:"webgl",kernelFunc:iX};var MS="return (a < 0.) ? b * a : a;",BS=`
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;function aX(r){let{inputs:t,backend:e}=r,{x:o,alpha:n}=t,s=z().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new qo(BS,o.shape,n.shape):new To(MS,o.shape,n.shape);return e.runWebGLProgram(s,[o,n],"float32")}var $F={kernelName:ji,backendName:"webgl",kernelFunc:aX};var jo="if (isnan(x)) return x;";function ht({opSnippet:r,packedOpSnippet:t,cpuKernelImpl:e,dtype:o}){return({inputs:n,backend:s})=>{let{x:i}=n,a=s,l=o||i.dtype;if(a.shouldExecuteOnCPU([i])&&e!=null){let p=a.texData.get(i.dataId),m=e(p.values,l);return a.makeTensorInfo(i.shape,l,m)}let u=z().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&t!=null,c;return u?c=new Zr(i.shape,t):c=new ur(i.shape,r),a.runWebGLProgram(c,[i],l)}}function Ut({opSnippet:r,packedOpSnippet:t,checkOutOfBounds:e=!1,supportsComplex:o=!1,cpuKernelImpl:n,dtype:s}){return({inputs:i,backend:a})=>{let{a:l,b:u}=i,c=a;if(o&&l.dtype==="complex64"){let h=c.texData.get(l.dataId),g=c.texData.get(u.dataId),[d,x]=[[h.complexTensorInfos.real,g.complexTensorInfos.real],[h.complexTensorInfos.imag,g.complexTensorInfos.imag]].map(S=>{let[w,T]=S,$={dataId:w.dataId,dtype:w.dtype,shape:l.shape},R={dataId:T.dataId,dtype:T.dtype,shape:u.shape},F=new To(r,l.shape,u.shape);return c.runWebGLProgram(F,[$,R],Le(w.dtype,T.dtype))}),b=Jr({inputs:{real:d,imag:x},backend:c});return c.disposeIntermediateTensorInfo(d),c.disposeIntermediateTensorInfo(x),b}let p=s||Le(l.dtype,u.dtype);if((l.dtype==="string"||u.dtype==="string"||c.shouldExecuteOnCPU([l,u]))&&n!=null){let h=c.texData.get(l.dataId).values,g=c.texData.get(u.dataId).values,d=l.dtype==="string"?I.fromUint8ToStringArray(h):h,x=l.dtype==="string"?I.fromUint8ToStringArray(g):g,[b,S]=n(l.shape,u.shape,d,x,p),w=c.makeTensorInfo(S,p),T=c.texData.get(w.dataId);return T.values=b,w}let m=z().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&t!=null,f;return m?f=new qo(t,l.shape,u.shape,e):f=new To(r,l.shape,u.shape),c.runWebGLProgram(f,[l,u],p)}}function li(r,t=!1){if(r==="linear")return t?CF:dF;if(r==="relu")return t?NF:xF;if(r==="elu")return t?SF:gF;if(r==="relu6")return t?vF:yF;if(r==="prelu")return t?BS:MS;if(r==="leakyrelu")return t?zS:PS;if(r==="sigmoid")return t?TF:bF;throw new Error(`Activation ${r} has not been implemented for the WebGL backend.`)}var Zp=class{constructor(t,e,o,n=!1,s=!1,i=!1,a=null,l=!1,u=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=o,this.enableShapeUniforms=Kt(this.outputShape.length);let c=n?t[1]:t[2],p=Math.ceil(c/2),m=n?"i * 2, rc.y":"rc.y, i * 2",f=s?"rc.z, i * 2":"i * 2, rc.z",h=n?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],g=s?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"],d="",x="";a&&(l?d=`vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${a}
        }`:u?d=`vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${a}
        }`:d=`vec4 activation(vec4 x) {
          ${a}
        }`,x="result = activation(result);");let b=i?"result += getBiasAtOutCoords();":"";i&&this.variableNames.push("bias"),l&&this.variableNames.push("preluActivationWeights"),u&&this.variableNames.push("leakyreluAlpha");let S="rc.x",w="rc.x";t[0]<e[0]?S=`imod(rc.x, ${t[0]})`:e[0]<t[0]&&(w=`imod(rc.x, ${e[0]})`),this.userCode=`
      ${d}
      // Don't use uniform for sharedDimensionPacked for performance.
      const float sharedDimension = ${p}.0;

      vec4 dot2x2ARowBCol(ivec3 rc) {
        vec4 result = vec4(0);
        int batchA = ${S};
        int batchB = ${w};
        for (int i = 0; i < ${p}; i++) {
          vec4 a = getMatrixA(batchA, ${m});
          vec4 b = getMatrixB(batchB, ${f});

          // These swizzled products need to be separately added.
          // See: https://github.com/tensorflow/tfjs/issues/1735
          result += (${h[0]} * ${g[0]});
          result += (${h[1]} * ${g[1]});
        }
        return result;
      }

      void main() {
        ivec3 rc = getOutputCoords();
        vec4 result = dot2x2ARowBCol(rc);

        ${b}

        ${x}

        setOutput(result);
      }
    `}};var VS={REAL:"return areal * breal - aimag * bimag;",IMAG:"return areal * bimag + aimag * breal;"},$h=class{constructor(t,e,o){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=I.assertAndGetBroadcastShape(e,o),this.userCode=`
      float binaryOpComplex(
          float areal, float aimag, float breal, float bimag) {
        ${t}
      }

      void main() {
        float areal = getARealAtOutCoords();
        float aimag = getAImagAtOutCoords();
        float breal = getBRealAtOutCoords();
        float bimag = getBImagAtOutCoords();
        setOutput(binaryOpComplex(areal, aimag, breal, bimag));
      }
    `}};var AF="return a * b;";function Ah(r){let{inputs:t,backend:e}=r,{a:o,b:n}=t,s=I.upcastType(o.dtype,n.dtype);if(o.dtype==="complex64"){let a=e.texData.get(o.dataId),l=e.texData.get(n.dataId),u=new $h(VS.REAL,o.shape,n.shape),c=new $h(VS.IMAG,o.shape,n.shape),p=[{dataId:a.complexTensorInfos.real.dataId,dtype:a.complexTensorInfos.real.dtype,shape:o.shape},{dataId:a.complexTensorInfos.imag.dataId,dtype:a.complexTensorInfos.imag.dtype,shape:o.shape},{dataId:l.complexTensorInfos.real.dataId,dtype:l.complexTensorInfos.real.dtype,shape:n.shape},{dataId:l.complexTensorInfos.imag.dataId,dtype:l.complexTensorInfos.imag.dtype,shape:n.shape}],m=e.runWebGLProgram(u,p,"float32"),f=e.runWebGLProgram(c,p,"float32"),h=Jr({inputs:{real:m,imag:f},backend:e});return e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(f),h}if(e.shouldExecuteOnCPU([o,n])){let a=e.texData.get(o.dataId),l=e.texData.get(n.dataId),[u,c]=VR(o.shape,n.shape,a.values,l.values,s),p=e.makeTensorInfo(c,s),m=e.texData.get(p.dataId);return m.values=u,p}let i;return z().getBool("WEBGL_PACK_BINARY_OPERATIONS")?i=new qo(AF,o.shape,n.shape):i=new To(AF,o.shape,n.shape),e.runWebGLProgram(i,[o,n],s)}var DF={kernelName:Ns,backendName:"webgl",kernelFunc:Ah};function RF(r,t,e){let o=[Va(r.shape),...Ga(r.shape)],n={dtype:r.dtype,shape:o,dataId:r.dataId},s=[Va(t),...Ga(t)],i=new Xp(s,o),a=!0,l=[o],u=e.runWebGLProgram(i,[n],r.dtype,l,a);return{dataId:u.dataId,shape:t,dtype:u.dtype}}function Q(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{shape:s}=o,i=e,a=y.sizeFromShape(n.shape),l=y.inferFromImplicitShape(s,a),u=y.sizeFromShape(l);y.assert(a===u,()=>`The new shape (${l}) has ${u} elements and the old shape (${n.shape}) has ${a} elements. The new shape and old shape must have the same number of elements.`);let c=i.texData.get(n.dataId);return c.isPacked&&!Zl(n.shape,l)&&!(c.texture!==null&&Zl(c.shape,l))?RF(n,l,i):(i.incRef(n.dataId),{dataId:n.dataId,shape:l,dtype:n.dtype})}var FF={kernelName:Yi,backendName:"webgl",kernelFunc:Q};var Dh=class{constructor(t,e){this.variableNames=["x"];let{windowSize:o,batchSize:n,inSize:s,outSize:i}=t;this.outputShape=[n,i];let a=Math.floor(o/4)*4,l=o%4,u="sumValue += dot(values, ones);";if(e!=null){let p=1/e;u=`sumValue += dot(values * ${y.isInt(p)?p.toPrecision(2):p}, ones);`}let c="";s%o>0&&(c=`
        if (inIdx < 0 || inIdx >= ${s}) {
          return 0.0;
        }
      `),this.userCode=`
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${c}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${o};

        float sumValue = 0.0;

        for (int i = 0; i < ${a}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${u}
        }

        int inIdx = inOffset + ${a};
        if (${l===1}) {
          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);

          ${u}
        } else if (${l===2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1), 0.0, 0.0);

          ${u}
        } else if (${l===3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2), 0.0);

          ${u}
        }
        setOutput(sumValue);
      }
    `}};var _y=class{constructor(t,e){this.variableNames=["x"];let{windowSize:o,batchSize:n,inSize:s,outSize:i}=t;this.outputShape=[n,i];let a="0.0",l="";e==="prod"?a="1.0":e==="min"?(a="1.0 / 1e-20",l="min"):e==="max"&&(a="-1.0 / 1e-20",l="max");let u=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;e==="sum"?u="sumValue":e==="prod"?u="prodValue":e==="all"?u="allValue":e==="any"&&(u="anyValue");let c=Math.floor(o/4)*4,p=o%4,m=`
      if (${e==="sum"}) {
        sumValue += dot(values, ones);
      } else if (${e==="prod"}) {
        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);
        prodValue *= tmp[0] * tmp[1];
      } else {
        minMaxValue = ${l}(values, minMaxValue);
        if (${e==="min"} || ${e==="max"}) {
          minMaxValue = ${l}(values, minMaxValue);
          bvec4 isNaN = isnan(values);
          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {
            minMaxValue = vec4(NAN);
          }
        }
      }
    `,f="vec4";e==="all"?(a="1.0",m=`
        bool reducedAllValue = all(values);
        float floatedReducedAllValue = float(reducedAllValue);
        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);
      `,f="bvec4"):e==="any"&&(a="0.0",m=`
        bool reducedAnyValue = any(values);
        float floatedReducedAnyValue = float(reducedAnyValue);
        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);
      `,f="bvec4");let h="";s%o>0&&(h=`
        if (inIdx < 0 || inIdx >= ${s}) {
          return initializationValue;
        }
      `),this.userCode=`
      const float initializationValue = ${a};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${h}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${o};

        vec4 minMaxValue = vec4(${a});
        float prodValue = 1.0;
        float sumValue = 0.0;
        float allValue = 1.0;
        float anyValue = 0.0;

        for (int i = 0; i < ${c}; i += 4) {
          int inIdx = inOffset + i;
          ${f} values = ${f}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${m}
        }

        int inIdx = inOffset + ${c};
        if (${p===1}) {
          ${f} values = ${f}(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          ${m}
        } else if (${p===2}) {
          ${f} values = ${f}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          ${m}
        } else if (${p===3}) {
          ${f} values = ${f}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          ${m}
        }
        setOutput(${u});
      }
    `}};function uX(r){let t=[];for(;t.length===0||t[t.length-1].outSize!==1;){let e=t.length?t[t.length-1].outSize:r[1],o=I.computeOptimalWindowSize(e);t.push({inSize:e,windowSize:o,outSize:Math.ceil(e/o)})}return t}function fo(r,t,e,o){let n=uX(r.shape),s=r;for(let i=0;i<n.length;i++){let{inSize:a,windowSize:l,outSize:u}=n[i],c,p;e==="mean"?c=i===0?new Dh({windowSize:l,inSize:a,batchSize:r.shape[0],outSize:u},a):new Dh({windowSize:l,inSize:a,batchSize:r.shape[0],outSize:u}):c=new _y({windowSize:l,inSize:a,batchSize:r.shape[0],outSize:u},e),p=s,s=o.runWebGLProgram(c,[s],t),p.dataId!==r.dataId&&o.disposeIntermediateTensorInfo(p)}return s}var Oy=class{constructor(t,e){this.variableNames=["A"];let o=new Array(t.length);for(let i=0;i<o.length;i++)o[i]=t[e[i]];this.outputShape=o,this.rank=o.length;let n=It(this.rank),s=cX(e);this.userCode=`
    void main() {
      ${n} resRC = getOutputCoords();
      setOutput(getA(${s}));
    }
    `}};function cX(r){let t=r.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);let e=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],o=new Array(t);for(let n=0;n<r.length;n++)o[r[n]]=e[n];return o.join()}var Ly=class{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;let o=new Array(t.length);for(let c=0;c<o.length;c++)o[c]=t[e[c]];if(this.outputShape=o,this.rank=o.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);let n=It(this.rank),s=OS("rc",this.rank),i=new Array(this.rank);for(let c=0;c<e.length;c++)i[e[c]]=s[c];let a=`vec2(${i.slice(-2).join()})`,l=`++${s[this.rank-1]} < ${o[this.rank-1]}`,u=`getChannel(getA(${i.join()}), ${a})`;this.userCode=`
    void main() {
      ${n} rc = getOutputCoords();
      vec4 result = vec4(0.);
      result[0] = ${u};
      if(${l}) {
        result[1] = ${u};
      }
      --${s[this.rank-1]};
      if(++${s[this.rank-2]} < ${o[this.rank-2]}) {
        result[2] = ${u};
        if(${l}) {
          result[3] = ${u};
        }
      }
      setOutput(result);
    }
    `}};function Wa(r,t,e){let o=z().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Ly(r.shape,t):new Oy(r.shape,t);return e.runWebGLProgram(o,[r],r.dtype)}function _F(r,t,e,o){let n=t,s=r.shape.length,i=y.parseAxisParam(n,r.shape),a=i,l=I.getAxesPermutation(a,s),u=l!=null,c=r;u&&(c=Wa(r,l,o),a=I.getInnerMostAxes(a.length,s)),I.assertAxesAreInnerMostDims("sum",a,s);let[p,m]=I.computeOutAndReduceShapes(c.shape,a),f=p;e&&(f=I.expandShapeToKeepDim(p,i));let h=y.sizeFromShape(m),d=y.sizeFromShape(r.shape)/h,x=Q({inputs:{x:c},attrs:{shape:[d,h]},backend:o}),b=hl(r.dtype),S=fo(x,b,"sum",o),w=Q({inputs:{x:S},attrs:{shape:f},backend:o});return o.disposeIntermediateTensorInfo(x),o.disposeIntermediateTensorInfo(S),u&&o.disposeIntermediateTensorInfo(c),w}function ru(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o;return _F(n,s,i,e)}var OF={kernelName:ra,backendName:"webgl",kernelFunc:ru};function pe(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{perm:s}=o,i=e,a=n.shape.length,l=new Array(a);for(let c=0;c<l.length;c++)l[c]=n.shape[s[c]];let u;if(i.shouldExecuteOnCPU([n])){let p=i.texData.get(n.dataId).values,m=tu(p,n.shape,n.dtype,s,l);u=i.makeTensorInfo(l,n.dtype);let f=i.texData.get(u.dataId);f.values=m}else u=Wa(n,s,i);return u}var LF={kernelName:wn,backendName:"webgl",kernelFunc:pe};var GS=1e3;function ou({a:r,b:t,transposeA:e,transposeB:o,backend:n,bias:s=null,preluActivationWeights:i=null,leakyreluAlpha:a=0,activation:l=null}){let u=r.shape.length,c=t.shape.length,p=e?r.shape[u-2]:r.shape[u-1],m=o?t.shape[c-1]:t.shape[c-2],f=e?r.shape[u-1]:r.shape[u-2],h=o?t.shape[c-2]:t.shape[c-1],g=r.shape.slice(0,-2),d=t.shape.slice(0,-2),x=y.sizeFromShape(g),b=y.sizeFromShape(d),w=no.assertAndGetBroadcastShape(r.shape.slice(0,-2),t.shape.slice(0,-2)).concat([f,h]);y.assert(p===m,()=>`Error in matMul: inner shapes (${p}) and (${m}) of Tensors with shapes ${r.shape} and ${t.shape} and transposeA=${e} and transposeB=${o} must match.`);let T=e?[x,p,f]:[x,f,p],$=o?[b,h,m]:[b,m,h],R=Q({inputs:{x:r},backend:n,attrs:{shape:T}}),F=Q({inputs:{x:t},backend:n,attrs:{shape:$}}),O=[R,F],P=Math.max(x,b),B=e?R.shape[1]:R.shape[2],V=s!=null,G=i!=null,H=l==="leakyrelu",W=l!=null?li(l,!0):null,j=V||G||H||W!=null,Z;if((f===1||h===1)&&B>GS&&j===!1){let J=R,et=F;e&&(J=pe({inputs:{x:R},backend:n,attrs:{perm:[0,2,1]}}),O.push(J)),o&&(et=pe({inputs:{x:F},backend:n,attrs:{perm:[0,2,1]}}),O.push(et));let rt=h!==1,at=h===1,it=J;rt&&(it=Q({inputs:{x:J},backend:n,attrs:{shape:[P,B,1]}}),O.push(it));let ct=h===1?2:1,lt=et;at&&(lt=Q({inputs:{x:et},backend:n,attrs:{shape:[P,1,B]}}),O.push(lt));let ft=Ah({inputs:{a:it,b:lt},backend:n});Z=ru({inputs:{x:ft},backend:n,attrs:{axis:ct,keepDims:!0}}),O.push(ft)}else{let J=Le(r.dtype,t.dtype),et=new Zp(T,$,[P,f,h],e,o,V,W,G,H),rt=[R,F];if(s!=null&&rt.push(s),G&&rt.push(i),H){let at=n.makeTensorInfo([],"float32",y.createScalarValue(a,"float32"));rt.push(at),O.push(at)}Z=n.runWebGLProgram(et,rt,J)}let q=Q({inputs:{x:Z},backend:n,attrs:{shape:w}});O.push(Z);for(let J of O)n.disposeIntermediateTensorInfo(J);return q}function pX(r){let{inputs:t,backend:e,attrs:o}=r,{a:n,b:s,bias:i,preluActivationWeights:a}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:p}=o;return ou({a:n,b:s,transposeA:l,transposeB:u,backend:e,bias:i,preluActivationWeights:a,leakyreluAlpha:p,activation:c})}var PF={kernelName:il,backendName:"webgl",kernelFunc:pX};var zF="return abs(x);";function mX(r){let{inputs:t,backend:e}=r,{x:o}=t;if(e.shouldExecuteOnCPU([o])&&o.dtype!=="complex64"){let s=e.texData.get(o.dataId),i=Ey(s.values);return e.makeTensorInfo(o.shape,o.dtype,i)}let n;return z().getBool("WEBGL_PACK_UNARY_OPERATIONS")?n=new Zr(o.shape,zF):n=new ur(o.shape,zF),e.runWebGLProgram(n,[o],o.dtype)}var MF={kernelName:gi,backendName:"webgl",kernelFunc:mX};var fX=Ue+`
  if (abs(x) > 1.) {
    return NAN;
  }
  return acos(x);
`,hX=ht({opSnippet:fX}),BF={kernelName:Yn,backendName:"webgl",kernelFunc:hX};var dX=Ue+`
  if (x < 1.0) return NAN;
return log(x + sqrt(x * x - 1.0));`,gX=ht({opSnippet:dX}),VF={kernelName:Zn,backendName:"webgl",kernelFunc:gX};var GF="return a + b;",xX=Ut({opSnippet:GF,packedOpSnippet:GF,supportsComplex:!0,cpuKernelImpl:CR}),WF={kernelName:Yo,backendName:"webgl",kernelFunc:xX};var Py=class{constructor(t,e){this.outputShape=[],this.outputShape=t,this.variableNames=e.map((s,i)=>`T${i}`);let o=[];this.variableNames.forEach(s=>{o.push(`float v${s} = get${s}AtOutCoords();`)});let n=this.variableNames.map(s=>`v${s}`).join(" + ");this.userCode=`
      void main() {
        ${o.join(`
        `)}

        float result = ${n};
        setOutput(result);
      }
    `}};var zy=class{constructor(t,e){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.variableNames=e.map((s,i)=>`T${i}`);let o=[];this.variableNames.forEach(s=>{o.push(`vec4 v${s} = get${s}AtOutCoords();`)});let n=this.variableNames.map(s=>`v${s}`).join(" + ");this.userCode=`
      void main() {
        ${o.join(`
        `)}

        vec4 result = ${n};
        setOutput(result);
      }
    `}};function My(r){let{inputs:t,backend:e}=r,o=t;if(o.length===1)return De({inputs:{x:o[0]},backend:e});if(o.length>z().get("WEBGL_MAX_TEXTURES_IN_SHADER")){let l=Math.floor(o.length/2),u=My({inputs:o.slice(0,l),backend:e}),c=My({inputs:o.slice(l),backend:e});return My({inputs:[u,c],backend:e})}let n=o.map(l=>l.dtype).reduce((l,u)=>Le(l,u)),s=o.map(l=>l.shape),a=z().getBool("WEBGL_PACK")?new zy(o[0].shape,s):new Py(o[0].shape,s);return e.runWebGLProgram(a,o,n)}var UF={kernelName:xi,backendName:"webgl",kernelFunc:My};function yX(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o,a=n.shape.length,l=y.parseAxisParam(s,n.shape),u=l,c=I.getAxesPermutation(u,a),p=n;c!=null&&(p=pe({inputs:{x:n},backend:e,attrs:{perm:c}}),u=I.getInnerMostAxes(u.length,a)),I.assertAxesAreInnerMostDims("all",u,a);let[m,f]=I.computeOutAndReduceShapes(p.shape,u),h=y.sizeFromShape(f),g=Q({inputs:{x:p},backend:e,attrs:{shape:[-1,h]}}),d=fo(g,g.dtype,"all",e),x;if(i){let b=I.expandShapeToKeepDim(m,l);x=Q({inputs:{x:d},backend:e,attrs:{shape:b}})}else x=Q({inputs:{x:d},backend:e,attrs:{shape:m}});return e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(d),c!=null&&e.disposeIntermediateTensorInfo(p),x}var HF={kernelName:fu,backendName:"webgl",kernelFunc:yX};function bX(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o,a=n.shape.length,l=y.parseAxisParam(s,n.shape),u=l,c=I.getAxesPermutation(u,a),p=n;c!=null&&(p=pe({inputs:{x:n},backend:e,attrs:{perm:c}}),u=I.getInnerMostAxes(u.length,a)),I.assertAxesAreInnerMostDims("any",u,a);let[m,f]=I.computeOutAndReduceShapes(p.shape,u),h=y.sizeFromShape(f),g=Q({inputs:{x:p},backend:e,attrs:{shape:[-1,h]}}),d=fo(g,g.dtype,"any",e),x;if(i){let b=I.expandShapeToKeepDim(m,l);x=Q({inputs:{x:d},backend:e,attrs:{shape:b}})}else x=Q({inputs:{x:d},backend:e,attrs:{shape:m}});return e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(d),c!=null&&e.disposeIntermediateTensorInfo(p),x}var KF={kernelName:hu,backendName:"webgl",kernelFunc:bX};var By=class{constructor(t,e,o){this.variableNames=["A"];let{windowSize:n,batchSize:s,outSize:i}=t;o||this.variableNames.push("bestIndicesA"),this.outputShape=[s,i];let a=e==="max"?">":"<",l=o?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${n};

        int bestIndex = inOffset;
        float bestValue = getA(batch, bestIndex);

        for (int i = 0; i < ${n}; i++) {
          int inIdx = ${l};
          float candidate = getA(batch, inIdx);
          if (candidate ${a} bestValue) {
            bestValue = candidate;
            bestIndex = inIdx;
          }
        }
        setOutput(float(bestIndex));
      }
    `}};var Vy=class{constructor(t,e,o,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,y.assert(t.length>2,()=>`Packed arg${o.charAt(0).toUpperCase()+o.slice(1)} supports only inputs with rank above 2.`);let s=t[t.length-1],i=Math.ceil(s/e);this.outputShape=t.slice(0,-1),i>1&&this.outputShape.push(i),n||this.variableNames.push("bestIndicesA");let a=this.outputShape,l=a.length,u=It(l),c=Ae("coords",l),p,m;if(i===1){m=l+1;let F=It(m);p=`
        ${F} sourceLocR = ${F}(${c.join()}, 0);
        ++${c[l-1]};
        ${F} sourceLocG = ${F}(${c.join()}, 0);
        ++${c[l-2]};
        ${F} sourceLocA = ${F}(${c.join()}, 0);
        --${c[l-1]};
        ${F} sourceLocB = ${F}(${c.join()}, 0);
        --${c[l-2]};`}else m=l,p=`
        ${u} sourceLocR = coords;
        ++${c[l-1]};
        ${u} sourceLocG = coords;
        ++${c[l-2]};
        ${u} sourceLocA = coords;
        --${c[l-1]};
        ${u} sourceLocB = coords;
        --${c[l-2]};`;let f=["x","y","z","w","u","v"].slice(0,m),h="."+f[m-1],g=f.map(F=>"int "+F),d=Ae("sourceLocR",m-1).concat("inIdx.r"),x=Ae("sourceLocG",m-1).concat("inIdx.g"),b=Ae("sourceLocB",m-1).concat("inIdx.b"),S=Ae("sourceLocA",m-1).concat("inIdx.a"),w=o==="max"?"greaterThan":"lessThan",T=n?"":`
          inIdx = round(vec4(getBestIndicesAChannel(${d.join()}),
                             getBestIndicesAChannel(${x.join()}),
                             getBestIndicesAChannel(${b.join()}),
                             getBestIndicesAChannel(${S.join()})));`,$=`vec4(
            getAChannel(${d.join()}),
            hasNextCol ? getAChannel(${x.join()}) : 0.,
            hasNextRow ? getAChannel(${b.join()}) : 0.,
            hasNextRow && hasNextCol ? getAChannel(${S.join()}) : 0.)`,R=n?"":`
      float getBestIndicesAChannel(${g.join()}) {
        return getChannel(getBestIndicesA(${f.join()}),
                                          vec2(${f.slice(-2).join()}));
      }`;this.userCode=`
      float getAChannel(${g.join()}) {
        return getChannel(getA(${f.join()}),
                               vec2(${f.slice(-2).join()}));
      }
      ${R}
      void main() {
        ${u} coords = getOutputCoords();
        bool hasNextCol = ${c[l-1]} < ${a[l-1]-1};
        bool hasNextRow = ${c[l-2]} < ${a[l-2]-1};
        ${p}
        ivec4 srcIdx = ivec4(sourceLocR${h}, sourceLocG${h},
          sourceLocB${h}, sourceLocA${h}) * ${e};
        ivec4 inIdx = srcIdx;
        vec4 bestIndex = vec4(inIdx);
        vec4 bestValue = ${$};

        for (int i = 0; i < ${e}; i++) {
          inIdx = srcIdx;
          ${T}
          vec4 candidate = ${$};
          bvec4 nan = isnan(candidate);
          bvec4 replace = bvec4(
            vec4(${w}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));

          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,
                           replace.y  ? candidate.y : bestValue.y,
                           replace.z  ? candidate.z : bestValue.z,
                           replace.w  ? candidate.w : bestValue.w);
          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));
          srcIdx++;
        }
        setOutput(bestIndex);
      }
    `}};function qF(r,t,e,o=null){let n=t.shape[0],s=t.shape[1];o!=null&&(n=o.shape[0],s=o.shape[1]);let i=I.computeOptimalWindowSize(s),a={windowSize:i,inSize:s,batchSize:n,outSize:Math.ceil(s/i)},l=new By(a,e,o==null),u=[t];o!=null&&u.push(o);let c=r.runWebGLProgram(l,u,"int32");if(c.shape[1]===1)return c;let p=qF(r,t,e,c);return r.disposeIntermediateTensorInfo(c),p}function jF(r,t,e,o=null){let n=o!=null?o.shape:t.shape,s=n[n.length-1],i=I.computeOptimalWindowSize(s),a=new Vy(n,i,e,o==null),l=o==null?[t]:[t,o],u=r.runWebGLProgram(a,l,"int32");if(u.shape.length===t.shape.length){let c=jF(r,t,e,u);return r.disposeIntermediateTensorInfo(u),c}return u}function Gy(r,t,e,o){let n=[e];if(I.assertAxesAreInnerMostDims("arg"+o.charAt(0).toUpperCase()+o.slice(1),n,t.shape.length),!z().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){let s=[],i=r.texData.get(t.dataId),a=i!==null&&i.isPacked,l=t;a&&(l=r.unpackTensor(t),s.push(l));let[u,c]=I.computeOutAndReduceShapes(l.shape,n),p=y.sizeFromShape(c),m=Q({inputs:{x:l},backend:r,attrs:{shape:[-1,p]}});s.push(m);let f=qF(r,m,o);s.push(f);let h=Q({inputs:{x:f},backend:r,attrs:{shape:u}});return s.forEach(g=>r.disposeIntermediateTensorInfo(g)),h}return jF(r,t,o)}function wX(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s}=o,i=y.parseAxisParam(s,n.shape),a=I.getAxesPermutation(i,n.shape.length),l=n,u=[];a!=null&&(l=pe({inputs:{x:n},backend:e,attrs:{perm:a}}),u.push(l),i=I.getInnerMostAxes(i.length,l.shape.length)),I.assertAxesAreInnerMostDims("argMax",[i[0]],l.shape.length);let c=Gy(e,l,i[0],"max");return u.forEach(p=>e.disposeIntermediateTensorInfo(p)),c}var XF={kernelName:yi,backendName:"webgl",kernelFunc:wX};function CX(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s}=o,i=y.parseAxisParam(s,n.shape),a=I.getAxesPermutation(i,n.shape.length),l=n,u=[];a!=null&&(l=pe({inputs:{x:n},backend:e,attrs:{perm:a}}),u.push(l),i=I.getInnerMostAxes(i.length,l.shape.length)),I.assertAxesAreInnerMostDims("argMin",[i[0]],l.shape.length);let c=Gy(e,l,i[0],"min");return u.forEach(p=>e.disposeIntermediateTensorInfo(p)),c}var YF={kernelName:bi,backendName:"webgl",kernelFunc:CX};var SX=Ue+`
  if (abs(x) > 1.) {
    return NAN;
  }
  return asin(x);
`,NX=ht({opSnippet:SX}),ZF={kernelName:Jn,backendName:"webgl",kernelFunc:NX};var vX=Ue+"return log(x + sqrt(x * x + 1.0));",TX=ht({opSnippet:vX}),JF={kernelName:Qn,backendName:"webgl",kernelFunc:TX};var IX=Ue+`
  return atan(x);
`,kX=ht({opSnippet:IX}),QF={kernelName:ts,backendName:"webgl",kernelFunc:kX};var EX=Yp+`
  return atan(a, b);
`,$X=`
  vec4 result = atan(a, b);
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  `+mo+`
  return result;
`,AX=Ut({opSnippet:EX,packedOpSnippet:$X}),t_={kernelName:rs,backendName:"webgl",kernelFunc:AX};var DX=Ue+`
  if ((x < -1.0) || (x > 1.0)) return NAN;
return (log(1.0 + x) - log(1.0 - x)) / 2.0;`,RX=ht({opSnippet:DX}),e_={kernelName:es,backendName:"webgl",kernelFunc:RX};var hn=class{constructor(t,e,o,n=!1,s=!1){if(this.variableNames=["x"],e==="avg"&&o)throw new Error("Cannot compute positions for average pool.");let i=t.filterWidth,a=t.strideHeight,l=t.strideWidth,u=t.dilationHeight,c=t.dilationWidth,p=t.effectiveFilterHeight,m=t.effectiveFilterWidth,f=t.padInfo.top,h=t.padInfo.left;this.outputShape=t.outShape;let g=e==="avg",d=`((batch  * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + d`,x=`(xR * ${t.inWidth} + xC) * ${t.inChannels} + d`,b="0.0";if(g||(b="-1.0 / 1e-20"),o){let F=">=";this.userCode=`
        const ivec2 strides = ivec2(${a}, ${l});
        const ivec2 pads = ivec2(${f}, ${h});

        void main() {
          ivec4 coords = getOutputCoords();
          int batch = coords[0];
          int d = coords[3];

          ivec2 xRCCorner = coords.yz * strides - pads;
          int xRCorner = xRCCorner.x;
          int xCCorner = xRCCorner.y;

          // max/min x(?, ?, d) to get y(yR, yC, d).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;
          float avgValue = 0.0;

          for (int wR = 0; wR < ${p};
              wR += ${u}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${m};
                wC += ${c}) {
              int xC = xCCorner + wC;

              if (xC < 0 || xC >= ${t.inWidth}) {
                continue;
              }

              float value = getX(batch, xR, xC, d);

              // If a min / max value has already been found, use it. If not,
              // use the current value.
              float currMinMaxValue = mix(
                  value, minMaxValue, minMaxValueFound);
              if (value ${F} currMinMaxValue) {
                minMaxValue = value;
                minMaxValueFound = 1.0;
                minMaxPosition = ${n?s?d:x:`wR * ${m} + wC`};
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;return}let S="max",w=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;e==="avg"&&(w="avgValue / max(count, 1.0)");let T=Math.floor(i/4)*4,$=i%4,R=`
      if (${g}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${S}(values, minMaxValue);
      }
    `;this.userCode=`
      const ivec2 strides = ivec2(${a}, ${l});
      const ivec2 pads = ivec2(${f}, ${h});
      const float initializationValue = ${b};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xR, int xC, int d) {
        if (xC < 0 || xC >= ${t.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xR, xC, d);
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d = coords[3];

        ivec2 xRCCorner = coords.yz * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // max/min x(?, ?, d) to get y(yR, yC, d).
        // ? = to be determined
        vec4 minMaxValue = vec4(${b});
        float avgValue = 0.0;
        count = 0.0;

        for (int wR = 0; wR < ${p};
            wR += ${u}) {
          int xR = xRCorner + wR;

          if (xR < 0 || xR >= ${t.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${T}; wC += 4) {
            int xC = xCCorner + wC * ${c};

            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${c}, d),
              getValue(batch, xR, xC + 2 * ${c}, d),
              getValue(batch, xR, xC + 3 * ${c}, d)
            );

            ${R}
          }

          int xC = xCCorner + ${T};
          if (${$===1}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              initializationValue,
              initializationValue,
              initializationValue
            );

            ${R}
          } else if (${$===2}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${c}, d),
              initializationValue,
              initializationValue
            );

            ${R}
          } else if (${$===3}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${c}, d),
              getValue(batch, xR, xC + 2 * ${c}, d),
              initializationValue
            );

            ${R}
          }
        }
        setOutput(${w});
      }
    `}},Ua=class{constructor(t,e,o,n=!1,s=!1){if(this.variableNames=["x"],e==="avg"&&o)throw new Error("Cannot compute positions for average pool.");let i=t.filterWidth,a=t.strideDepth,l=t.strideHeight,u=t.strideWidth,c=t.dilationDepth,p=t.dilationHeight,m=t.dilationWidth,f=t.effectiveFilterDepth,h=t.effectiveFilterHeight,g=t.effectiveFilterWidth,d=t.padInfo.front,x=t.padInfo.top,b=t.padInfo.left;this.outputShape=t.outShape;let S=e==="avg",w="0.0";if(S||(w="-1.0 / 1e-20"),o){let P=">=";this.userCode=`
        const ivec3 strides =
            ivec3(${a}, ${l}, ${u});
        const ivec3 pads = ivec3(${d}, ${x}, ${b});

        void main() {
          ivec5 coords = getOutputCoords();
          int batch = coords.x;
          int ch = coords.u;

          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
          int xDCorner = xCorner.x;
          int xRCorner = xCorner.y;
          int xCCorner = xCorner.z;

          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;

          for (int wD = 0; wD < ${f};
              wD += ${c}) {
            int xD = xDCorner + wD;

            if (xD < 0 || xD >= ${t.inDepth}) {
              continue;
            }

            for (int wR = 0; wR < ${h};
                wR += ${p}) {
              int xR = xRCorner + wR;

              if (xR < 0 || xR >= ${t.inHeight}) {
                continue;
              }

              for (int wC = 0; wC < ${g};
                  wC += ${m}) {
                int xC = xCCorner + wC;

                if (xC < 0 || xC >= ${t.inWidth}) {
                  continue;
                }

                float value = getX(batch, xD, xR, xC, ch);

                // If a min / max value has already been found, use it. If not,
                // use the current value.
                float currMinMaxValue = mix(
                    value, minMaxValue, minMaxValueFound);
                if (value ${P} currMinMaxValue) {
                  minMaxValue = value;
                  minMaxValueFound = 1.0;
                  minMaxPosition = ${n?s?`(((batch * ${t.inDepth} + xD) * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`((xD * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`wD * ${h} * ${g} +
                      wR * ${g} + wC`};
                }
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;return}let T="max",$=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;e==="avg"&&($="avgValue / max(count, 1.0)");let R=Math.floor(i/4)*4,F=i%4,O=`
      if (${S}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${T}(values, minMaxValue);
      }
    `;this.userCode=`
      const ivec3 strides =
        ivec3(${a}, ${l}, ${u});
      const ivec3 pads = ivec3(${d}, ${x}, ${b});
      const float initializationValue = ${w};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xD, int xR, int xC, int ch) {
        if (xC < 0 || xC >= ${t.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xD, xR, xC, ch);
      }

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xDCorner = xCorner.x;
        int xRCorner = xCorner.y;
        int xCCorner = xCorner.z;

        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).
        // ? = to be determined
        vec4 minMaxValue = vec4(${w});
        float avgValue = 0.0;
        count = 0.0;

        for (int wD = 0; wD < ${f};
            wD += ${c}) {
          int xD = xDCorner + wD;

          if (xD < 0 || xD >= ${t.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${h};
            wR += ${p}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${R}; wC += 4) {
              int xC = xCCorner + wC * ${m};

              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${m}, ch),
                getValue(batch, xD, xR, xC + 2 * ${m}, ch),
                getValue(batch, xD, xR, xC + 3 * ${m}, ch)
              );

              ${O}
            }

            int xC = xCCorner + ${R};
            if (${F===1}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                initializationValue,
                initializationValue,
                initializationValue
              );

              ${O}
            } else if (${F===2}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${m}, ch),
                initializationValue,
                initializationValue
              );

              ${O}
            } else if (${F===3}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${m}, ch),
                getValue(batch, xD, xR, xC + 2 * ${m}, ch),
                initializationValue
              );

              ${O}
            }
          }
        }
        setOutput(${$});
      }
    `}};function FX(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t;Wn(n,"avgPool");let{filterSize:s,strides:i,pad:a,dimRoundingMode:l}=o,u=1;y.assert(I.eitherStridesOrDilationsAreOne(i,u),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${u}'`);let c=I.computePool2DInfo(n.shape,s,i,u,a,l);if(c.filterWidth===1&&c.filterHeight===1&&y.arraysEqual(c.inShape,c.outShape))return De({inputs:{x:n},backend:e});let p=new hn(c,"avg",!1);return e.runWebGLProgram(p,[n],"float32")}var r_={kernelName:wi,backendName:"webgl",kernelFunc:FX};function _X(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{filterSize:s,strides:i,pad:a,dimRoundingMode:l,dataFormat:u}=o,c=[1,1,1],p=I.computePool3DInfo(n.shape,s,i,c,a,l,u),m=new Ua(p,"avg",!1);return e.runWebGLProgram(m,[n],"float32")}var o_={kernelName:Ci,backendName:"webgl",kernelFunc:_X};var Wy=class{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;let e=t.filterHeight,o=t.filterWidth,n=t.strideHeight,s=t.strideWidth,i=t.dilationHeight,a=t.dilationWidth,l=t.effectiveFilterHeight,u=t.effectiveFilterWidth,c=l-1-t.padInfo.top,p=u-1-t.padInfo.left,m=1/(e*o);this.userCode=`
      const ivec2 pads = ivec2(${c}, ${p});
      const float avgMultiplier = float(${m});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${l};
            wR += ${i}) {
          float dyR = float(dyRCorner + wR) / ${n}.0;

          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${u};
            wC+= ${a}) {
            float dyC = float(dyCCorner + wC) / ${s}.0;

            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);

            dotProd += dyValue * avgMultiplier;
          }
        }
        setOutput(dotProd);
      }
    `}},Uy=class{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;let e=t.filterDepth,o=t.filterHeight,n=t.filterWidth,s=t.strideDepth,i=t.strideHeight,a=t.strideWidth,l=t.dilationDepth,u=t.dilationHeight,c=t.dilationWidth,p=t.effectiveFilterDepth,m=t.effectiveFilterHeight,f=t.effectiveFilterWidth,h=p-1-t.padInfo.front,g=m-1-t.padInfo.top,d=f-1-t.padInfo.left,x=1/(e*o*n);this.userCode=`
      const ivec3 pads = ivec3(${h}, ${g}, ${d});
      const float avgMultiplier = float(${x});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${p};
            wD += ${l}) {
          float dyD = float(dyDCorner + wD) / ${s}.0;

          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${m};
              wR += ${u}) {
            float dyR = float(dyRCorner + wR) / ${i}.0;

            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${f};
                wC += ${c}) {
              float dyC = float(dyCCorner + wC) / ${a}.0;

              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);

              dotProd += dyValue * avgMultiplier;
            }
          }
        }
        setOutput(dotProd);
      }
    `}};function OX(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s}=t,i=s,{filterSize:a,strides:l,pad:u,dimRoundingMode:c}=o,p=[1,1,1],m=I.computePool3DInfo(i.shape,a,l,p,u,c),f=new Uy(m);return e.runWebGLProgram(f,[n],i.dtype)}var n_={kernelName:gu,backendName:"webgl",kernelFunc:OX};function LX(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s}=t,i=s;Wn([n,s],"avgPoolGrad");let{filterSize:a,strides:l,pad:u}=o,c=I.computePool2DInfo(i.shape,a,l,1,u),p=new Wy(c);return e.runWebGLProgram(p,[n],i.dtype)}var s_={kernelName:du,backendName:"webgl",kernelFunc:LX};function PX(r){let{inputs:t,backend:e,attrs:o}=r,{a:n,b:s}=t,{transposeA:i,transposeB:a}=o;return ou({a:n,b:s,transposeA:i,transposeB:a,backend:e})}var i_={kernelName:Si,backendName:"webgl",kernelFunc:PX};var Hy=class{constructor(t,e,o,n,s,i){this.outputShape=[],this.variableNames=["x","mean","variance"],I.assertAndGetBroadcastShape(t,e),I.assertAndGetBroadcastShape(t,o);let a="0.0";n!=null&&(I.assertAndGetBroadcastShape(t,n),this.variableNames.push("offset"),a="getOffsetAtOutCoords()");let l="1.0";s!=null&&(I.assertAndGetBroadcastShape(t,s),this.variableNames.push("scale"),l="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`
      void main() {
        float x = getXAtOutCoords();
        float mean = getMeanAtOutCoords();
        float variance = getVarianceAtOutCoords();
        float offset = ${a};
        float scale = ${l};
        float inv = scale * inversesqrt(variance + float(${i}));
        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));
      }
    `}};var Ky=class{constructor(t,e,o,n,s,i){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],I.assertAndGetBroadcastShape(t,e),I.assertAndGetBroadcastShape(t,o);let a="vec4(0.0)";n!=null&&(I.assertAndGetBroadcastShape(t,n),this.variableNames.push("offset"),a="getOffsetAtOutCoords()");let l="vec4(1.0)";s!=null&&(I.assertAndGetBroadcastShape(t,s),this.variableNames.push("scale"),l="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`
      void main() {
        vec4 offset = ${a};
        vec4 scale = ${l};

        vec4 x = getXAtOutCoords();
        vec4 mean = getMeanAtOutCoords();
        vec4 variance = getVarianceAtOutCoords();

        vec4 inv = scale * inversesqrt(variance + vec4(${i}));

        setOutput((x - mean) * inv + offset);
      }
    `}};var zX=({inputs:r,backend:t,attrs:e})=>{let{x:o,mean:n,variance:s,offset:i,scale:a}=r;y.assert(n.shape.length===s.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),y.assert(i==null||n.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),y.assert(a==null||n.shape.length===a.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let{varianceEpsilon:l}=e;l==null&&(l=.001);let u=[o,n,s],c=null;i!=null&&(c=i.shape,u.push(i));let p=null;a!=null&&(p=a.shape,u.push(a));let m=z().getBool("WEBGL_PACK_NORMALIZATION")?new Ky(o.shape,n.shape,s.shape,c,p,l):new Hy(o.shape,n.shape,s.shape,c,p,l);return t.runWebGLProgram(m,u,u[0].dtype)},a_={kernelName:Fi,backendName:"webgl",kernelFunc:zX};var qy=class{constructor(t){this.variableNames=["source"],this.outputShape=t,this.rank=t.length;let e=It(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];let o=MX(this.rank),n,s=t.map((i,a)=>`sourceLoc.${WS[a]} = start[${a}] + coords.${WS[a]};`);n=`
        ${e} sourceLoc;
        ${e} coords = getOutputCoords();
        ${s.join(`
`)}
      `,this.userCode=`
      void main() {
        ${n}
        setOutput(getSource(${o}));
      }
    `}},WS=["x","y","z","w","u","v"];function MX(r){if(r===1)return"sourceLoc";if(r<=6)return WS.slice(0,r).map(t=>"sourceLoc."+t).join(",");throw Error(`Slicing for rank ${r} is not yet supported`)}var jy=class{constructor(t){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.rank=t.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];let e=It(this.rank),o=Ae("coords",this.rank),n=Ae("sourceLoc",this.rank),s=this.rank===1?"sourceLoc":`vec2(${n.slice(-2).join()})`,i=`getChannel(getSource(${n.join()}), ${s})`,a=`
      result.x = ${i};
      if (++${o[this.rank-1]} < ${t[this.rank-1]}) {
        ++${n[this.rank-1]};
        result.y = ${i};
        --${n[this.rank-1]};
      }
    `,l=this.rank===1?"":`
      --${o[this.rank-1]};
      if (++${o[this.rank-2]} < ${t[this.rank-2]}) {
        ++${n[this.rank-2]};
        result.z = ${i};
        if (++${o[this.rank-1]} < ${t[this.rank-1]}) {
          ++${n[this.rank-1]};
          result.w = ${i};
        }
      }
    `,u=this.rank<=4?`sourceLoc = coords +
            ${e}(${t.map((c,p)=>`start[${p}]`).join()});`:t.map((c,p)=>`${n[p]} = ${o[p]} + start[${p}];`).join(`
`);this.userCode=`
      void main() {
        ${e} coords = getOutputCoords();
        ${e} sourceLoc;
        ${u}
        vec4 result = vec4(0.);
        ${a}
        ${l}
        setOutput(result);
      }
    `}};function BX(r,t,e,o){let n=o.texData.get(r.dataId),s=o.makeTensorInfo(e,r.dtype),i=o.texData.get(s.dataId);Object.assign(i,n),i.refCount=1,i.shape=e,i.dtype=r.dtype;let a=Ze.computeFlatOffset(t,y.computeStrides(r.shape));n.slice&&(a+=n.slice.flatOffset),i.slice={flatOffset:a,origDataId:n.slice&&n.slice.origDataId||r.dataId};let l=o.dataRefCount.get(i.slice.origDataId)||1;return o.dataRefCount.set(i.slice.origDataId,l+1),s}function dn(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{begin:s,size:i}=o,[a,l]=Ze.parseSliceParams(n,s,i);if(Ze.assertParamsValid(n,a,l),y.sizeFromShape(l)===0)return e.makeTensorInfo(l,n.dtype,[]);if(e.shouldExecuteOnCPU([n])||n.dtype==="string"){let p=e.texData.get(n.dataId),m=JR(p.values,a,l,n.shape,n.dtype);return e.makeTensorInfo(l,n.dtype,m)}let{isPacked:u}=e.texData.get(n.dataId),c=Ze.isSliceContinous(n.shape,a,l);if(u||!c){let p=z().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new jy(l):new qy(l),m=[a];return e.runWebGLProgram(p,[n],n.dtype,m)}return e.uploadToGPU(n.dataId),BX(n,a,l,e)}var l_={kernelName:ea,backendName:"webgl",kernelFunc:dn};var VX=r=>{let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{blockShape:s,crops:i}=o;y.assert(n.shape.length<=4,()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");let a=s.reduce((b,S)=>b*S),l=I.getReshaped(n.shape,s,a),u=I.getPermuted(l.length,s.length),c=I.getReshapedPermuted(n.shape,s,a),p=I.getSliceBeginCoords(i,s.length),m=I.getSliceSize(c,i,s.length),f=[],h=Q({inputs:{x:n},backend:e,attrs:{shape:l}}),g=pe({inputs:{x:h},backend:e,attrs:{perm:u}}),d=Q({inputs:{x:g},backend:e,attrs:{shape:c}}),x=dn({inputs:{x:d},backend:e,attrs:{begin:p,size:m}});return f.push(h),f.push(g),f.push(d),f.forEach(b=>e.disposeIntermediateTensorInfo(b)),x},u_={kernelName:Ni,backendName:"webgl",kernelFunc:VX};function GX(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,weights:s}=t,{size:i}=o,a=e.readSync(n.dataId),l=e.readSync(s.dataId),u=ky(a,l,s.dtype,s.shape,i);return e.makeTensorInfo([i],s.dtype,u)}var c_={kernelName:xu,backendName:"webgl",kernelFunc:GX};function WX(r){let{inputs:t,backend:e}=r,{s0:o,s1:n}=t,s=e.readSync(o.dataId),i=e.readSync(n.dataId),a=I.assertAndGetBroadcastShape(Array.from(s),Array.from(i));return e.makeTensorInfo([a.length],"int32",Int32Array.from(a))}var p_={kernelName:yu,backendName:"webgl",kernelFunc:WX};var UX="return float(a != b);",US=Ut({opSnippet:UX,cpuKernelImpl:WR,dtype:"bool"}),m_={kernelName:nl,backendName:"webgl",kernelFunc:US};function ui(r){let{inputs:t,backend:e}=r,{input:o}=t,n=e.texData.get(o.dataId);return De({inputs:{x:n.complexTensorInfos.real},backend:e})}var f_={kernelName:Zu,backendName:"webgl",kernelFunc:ui};var HX="return float(int(x));";function h_(r,t){let e=new ur(r.shape,HX),o=t.runWebGLProgram(e,[r],"int32");return{dataId:o.dataId,shape:o.shape,dtype:o.dtype}}function HS(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{dtype:s}=o;if(s==="complex64"){if(n.dtype==="complex64")return De({inputs:{x:n},backend:e});let i=ne(n.shape),a=HS({inputs:{x:n},backend:e,attrs:{dtype:"float32"}}),l=Jr({inputs:{real:a,imag:i},backend:e});return i.dispose(),e.disposeIntermediateTensorInfo(a),l}if(n.dtype==="complex64"){let i=ui({inputs:{input:n},backend:e}),a=HS({inputs:{x:i},backend:e,attrs:{dtype:s}});return e.disposeIntermediateTensorInfo(i),a}if(!y.hasEncodingLoss(n.dtype,s)){let i=De({inputs:{x:n},backend:e});return{dataId:i.dataId,shape:i.shape,dtype:s}}if(e.shouldExecuteOnCPU([n])){let i=e.texData.get(n.dataId).values,[a,l,u]=NR(i,n.shape,n.dtype,s);return e.makeTensorInfo(a,l,u)}if(s==="int32")return h_(n,e);if(s==="bool"){let i=e.makeTensorInfo([],"bool",y.getTypedArrayFromDType("bool",1)),l=US({inputs:{a:n,b:i},backend:e});return e.disposeIntermediateTensorInfo(i),l}throw new Error(`Error in Cast: failed to cast ${n.dtype} to ${s}`)}var d_={kernelName:xn,backendName:"webgl",kernelFunc:HS};var g_="return ceil(x);",KX=ht({opSnippet:g_,packedOpSnippet:g_,cpuKernelImpl:vR}),x_={kernelName:os,backendName:"webgl",kernelFunc:KX};var Xy=class{constructor(t){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=t,this.userCode=`

      void main() {
        float value = getAAtOutCoords();
        if (isnan(value)) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, minVal, maxVal));
      }
    `}};var Yy=class{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=t,this.userCode=`
      void main() {
        vec4 value = getAAtOutCoords();

        if (any(isnan(value))) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));
      }
    `}};function qX(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{clipValueMin:s,clipValueMax:i}=o,a;z().getBool("WEBGL_PACK_CLIP")?a=new Yy(n.shape):a=new Xy(n.shape);let l=[[s],[i]];return e.runWebGLProgram(a,[n],n.dtype,l)}var y_={kernelName:ns,backendName:"webgl",kernelFunc:qX};var Zy=class{constructor(t){this.variableNames=["real","imag"],this.outputShape=t,this.userCode=`
      void main() {
        float re = abs(getRealAtOutCoords());
        float im = abs(getImagAtOutCoords());
        float mx = max(re, im);

        // sadly the length function in glsl is not underflow-safe
        // (at least not on Intel GPUs). So the safe solution is
        // to ensure underflow-safety in all cases.
        setOutput(
          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))
        );
      }
    `}};function b_(r,t){return{dataId:t.dataId,dtype:t.dtype,shape:r.shape}}function jX(r){let{inputs:t,backend:e}=r,{x:o}=t,n=e.texData.get(o.dataId),s=new Zy(o.shape),i=[b_(o,n.complexTensorInfos.real),b_(o,n.complexTensorInfos.imag)];return e.runWebGLProgram(s,i,i[0].dtype)}var w_={kernelName:vi,backendName:"webgl",kernelFunc:jX};var Jy=class{constructor(t){this.outputShape=[],this.outputShape=I.computeOutShape(t,1),this.variableNames=t.map((i,a)=>`T${a}`);let e=new Array(t.length-1);e[0]=t[0][1];for(let i=1;i<e.length;i++)e[i]=e[i-1]+t[i][1];let o=[`if (yC < ${e[0]}) setOutput(getT0(yR, yC));`];for(let i=1;i<e.length;i++){let a=e[i-1];o.push(`else if (yC < ${e[i]}) setOutput(getT${i}(yR, yC-${a}));`)}let n=e.length,s=e[e.length-1];o.push(`else setOutput(getT${n}(yR, yC-${s}));`),this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int yR = coords.x;
        int yC = coords.y;

        ${o.join(`
        `)}
      }
    `}};var tb=class{constructor(t,e){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=I.computeOutShape(t,e);let o=this.outputShape,n=o.length,s=It(n),i=Ae("coords",n),a=["x","y","z","w","u","v"].slice(0,n);this.variableNames=t.map((g,d)=>`T${d}`);let l=new Array(t.length-1);l[0]=t[0][e];for(let g=1;g<l.length;g++)l[g]=l[g-1]+t[g][e];let u=a[e],c=a.slice(-2),p=a.join(),m=`if (${u} < ${l[0]}) {
        return getChannel(
            getT0(${p}), vec2(${c.join()}));
        }`;for(let g=1;g<l.length;g++){let d=l[g-1];m+=`
        if (${u} < ${l[g]}  && ${u} >= ${l[g-1]}) {
          return getChannel(
            getT${g}(${Qy(a,u,d)}),
            vec2(${Qy(c,u,d)}));
        }`}let f=l.length,h=l[l.length-1];m+=`
        return getChannel(
          getT${f}(${Qy(a,u,h)}),
          vec2(${Qy(c,u,h)}));`,this.userCode=`
      float getValue(${a.map(g=>"int "+g)}) {
        ${m}
      }

      void main() {
        ${s} coords = getOutputCoords();
        vec4 result = vec4(getValue(${i}), 0., 0., 0.);

        ${i[n-1]} = ${i[n-1]} + 1;
        if (${i[n-1]} < ${o[n-1]}) {
          result.g = getValue(${i});
        }

        ${i[n-2]} = ${i[n-2]} + 1;
        if (${i[n-2]} < ${o[n-2]}) {
          result.a = getValue(${i});
        }

        ${i[n-1]} = ${i[n-1]} - 1;
        if (${i[n-2]} < ${o[n-2]} &&
            ${i[n-1]} < ${o[n-1]}) {
          result.b = getValue(${i});
        }
        setOutput(result);
      }
    `}};function Qy(r,t,e){let o=r.indexOf(t);return r.map((s,i)=>i===o?`${s} - ${e}`:s).join()}function nu(r){let{inputs:t,backend:e}=r,{input:o}=t,n=e.texData.get(o.dataId);return De({inputs:{x:n.complexTensorInfos.imag},backend:e})}var C_={kernelName:Pu,backendName:"webgl",kernelFunc:nu};function Jp(r,t,e){let o=r[0].dtype;if(o==="complex64"){let f=r.map(b=>ui({inputs:{input:b},backend:e})),h=r.map(b=>nu({inputs:{input:b},backend:e})),g=Jp(f,t,e),d=Jp(h,t,e),x=Jr({inputs:{real:g,imag:d},backend:e});return f.forEach(b=>e.disposeIntermediateTensorInfo(b)),h.forEach(b=>e.disposeIntermediateTensorInfo(b)),e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(d),x}let n=e.shouldExecuteOnCPU(r);if(o==="string"&&(n=!0),n){let f=r.map(w=>{let $=[-1,y.sizeFromShape(w.shape.slice(t))];return Q({inputs:{x:w},backend:e,attrs:{shape:$}})}),h=f.map(w=>({vals:e.readSync(w.dataId),shape:w.shape})),g=I.computeOutShape(f.map(w=>w.shape),1),d=f[0].shape[0]===1,x=TR(h,g,o,d),b=I.computeOutShape(r.map(w=>w.shape),t),S=e.makeTensorInfo(b,o,x);return f.forEach(w=>e.disposeIntermediateTensorInfo(w)),S}let s=r.filter(f=>y.sizeFromShape(f.shape)>0),i=z().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&s[0].shape.length>1;if(s.length===1){let f=i?new ur(r[0].shape,Un):new Zr(r[0].shape,Un);return e.runWebGLProgram(f,r,o)}let a=z().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");if(s.length>a){let f=[];for(let g=0;g<s.length;g+=a){let d=s.slice(g,g+a);f.push(Jp(d,t,e))}let h=Jp(f,t,e);for(let g of f)e.disposeIntermediateTensorInfo(g);return h}if(i){let f=new tb(s.map(h=>h.shape),t);return e.runWebGLProgram(f,s,o)}let{tensors2D:l,outShape:u}=XX(s,t,e),c=new Jy(l.map(f=>f.shape)),p=e.runWebGLProgram(c,l,o);l.forEach(f=>e.disposeIntermediateTensorInfo(f));let m=Q({inputs:{x:p},attrs:{shape:u},backend:e});return e.disposeIntermediateTensorInfo(p),m}function XX(r,t,e){let o=I.computeOutShape(r.map(s=>s.shape),t);return{tensors2D:r.map(s=>Q({inputs:{x:s},attrs:{shape:[-1,y.sizeFromShape(s.shape.slice(t))]},backend:e})),outShape:o}}function KS(r){let{inputs:t,backend:e,attrs:o}=r,{axis:n}=o,s=y.parseAxisParam(n,t[0].shape)[0],i=t.map(u=>u.shape);I.assertParamsConsistent(i,s);let a=I.computeOutShape(t.map(u=>u.shape),s);if(y.sizeFromShape(a)===0)return e.makeTensorInfo(a,t[0].dtype,[]);let l=t.filter(u=>y.sizeFromShape(u.shape)>0);return l.length===1?De({inputs:{x:l[0]},backend:e}):Jp(l,s,e)}var S_={kernelName:Ti,backendName:"webgl",kernelFunc:KS};var Qp=class{constructor(t,e=!1,o=null,n=!1,s=!1){this.variableNames=["x","W"],this.outputShape=t.outShape;let i=t.padInfo.top,a=t.padInfo.left,l=t.strideHeight,u=t.strideWidth,c=t.dilationHeight,p=t.dilationWidth,m=t.filterHeight,f=t.filterWidth,h=Math.floor(t.inChannels/4)*4,g=t.inChannels%4,d=t.dataFormat==="channelsLast",x=d?1:2,b=d?2:3,S=d?3:1,w="",T="";o&&(n?w=`float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${o}
        }`:s?w=`float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${o}
        }`:w=`
          float activation(float x) {
            ${o}
          }
        `,T="result = activation(result);");let $=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${w}

      const ivec2 strides = ivec2(${l}, ${u});
      const ivec2 pads = ivec2(${i}, ${a});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d2 = coords[${S}];

        ivec2 xRCCorner =
            ivec2(coords[${x}], coords[${b}]) * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${m}; wR++) {
          int xR = xRCorner + wR * ${c};

          if (xR < 0 || xR >= ${t.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${f}; wC++) {
            int xC = xCCorner + wC * ${p};

            if (xC < 0 || xC >= ${t.inWidth}) {
              continue;
            }

            for (int d1 = 0; d1 < ${h}; d1 += 4) {
              vec4 wValues = vec4(
                getW(wR, wC, d1, d2),
                getW(wR, wC, d1 + 1, d2),
                getW(wR, wC, d1 + 2, d2),
                getW(wR, wC, d1 + 3, d2)
              );

              if (${d}) {
                vec4 xValues = vec4(
                  getX(batch, xR, xC, d1),
                  getX(batch, xR, xC, d1 + 1),
                  getX(batch, xR, xC, d1 + 2),
                  getX(batch, xR, xC, d1 + 3)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec4 xValues = vec4(
                  getX(batch, d1, xR, xC),
                  getX(batch, d1 + 1, xR, xC),
                  getX(batch, d1 + 2, xR, xC),
                  getX(batch, d1 + 3, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }
            }

            if (${g===1}) {

              if (${d}) {
                dotProd +=
                    getX(batch, xR, xC, ${h}) *
                    getW(wR, wC, ${h}, d2);
              } else {
                dotProd +=
                    getX(batch, ${h}, xR, xC) *
                    getW(wR, wC, ${h}, d2);
              }

            } else if (${g===2}) {
              vec2 wValues = vec2(
                getW(wR, wC, ${h}, d2),
                getW(wR, wC, ${h} + 1, d2)
              );

              if (${d}) {
                vec2 xValues = vec2(
                  getX(batch, xR, xC, ${h}),
                  getX(batch, xR, xC, ${h} + 1)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec2 xValues = vec2(
                  getX(batch, ${h}, xR, xC),
                  getX(batch, ${h} + 1, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            } else if (${g===3}) {
              vec3 wValues = vec3(
                getW(wR, wC, ${h}, d2),
                getW(wR, wC, ${h} + 1, d2),
                getW(wR, wC, ${h} + 2, d2)
              );

              if (${d}) {
                vec3 xValues = vec3(
                  getX(batch, xR, xC, ${h}),
                  getX(batch, xR, xC, ${h} + 1),
                  getX(batch, xR, xC, ${h} + 2)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec3 xValues = vec3(
                  getX(batch, ${h}, xR, xC),
                  getX(batch, ${h} + 1, xR, xC),
                  getX(batch, ${h} + 2, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            }
          }
        }

        float result = dotProd;
        ${$}
        ${T}
        setOutput(result);
      }
    `}},eb=class{constructor(t){this.variableNames=["x","W"],this.outputShape=t.outShape;let e=t.padInfo.front,o=t.padInfo.top,n=t.padInfo.left,s=t.strideDepth,i=t.strideHeight,a=t.strideWidth,l=t.dilationDepth,u=t.dilationHeight,c=t.dilationWidth,p=t.filterDepth,m=t.filterHeight,f=t.filterWidth,h=Math.floor(t.inChannels/4)*4,g=t.inChannels%4;this.userCode=`
      const ivec3 strides = ivec3(${s}, ${i}, ${a});
      const ivec3 pads = ivec3(${e}, ${o}, ${n});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d2 = coords.u;

        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xFCorner = xFRCCorner.x;
        int xRCorner = xFRCCorner.y;
        int xCCorner = xFRCCorner.z;

        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get
        // y(yF, yR, yC, d2). ? = to be determined. : = across all
        // values in that axis.
        float dotProd = 0.0;
        for (int wF = 0; wF < ${p}; wF++) {
          int xF = xFCorner + wF * ${l};

          if (xF < 0 || xF >= ${t.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${m}; wR++) {
            int xR = xRCorner + wR * ${u};

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${f}; wC++) {
              int xC = xCCorner + wC * ${c};

              if (xC < 0 || xC >= ${t.inWidth}) {
                continue;
              }

              for (int d1 = 0; d1 < ${h}; d1 += 4) {
                vec4 xValues = vec4(
                  getX(batch, xF, xR, xC, d1),
                  getX(batch, xF, xR, xC, d1 + 1),
                  getX(batch, xF, xR, xC, d1 + 2),
                  getX(batch, xF, xR, xC, d1 + 3)
                );
                vec4 wValues = vec4(
                  getW(wF, wR, wC, d1, d2),
                  getW(wF, wR, wC, d1 + 1, d2),
                  getW(wF, wR, wC, d1 + 2, d2),
                  getW(wF, wR, wC, d1 + 3, d2)
                );

                dotProd += dot(xValues, wValues);
              }

              if (${g===1}) {
                dotProd +=
                  getX(batch, xF, xR, xC, ${h}) *
                  getW(wF, wR, wC, ${h}, d2);
              } else if (${g===2}) {
                vec2 xValues = vec2(
                  getX(batch, xF, xR, xC, ${h}),
                  getX(batch, xF, xR, xC, ${h} + 1)
                );
                vec2 wValues = vec2(
                  getW(wF, wR, wC, ${h}, d2),
                  getW(wF, wR, wC, ${h} + 1, d2)
                );
                dotProd += dot(xValues, wValues);
              } else if (${g===3}) {
                vec3 xValues = vec3(
                  getX(batch, xF, xR, xC, ${h}),
                  getX(batch, xF, xR, xC, ${h} + 1),
                  getX(batch, xF, xR, xC, ${h} + 2)
                );
                vec3 wValues = vec3(
                  getW(wF, wR, wC, ${h}, d2),
                  getW(wF, wR, wC, ${h} + 1, d2),
                  getW(wF, wR, wC, ${h} + 2, d2)
                );
                dotProd += dot(xValues, wValues);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}};var tm=class{constructor(t,e=!1,o=null,n=!1,s=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=t.outShape,this.enableShapeUniforms=Kt(this.outputShape.length);let i=t.padInfo.left,a=t.strideWidth,l=t.dilationWidth,u=t.filterHeight,c=t.filterWidth,p=c,m=`
       int xR; int xC; int xCOffset;
       vec4 wTexel; vec4 previous; vec4 final;`;for(let d=0;d<c;d++)m+=`
           vec4 xTexelC${d*2};
           int xTexelC${d*2}Ready;
           vec4 xTexelC${d*2+1};
           int xTexelC${d*2+1}Ready;
           vec4 xC${d};`;m+=`
     for (int r = 0; r < ${u}; r++) {
      for (int d1 = 0; d1 < ${t.inChannels}; d1 += 2) {
       `;for(let d=0;d<c;d++)m+=`
           xTexelC${d*2} = vec4(0.0);
           xTexelC${d*2}Ready = 0;
           xTexelC${d*2+1} = vec4(0.0);
           xTexelC${d*2+1}Ready = 0;
           xC${d} = vec4(0.0);`;m+=`
         xR = xRCorner + r * dilations[0];
         if (xR >=0 && xR < inDims[0]) {
       `;for(let d=0;d<(p+1)/2;d++){let x=d*2;if(m+=`
           xC = xCCorner + ${x*l};
           `,a===1){if(x<c&&(i%2===1?(m+=`
                 xCOffset = xC + 1;
                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x}Ready == 0) {
                   xTexelC${x} = getX(batch, xR, xCOffset, d1);

                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${x}.zw = vec2(0.0);
                   }
                   xTexelC${x}Ready = 1;
                 }
               `,l===1&&x>0?m+=`
                 xC${x} = vec4(xTexelC${x-2}.zw, xTexelC${x}.xy);
                 `:m+=`
                   xCOffset = xC + 1 - 2;

                   if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       previous.zw = vec2(0.0);
                     }

                     xC${x} = vec4(previous.zw, xTexelC${x}.xy);
                   } else {
                     xC${x} = vec4(0.0, 0.0, xTexelC${x}.xy);
                   }
                   `):m+=`
                 if (xC >= 0 && xC < inDims[1] && xTexelC${x}Ready == 0) {
                   xTexelC${x} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${x}.zw = vec2(0.0);
                   }
                   xTexelC${x}Ready = 1;
                 }

                 xC${x} = xTexelC${x};
                 `,x+1<c)){let b=i%2===0?y.nearestLargerEven(l):l;l%2===0&&i%2===1||l%2!==0&&i%2!==1?(m+=`
                   xCOffset = xC + imod(pads[1], 2) + ${b};

                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x+1}Ready == 0) {
                     xTexelC${x+1} = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       xTexelC${x+1}.zw = vec2(0.0);
                     }
                     xTexelC${x+1}Ready = 1;
                   }
                   `,l>1?m+=`
                     xCOffset -= 2;
                     if (xCOffset >= 0 && xCOffset < inDims[1]) {
                      previous = getX(batch, xR, xCOffset, d1);
                      xC${x+1} = vec4(previous.zw, xTexelC${x+1}.xy);
                     } else {
                      xC${x+1} = vec4(0.0, 0.0, xTexelC${x+1}.xy);
                     }
                     `:m+=`
                     xC${x+1} = vec4(xTexelC${x}.zw, xTexelC${x+1}.xy);
                     `):b===1?m+=`
                     xC${x+1} = xTexelC${x};
                     `:m+=`
                     xCOffset = xC + ${b};

                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x+1}Ready == 0) {
                       xTexelC${x+1} = getX(batch, xR, xCOffset, d1);
                       if (xCOffset + 1 >= inDims[1]) {
                         xTexelC${x+1}.zw = vec2(0.0);
                       }
                       xTexelC${x+1}Ready = 1;
                     }

                     xC${x+1} = xTexelC${x+1};
                     `}}else x<c&&(i%2===1?(m+=`
                 xCOffset = xC + 1 - strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x}Ready == 0) {
                   xTexelC${x} = getX(batch, xR, xCOffset, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${x}.zw = vec2(0.0);
                   }
                   xTexelC${x}Ready = 1;
                 }

                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${x+1}Ready == 0) {
                   xTexelC${x+1} = getX(batch, xR, xC + 1, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xC + 2 >= inDims[1]) {
                     xTexelC${x+1}.zw = vec2(0.0);
                   }
                   xTexelC${x+1}Ready = 1;
                 }

                 xC${x} = vec4(xTexelC${x}.zw, xTexelC${x+1}.zw);
               `,x+1<c&&(m+=`
                   final = vec4(0.0);
                   xCOffset = xC + 1 + strides[1];
                   if(xCOffset >= 0 && xCOffset < inDims[1]) {
                     final = getX(batch, xR, xCOffset, d1);
                   }
                   xC${x+1} = vec4(xTexelC${x+1}.xy, final.xy);
                 `)):(m+=`
                 if(xC >= 0 && xC < inDims[1] && xTexelC${x}Ready == 0) {
                   xTexelC${x} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${x}.zw = vec2(0.0);
                   }
                   xTexelC${x}Ready = 1;
                 }

                 xCOffset = xC + strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x+1}Ready == 0) {
                   xTexelC${x+1} = getX(batch, xR, xCOffset, d1);
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${x+1}.zw = vec2(0.);
                   }
                   xTexelC${x+1}Ready = 1;
                 }

                 xC${x} = vec4(
                   xTexelC${x}.xy, xTexelC${x+1}.xy);
               `,x+1<c&&(m+=`
                   xC${x+1} = vec4(xTexelC${x}.zw, xTexelC${x+1}.zw);
                 `)));x<c&&(m+=`
             wTexel = getW(r, ${x}, d1, d2);
             dotProd += xC${x}.xxzz * vec4(wTexel.xy, wTexel.xy);
             if(d1 + 1 < ${t.inChannels}) {
               dotProd += xC${x}.yyww * vec4(wTexel.zw, wTexel.zw);
             }
           `,x+1<c&&(m+=`
               wTexel = getW(r, ${x+1}, d1, d2);
               dotProd += xC${x+1}.xxzz * vec4(wTexel.xy, wTexel.xy);
               if(d1 + 1 < ${t.inChannels}) {
                 dotProd += xC${x+1}.yyww * vec4(wTexel.zw, wTexel.zw);
               }
             `))}m+=`
     }
   `,m+=`
     }
   `,m+=`
     }
   `;let f="",h="";o&&(n?f=`vec4 activation(vec4 a) {
           vec4 b = getPreluActivationWeightsAtOutCoords();
           ${o}
         }`:s?f=`vec4 activation(vec4 a) {
           vec4 b = getLeakyreluAlphaAtOutCoords();
           ${o}
         }`:f=`vec4 activation(vec4 x) {
           ${o}
         }`,h="result = activation(result);");let g=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
       ${f}

       void main() {
         ivec4 coords = getOutputCoords();
         int batch = coords.x;
         ivec2 xRCCorner = coords.yz * strides - pads;
         int d2 = coords.w;
         int xRCorner = xRCCorner.x;
         int xCCorner = xRCCorner.y;

         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
         vec4 dotProd = vec4(0.000000000000001);

         ${m}

         vec4 result = dotProd - vec4(0.000000000000001);
         ${g}
         ${h}
         setOutput(result);
       }
     `}};var rb=class{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec4"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=t,this.enableShapeUniforms=Kt(this.outputShape.length);let{dataFormat:o}=e,n=we(),s=o==="channelsLast",i=s?1:2,a=s?2:3,l=this.enableShapeUniforms?"if(blockIndex < outShape[2] && pos < outShape[1]) {":`if(blockIndex < ${t[2]} && pos < ${t[1]}) {`,u="";for(let c=0;c<=1;c++)for(let p=0;p<=1;p++)u+=`
          blockIndex = rc.z + ${p};
          pos = rc.y + ${c};

          ${l}
            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];
            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);

            if(d0 < inputShape[${i}] && d0 >= 0) {
              // Use custom imod instead mod. On Intel GPU, mod may generate
              // unexpected value.
              // https://github.com/tensorflow/tfjs/issues/5447
              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];
              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /
                  inChannels);

              if(d1 < inputShape[${a}] && d1 >= 0) {

                ch = imod(pos, inChannels);

                if (${s}) {
                  innerDims = vec2(d1, ch);
                  result[${c*2+p}] = getChannel(
                    getA(rc.x, d0, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                } else {
                  innerDims = vec2(d0, d1);
                  result[${c*2+p}] = getChannel(
                    getA(rc.x, ch, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                }
              }
            }
          }
        `;this.userCode=`
      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0);

        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;
        vec2 innerDims;

        ${u}

        ${n.output} = result;
      }
    `}};function ob(r,t){let e=r.length;return e>=3?t?[...r.slice(0,-3),r[e-3]*r[e-2],r[e-1]]:[...r.slice(0,-3),r[e-3],r[e-2]*r[e-1]]:!t&&e===1&&r[0]>1?[r[0],1]:null}function nb({x:r,filter:t,convInfo:e,backend:o,bias:n=null,preluActivationWeights:s=null,leakyreluAlpha:i=0,activation:a=null}){let l=r.shape,u=o.texData.get(r.dataId),c=e.inChannels,p=l[0]*l[1]*l[2],m=e.outChannels,f=e.dataFormat==="channelsLast",h=!1,g=!1,d,x=[];if(s!=null){let w=ob(s.shape,f);w!=null&&(s=Q({inputs:{x:s},backend:o,attrs:{shape:w}}),x.push(s))}if(n!=null){let w=ob(n.shape,f);w!=null&&(n=Q({inputs:{x:n},backend:o,attrs:{shape:w}}),x.push(n))}if(!((p===1||m===1)&&c>GS)&&u.isPacked&&f&&u.texture!=null&&l[2]%2!==0&&y.arraysEqual(u.shape.slice(-3),l.slice(-3))){let w=l[0]*l[1]*(l[2]+1),T={dataId:r.dataId,shape:[1,w,e.inChannels],dtype:r.dtype},$=u.shape;u.shape=u.shape.slice(),u.shape[u.shape.length-2]++,y.assert(Zl(u.shape,T.shape),()=>`packed reshape ${u.shape} to ${T.shape} isn't free`);let R=Q({inputs:{x:t},backend:o,attrs:{shape:[1,e.inChannels,e.outChannels]}});x.push(R);let F=ou({a:T,b:R,backend:o,transposeA:h,transposeB:g,bias:n,activation:a,preluActivationWeights:s,leakyreluAlpha:i}),O=o.texData.get(F.dataId);y.assert(O.isPacked,()=>"batchMatMul result is expected to be packed"),u.shape=$,O.shape=e.outShape,d=De({inputs:{x:F},backend:o}),d.shape=e.outShape,x.push(F)}else{let w=e.outHeight*e.outWidth,T=Q({inputs:{x:r},backend:o,attrs:{shape:f?[e.batchSize,w,e.inChannels]:[e.batchSize,e.inChannels,w]}}),$=Q({inputs:{x:t},backend:o,attrs:{shape:[1,e.inChannels,e.outChannels]}}),R=ou({a:f?T:$,b:f?$:T,transposeA:!f,transposeB:g,backend:o,bias:n,activation:a,preluActivationWeights:s,leakyreluAlpha:i});d=Q({inputs:{x:R},backend:o,attrs:{shape:e.outShape}}),x.push(T),x.push($),x.push(R)}for(let w of x)o.disposeIntermediateTensorInfo(w);return d}function sb({x:r,filter:t,convInfo:e,backend:o,bias:n=null,preluActivationWeights:s=null,leakyreluAlpha:i=0,activation:a=null}){let{filterWidth:l,filterHeight:u,inChannels:c,outWidth:p,outHeight:m,dataFormat:f}=e,h=f==="channelsLast",g=l*u*c,d=m*p,x=[e.batchSize,g,d],b=!0,S=!1,w=[];if(s!=null){let q=ob(s.shape,h);q!=null&&(s=Q({inputs:{x:s},backend:o,attrs:{shape:q}}),w.push(s))}if(n!=null){let q=ob(n.shape,h);q!=null&&(n=Q({inputs:{x:n},backend:o,attrs:{shape:q}}),w.push(n))}let T=Q({inputs:{x:t},backend:o,attrs:{shape:[1,g,y.sizeFromShape(t.shape)/g]}});w.push(T);let $=new rb(x,e),R=[r.shape,[e.padInfo.top,e.padInfo.left],[e.strideHeight,e.strideWidth],[e.dilationHeight,e.dilationWidth],[e.inChannels],[e.filterWidth*e.inChannels],[e.outWidth]],F=o.runWebGLProgram($,[r],"float32",R),O=Q({inputs:{x:F},backend:o,attrs:{shape:x}});w.push(F),w.push(O);let P=n!=null,B=s!=null,V=a==="leakyrelu",G=a?li(a,!0):null,H=new Zp(h?O.shape:T.shape,h?T.shape:O.shape,h?[e.batchSize,d,e.outChannels]:[e.batchSize,e.outChannels,d],b,S,P,G,B,V),W=h?[O,T]:[T,O];if(n&&W.push(n),B&&W.push(s),V){let q=o.makeTensorInfo([],"float32",y.createScalarValue(i,"float32"));W.push(q),w.push(q)}let j=o.runWebGLProgram(H,W,"float32"),Z=Q({inputs:{x:j},backend:o,attrs:{shape:e.outShape}});w.push(j);for(let q of w)o.disposeIntermediateTensorInfo(q);return Z}function YX(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s}=t,{strides:i,pad:a,dataFormat:l,dilations:u,dimRoundingMode:c}=o,p=I.convertConv2DDataFormat(l),m=I.computeConv2DInfo(n.shape,s.shape,i,u,a,c,!1,p),f;if(m.filterHeight===1&&m.filterWidth===1&&m.dilationHeight===1&&m.dilationWidth===1&&m.strideHeight===1&&m.strideWidth===1&&(m.padInfo.type==="SAME"||m.padInfo.type==="VALID"))f=nb({x:n,filter:s,convInfo:m,backend:e});else if(m.strideWidth<=2&&p==="channelsLast"&&z().getBool("WEBGL_EXP_CONV")){let g=new tm(m),d=[[m.padInfo.top,m.padInfo.left],[m.strideHeight,m.strideWidth],[m.dilationHeight,m.dilationWidth],[m.inHeight,m.inWidth]];f=e.runWebGLProgram(g,[n,s],"float32",d)}else if(z().getBool("WEBGL_CONV_IM2COL"))f=sb({x:n,filter:s,convInfo:m,backend:e});else{let g=new Qp(m);f=e.runWebGLProgram(g,[n,s],"float32")}let h=Q({inputs:{x:f},backend:e,attrs:{shape:m.outShape}});return e.disposeIntermediateTensorInfo(f),h}var N_={kernelName:Ii,backendName:"webgl",kernelFunc:YX};var ib=class{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;let e=t.strideHeight,o=t.strideWidth,n=t.padInfo.top,s=t.padInfo.left,i=t.dataFormat==="channelsLast";this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int d2 = coords.w;

        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int b = 0; b < ${t.batchSize}; b++) {
          for (int yR = 0; yR < ${t.outHeight}; yR++) {
            int xR = wR + yR * ${e} - ${n};

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${t.outWidth}; yC++) {
              int xC = wC + yC * ${o} - ${s};

              if (xC < 0 || xC >= ${t.inWidth}) {
                continue;
              }

              ${i?`float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);`:`float dyValue = getDy(b, d2, yR, yC);
              float xValue = getX(b, d1, xR, xC);
              dotProd += (xValue * dyValue);`}
            }
          }
        }
        setOutput(dotProd);
      }
    `}},ab=class{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;let e=t.filterHeight,o=t.filterWidth,n=t.strideHeight,s=t.strideWidth,i=t.dataFormat==="channelsLast",a=e-1-t.padInfo.top,l=o-1-t.padInfo.left,u=i?1:2,c=i?2:3,p=i?3:1;this.userCode=`
      const ivec2 pads = ivec2(${a}, ${l});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[${p}];

        ivec2 dyCorner = ivec2(coords[${u}], coords[${c}]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${e}; wR++) {
          float dyR = float(dyRCorner + wR) / ${n}.0;

          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${e} - 1 - wR;

          for (int wC = 0; wC < ${o}; wC++) {
            float dyC = float(dyCCorner + wC) / ${s}.0;

            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${o} - 1 - wC;

            for (int d2 = 0; d2 < ${t.outChannels}; d2++) {

              if (${i}) {
                float xValue = getDy(batch, idyR, idyC, d2);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              } else {
                float xValue = getDy(batch, d2, idyR, idyC);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `}},lb=class{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;let e=t.strideDepth,o=t.strideHeight,n=t.strideWidth,s=t.padInfo.front,i=t.padInfo.top,a=t.padInfo.left;this.userCode=`
      void main() {
        ivec5 coords = getOutputCoords();
        int wF = coords.x;
        int wR = coords.y;
        int wC = coords.z;
        int d1 = coords.w;
        int d2 = coords.u;

        float dotProd = 0.0;

        for (int b = 0; b < ${t.batchSize}; b++) {
          for (int yF = 0; yF < ${t.outDepth}; yF++) {
            int xF = wF + yF * ${e} - ${s};

            if (xF < 0 || xF >= ${t.inDepth}) {
              continue;
            }

            for (int yR = 0; yR < ${t.outHeight}; yR++) {
              int xR = wR + yR * ${o} - ${i};

              if (xR < 0 || xR >= ${t.inHeight}) {
                continue;
              }

              for (int yC = 0; yC < ${t.outWidth}; yC++) {
                int xC = wC + yC * ${n} - ${a};

                if (xC < 0 || xC >= ${t.inWidth}) {
                  continue;
                }

                float dyValue = getDy(b, yF, yR, yC, d2);
                float xValue = getX(b, xF, xR, xC, d1);
                dotProd += (xValue * dyValue);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}},ub=class{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;let e=t.filterDepth,o=t.filterHeight,n=t.filterWidth,s=t.strideDepth,i=t.strideHeight,a=t.strideWidth,l=e-1-t.padInfo.front,u=o-1-t.padInfo.top,c=n-1-t.padInfo.left;this.userCode=`
      const ivec3 pads = ivec3(${l}, ${u}, ${c});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.u;


        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyFCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        float dotProd = 0.0;
        for (int wF = 0; wF < ${e}; wF++) {
          float dyF = float(dyFCorner + wF) / ${s}.0;

          if (dyF < 0.0 || dyF >= ${t.outDepth}.0 || fract(dyF) > 0.0) {
            continue;
          }
          int idyF = int(dyF);

          int wFPerm = ${e} - 1 - wF;

          for (int wR = 0; wR < ${o}; wR++) {
            float dyR = float(dyRCorner + wR) / ${i}.0;

            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||
              fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            int wRPerm = ${o} - 1 - wR;

            for (int wC = 0; wC < ${n}; wC++) {
              float dyC = float(dyCCorner + wC) / ${a}.0;

              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              int wCPerm = ${n} - 1 - wC;

              for (int d2 = 0; d2 < ${t.outChannels}; d2++) {
                float xValue = getDy(batch, idyF, idyR, idyC, d2);
                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}};function ZX(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,dy:s}=t,{strides:i,pad:a,dataFormat:l,dimRoundingMode:u,filterShape:c}=o,p=I.convertConv2DDataFormat(l),m=I.computeConv2DInfo(n.shape,c,i,1,a,u,!1,p),f=new ib(m);return e.runWebGLProgram(f,[n,s],"float32")}var v_={kernelName:wu,backendName:"webgl",kernelFunc:ZX};var cb=class{constructor(t){this.variableNames=["dy","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"strides",type:"vec2"}],this.outputShape=t.inShape,this.enableShapeUniforms=Kt(this.outputShape.length);let e=t.filterHeight,o=t.filterWidth,n=e-1-t.padInfo.top,s=o-1-t.padInfo.left;this.userCode=`
      const ivec2 pads = ivec2(${n}, ${s});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];

        ivec2 dyCorner = ivec2(coords[1], coords[2]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        vec4 result = vec4(0.);
        for (int wR = 0; wR < ${e}; wR++) {
          float dyR = float(dyRCorner + wR) / strides[0];
          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);
          int wRPerm = ${e} - 1 - wR;

          for (int wC = 0; wC < ${o}; wC++) {
            int wCPerm = ${o} - 1 - wC;

            float dyC = float(dyCCorner + wC) / strides[1];
            bool idyCVal = (dyC >= 0.0) && (dyC < ${t.outWidth}.0)
              && (fract(dyC) == 0.0);
            int idyC = int(dyC);

            float dyC2 = float(dyCCorner + wC + 1) / strides[1];
            bool idyCVal2 = (dyC2 >= 0.0) && (dyC2 < ${t.outWidth}.0)
              && (fract(dyC2) == 0.0);
            int idyC2 = int(dyC2);

            if (idyCVal && idyCVal2) {
              for (int d2 = 0; d2 < ${t.outChannels}; d2 += 2) {
                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);
                vec4 dySample = getDy(batch, idyR, idyC, d2);
                vec4 dySample2 = (idyC / 2 == idyC2 / 2) ?
                  dySample : getDy(batch, idyR, idyC2, d2);

                vec2 dyValue = mod(float(idyC), 2.) == 0. ?
                  dySample.xy : dySample.zw;
                result.xy += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));

                dyValue = mod(float(idyC2), 2.) == 0. ?
                  dySample2.xy : dySample2.zw;
                result.zw += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));
              }
            } else if (idyCVal) {
              for (int d2 = 0; d2 < ${t.outChannels}; d2 += 2) {
                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);
                vec4 dySample = getDy(batch, idyR, idyC, d2);
                vec2 dyValue = mod(float(idyC), 2.) == 0. ?
                  dySample.xy : dySample.zw;
                result.xy += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));
              }
            } else if (idyCVal2) {
              for (int d2 = 0; d2 < ${t.outChannels}; d2 += 2) {
                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);
                vec4 dySample = getDy(batch, idyR, idyC2, d2);
                vec2 dyValue = mod(float(idyC2), 2.) == 0. ?
                  dySample.xy : dySample.zw;
                result.zw += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));
              }
            }
          }
        }
        setOutput(result);
      }
    `}};function JX(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,filter:s}=t,{inputShape:i,strides:a,pad:l,dataFormat:u,dimRoundingMode:c}=o,p=I.convertConv2DDataFormat(u),m=I.computeConv2DInfo(i,s.shape,a,1,l,c,!1,p);if(z().getBool("WEBGL_PACK")&&p==="channelsLast"){let f=[[m.strideHeight,m.strideWidth]],h=new cb(m);return e.runWebGLProgram(h,[n,s],"float32",f)}else{let f=new ab(m);return e.runWebGLProgram(f,[n,s],"float32")}}var T_={kernelName:ki,backendName:"webgl",kernelFunc:JX};function QX(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s}=t,{strides:i,pad:a,dilations:l}=o,u=I.computeConv3DInfo(n.shape,s.shape,i,l,a),c=new eb(u);return e.runWebGLProgram(c,[n,s],"float32")}var I_={kernelName:Ei,backendName:"webgl",kernelFunc:QX};function t5(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,dy:s}=t,{strides:i,pad:a,filterShape:l}=o,u=I.computeConv3DInfo(n.shape,l,i,1,a),c=new lb(u);return e.runWebGLProgram(c,[n,s],"float32")}var k_={kernelName:Cu,backendName:"webgl",kernelFunc:t5};function e5(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,filter:s}=t,{pad:i,strides:a,inputShape:l}=o,u=I.computeConv3DInfo(l,s.shape,a,1,i),c=new ub(u);return e.runWebGLProgram(c,[n,s],"float32")}var E_={kernelName:Su,backendName:"webgl",kernelFunc:e5};var r5=jo+`
  return cos(x);
`,o5=`
  vec4 result = cos(x);
  bvec4 isNaN = isnan(x);
  ${mo}
  return result;
`,n5=ht({opSnippet:r5,packedOpSnippet:o5}),$_={kernelName:ss,backendName:"webgl",kernelFunc:n5};var s5=`
  float e2x = exp(-x);
  return (e2x + 1.0 / e2x) / 2.0;
`,i5=ht({opSnippet:s5}),A_={kernelName:is,backendName:"webgl",kernelFunc:i5};var pb=class{constructor(t,e,o,n,s){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];let[i,a,l,u]=t,[c]=e,[p,m]=o;this.outputShape=[c,p,m,u];let f=n==="bilinear"?1:0,[h,g]=[`${a-1}.0`,`${l-1}.0`],[d,x,b]=p>1?[`${(a-1)/(p-1)}`,"(y2-y1) * height_ratio",`y1*${h} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${h}`],[S,w,T]=m>1?[`${(l-1)/(m-1)}`,"(x2-x1) * width_ratio",`x1*${g} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${g}`];this.userCode=`
      const float height_ratio = float(${d});
      const float width_ratio = float(${S});
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int y = coords[1];
        int x = coords[2];
        int d = coords[3];

        // get box vals
        float y1 = getBoxes(b,0);
        float x1 = getBoxes(b,1);
        float y2 = getBoxes(b,2);
        float x2 = getBoxes(b,3);

        // get image in batch index
        int bInd = round(getBoxInd(b));
        if(bInd < 0 || bInd >= ${i}) {
          return;
        }

        float height_scale = ${x};
        float width_scale = ${w};

        float in_y = ${b};
        if( in_y < 0.0 || in_y > ${h} ) {
          setOutput(float(${s}));
          return;
        }
        float in_x = ${T};
        if( in_x < 0.0 || in_x > ${g} ) {
          setOutput(float(${s}));
          return;
        }

        vec2 sourceFracIndexCR = vec2(in_x,in_y);
        if(${f} == 1) {
          // Compute the four integer indices.
          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);
          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));

          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);
          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);
          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);
          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);

          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);

          float top = topLeft + (topRight - topLeft) * fracCR.x;
          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;
          float newValue = top + (bottom - top) * fracCR.y;
          setOutput(newValue);
        } else {
          // Compute the coordinators of nearest neighbor point.
          ivec2 sourceNearestCR = ivec2(floor(
            sourceFracIndexCR + vec2(0.5,0.5)));
          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);
          setOutput(newValue);
        }
      }
    `}};var a5=r=>{let{inputs:t,backend:e,attrs:o}=r,{image:n,boxes:s,boxInd:i}=t,{cropSize:a,method:l,extrapolationValue:u}=o,c=new pb(n.shape,s.shape,a,l,u);return e.runWebGLProgram(c,[n,s,i],"float32")},D_={kernelName:vu,backendName:"webgl",kernelFunc:a5};var su;(function(r){r.Prod="*",r.Sum="+"})(su||(su={}));var Rh=class{constructor(t,e,o,n){this.op=t,this.outputShape=e,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];let s=this.outputShape.length,i=this.op===su.Prod?"1.0":"0.0",a=o?i:`getX(${R_(s,"coords",this.op)})`,l=this.outputShape[this.outputShape.length-1],u="",c="";o?(u=n?`end != ${l-1}`:"end != 0",c=n?"end + 1":"end - 1"):(u=n?`end + pow2 < ${l}`:"end >= pow2",c=n?"end + pow2":"end - pow2"),this.userCode=`
      void main() {
        ${It(s)} coords = getOutputCoords();
        int end = ${F_(s,"coords",this.op)};
        float val = ${a};
        int pow2 = int(pow(2.0, index));
        if (${u}) {
          int idx = ${c};
          ${F_(s,"coords",this.op)} = idx;
          val ${this.op}= getX(${R_(s,"coords",this.op)});
        }
        setOutput(val);
      }
    `}};function R_(r,t,e){if(r===1)return`${t}`;if(r===2)return`${t}.x, ${t}.y`;if(r===3)return`${t}.x, ${t}.y, ${t}.z`;if(r===4)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw new Error(`Cumulative ${e} for rank ${r} is not yet supported`)}function F_(r,t,e){if(r===1)return`${t}`;if(r===2)return`${t}.y`;if(r===3)return`${t}.z`;if(r===4)return`${t}.w`;throw new Error(`Cumulative ${e} for rank ${r} is not yet supported`)}function mb(r,t,e,o,n,s){let i=t.shape.length,a=I.getAxesPermutation([o],i),l=t;a!=null&&(l=pe({inputs:{x:t},backend:e,attrs:{perm:a}}));let u=I.getInnerMostAxes(1,i)[0];if(u!==i-1)throw new Error(`WebGL cumprod shader expects an inner-most axis=${t.shape.length-1} but got axis=${o}`);let c=l.shape[u],p=De({inputs:{x:l},backend:e});for(let m=0;m<=Math.ceil(Math.log2(c))-1;m++){let f=new Rh(r,l.shape,!1,s),h=[[m]],g=p;p=e.runWebGLProgram(f,[p],p.dtype,h),e.disposeIntermediateTensorInfo(g)}if(n){let m=new Rh(r,l.shape,n,s),f=p;p=e.runWebGLProgram(m,[p],p.dtype),e.disposeIntermediateTensorInfo(f)}if(a!=null){let m=I.getUndoAxesPermutation(a),f=pe({inputs:{x:p},backend:e,attrs:{perm:m}});return e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(l),f}return p}function l5(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,exclusive:i,reverse:a}=o;return mb(su.Prod,n,e,s,i,a)}var __={kernelName:Nu,backendName:"webgl",kernelFunc:l5};function u5(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,exclusive:i,reverse:a}=o;return mb(su.Sum,n,e,s,i,a)}var O_={kernelName:$i,backendName:"webgl",kernelFunc:u5};function c5(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,weights:s}=t,{size:i,binaryOutput:a}=o;if(n.shape.length===1){let l=e.readSync(n.dataId),u=e.readSync(s.dataId),c=ky(l,u,s.dtype,s.shape,i);return e.makeTensorInfo([i],s.dtype,c)}else if(n.shape.length===2){let l=e.bufferSync(n),u=e.bufferSync(s),c=SR(l,u,i,a);return e.makeTensorInfo(c.shape,s.dtype,c.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${n.shape.length}.`)}var L_={kernelName:Tu,backendName:"webgl",kernelFunc:c5};var fb=class{constructor(t,e,o){this.variableNames=["x"],this.outputShape=[],this.outputShape=t,this.blockSize=e,this.dataFormat=o,this.userCode=`
    void main() {
      ivec4 coords = getOutputCoords();
      int b = coords[0];
      int h = ${this.getHeightCoordString()};
      int w = ${this.getWidthCoordString()};
      int d = ${this.getDepthCoordString()};

      int in_h = h / ${e};
      int offset_h = imod(h, ${e});
      int in_w = w / ${e};
      int offset_w = imod(w, ${e});
      int offset_d = (offset_h * ${e} + offset_w) *
        ${this.getOutputDepthSize()};
      int in_d = d + offset_d;

      float result = ${this.getInputSamplingString()};
      setOutput(result);
    }
  `}getHeightCoordString(){return this.dataFormat==="NHWC"?"coords[1]":"coords[2]"}getWidthCoordString(){return this.dataFormat==="NHWC"?"coords[2]":"coords[3]"}getDepthCoordString(){return this.dataFormat==="NHWC"?"coords[3]":"coords[1]"}getOutputDepthSize(){return this.dataFormat==="NHWC"?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return this.dataFormat==="NHWC"?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}};function p5(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{blockSize:s,dataFormat:i}=o,a=n.shape[0],l=i==="NHWC"?n.shape[1]:n.shape[2],u=i==="NHWC"?n.shape[2]:n.shape[3],c=i==="NHWC"?n.shape[3]:n.shape[1],p=l*s,m=u*s,f=c/(s*s),h=i==="NHWC"?[a,p,m,f]:[a,f,p,m],g=new fb(h,s,i);return e.runWebGLProgram(g,[n],n.dtype)}var P_={kernelName:Iu,backendName:"webgl",kernelFunc:p5};var em=class{constructor(t,e=!1,o=null,n=!1,s=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=t.outShape,this.enableShapeUniforms=Kt(this.outputShape.length);let i=t.filterHeight,a=t.filterWidth,l=t.outChannels/t.inChannels,u="",c="";o&&(n?u=`float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${o}
        }`:s?u=`float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${o}
        }`:u=`
          float activation(float x) {
            ${o}
          }
        `,c="result = activation(result);");let p=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${u}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${l};
        int q = d2 - d1 * ${l};

        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.
        for (int wR = 0; wR < ${i}; wR++) {
          int xR = xRCorner + wR * dilations[0];

          if (xR < 0 || xR >= inDims[0]) {
            continue;
          }

          for (int wC = 0; wC < ${a}; wC++) {
            int xC = xCCorner + wC * dilations[1];

            if (xC < 0 || xC >= inDims[1]) {
              continue;
            }

            float xVal = getX(batch, xR, xC, d1);
            float wVal = getW(wR, wC, d1, q);
            dotProd += xVal * wVal;
          }
        }

        float result = dotProd;
        ${p}
        ${c}
        setOutput(result);
      }
    `}};var rm=class{constructor(t,e=!1,o=null,n=!1,s=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=t.outShape,this.enableShapeUniforms=Kt(this.outputShape.length);let i=t.outChannels/t.inChannels,a=t.padInfo.left,l=t.strideWidth,u=t.dilationWidth,c=t.filterHeight,p=t.filterWidth,m=p,f=`
      int xR; int xC; int xCOffset;
      vec4 wTexel; vec4 previous; vec4 final;`;for(let x=0;x<p;x++)f+=`
          vec4 xTexelC${x*2};
          int xTexelC${x*2}Ready;
          vec4 xTexelC${x*2+1};
          int xTexelC${x*2+1}Ready;
          vec4 xC${x};`;f+=`
    for (int r = 0; r < ${c}; r++) {
      `;for(let x=0;x<p;x++)f+=`
          xTexelC${x*2} = vec4(0.0);
          xTexelC${x*2}Ready = 0;
          xTexelC${x*2+1} = vec4(0.0);
          xTexelC${x*2+1}Ready = 0;
          xC${x} = vec4(0.0);`;f+=`
        xR = xRCorner + r * dilations[0];
        if (xR >=0 && xR < inDims[0]) {
      `;for(let x=0;x<(m+1)/2;x++){let b=x*2;if(f+=`
          xC = xCCorner + ${b*u};
          `,l===1){if(b<p&&(a%2===1?(f+=`
                xCOffset = xC + 1;
                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xCOffset, d1);

                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }
              `,u===1&&b>0?f+=`
                xC${b} = vec4(xTexelC${b-2}.zw, xTexelC${b}.xy);
                `:f+=`
                  xCOffset = xC + 1 - 2;

                  if (xCOffset >= 0 && xCOffset < inDims[1]) {
                    previous = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      previous.zw = vec2(0.0);
                    }

                    xC${b} = vec4(previous.zw, xTexelC${b}.xy);
                  } else {
                    xC${b} = vec4(0.0, 0.0, xTexelC${b}.xy);
                  }
                  `):f+=`
                if (xC >= 0 && xC < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                xC${b} = xTexelC${b};
                `,b+1<p)){let S=a%2===0?y.nearestLargerEven(u):u;u%2===0&&a%2===1||u%2!==0&&a%2!==1?(f+=`
                  xCOffset = xC + imod(pads[1], 2) + ${S};

                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b+1}Ready == 0) {
                    xTexelC${b+1} = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      xTexelC${b+1}.zw = vec2(0.0);
                    }
                    xTexelC${b+1}Ready = 1;
                  }
                  `,u>1?f+=`
                    xCOffset -= 2;
                    if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);
                     xC${b+1} = vec4(previous.zw, xTexelC${b+1}.xy);
                    } else {
                     xC${b+1} = vec4(0.0, 0.0, xTexelC${b+1}.xy);
                    }
                    `:f+=`
                    xC${b+1} = vec4(xTexelC${b}.zw, xTexelC${b+1}.xy);
                    `):S===1?f+=`
                    xC${b+1} = xTexelC${b};
                    `:f+=`
                    xCOffset = xC + ${S};

                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b+1}Ready == 0) {
                      xTexelC${b+1} = getX(batch, xR, xCOffset, d1);
                      if (xCOffset + 1 >= inDims[1]) {
                        xTexelC${b+1}.zw = vec2(0.0);
                      }
                      xTexelC${b+1}Ready = 1;
                    }

                    xC${b+1} = xTexelC${b+1};
                    `}}else b<p&&(a%2===1?(f+=`
                xCOffset = xC + 1 - strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xCOffset, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${b+1}Ready == 0) {
                  xTexelC${b+1} = getX(batch, xR, xC + 1, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xC + 2 >= inDims[1]) {
                    xTexelC${b+1}.zw = vec2(0.0);
                  }
                  xTexelC${b+1}Ready = 1;
                }

                xC${b} = vec4(xTexelC${b}.zw, xTexelC${b+1}.zw);
              `,b+1<p&&(f+=`
                  final = vec4(0.0);
                  xCOffset = xC + 1 + strides[1];
                  if(xCOffset >= 0 && xCOffset < inDims[1]) {
                    final = getX(batch, xR, xCOffset, d1);
                  }
                  xC${b+1} = vec4(xTexelC${b+1}.xy, final.xy);
                `)):(f+=`
                if(xC >= 0 && xC < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                xCOffset = xC + strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b+1}Ready == 0) {
                  xTexelC${b+1} = getX(batch, xR, xCOffset, d1);
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b+1}.zw = vec2(0.);
                  }
                  xTexelC${b+1}Ready = 1;
                }

                xC${b} = vec4(
                  xTexelC${b}.xy, xTexelC${b+1}.xy);
              `,b+1<p&&(f+=`
                  xC${b+1} = vec4(xTexelC${b}.zw, xTexelC${b+1}.zw);
                `)));b<p&&(f+=`
            wTexel = getW(r, ${b}, d1, q);
            dotProd += xC${b} * vec4(wTexel.xz, wTexel.xz);
          `,b+1<p&&(f+=`
              wTexel = getW(r, ${b+1}, d1, q);
              dotProd += xC${b+1} * vec4(wTexel.xz, wTexel.xz);
            `))}f+=`
    }
  `,f+=`
      }
    `;let h="",g="";o&&(n?h=`vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${o}
        }`:s?h=`vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${o}
        }`:h=`vec4 activation(vec4 x) {
          ${o}
        }`,g="result = activation(result);");let d=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${h}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${i};
        int q = d2 - d1 * ${i};
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
        vec4 dotProd = vec4(0.000000000000001);

        ${f}

        vec4 result = dotProd - vec4(0.000000000000001);
        ${d}
        ${g}
        setOutput(result);
      }
    `}};function m5(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s}=t,{strides:i,pad:a,dilations:l,dimRoundingMode:u}=o,c=l;c==null&&(c=[1,1]),y.assert(I.eitherStridesOrDilationsAreOne(i,c),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`);let p=I.computeConv2DInfo(n.shape,s.shape,i,c,a,u,!0),m;z().getBool("WEBGL_PACK_DEPTHWISECONV")&&p.strideWidth<=2&&p.outChannels/p.inChannels===1?m=new rm(p):m=new em(p);let f=[[p.padInfo.top,p.padInfo.left],[p.strideHeight,p.strideWidth],[p.dilationHeight,p.dilationWidth],[p.inHeight,p.inWidth]];return e.runWebGLProgram(m,[n,s],"float32",f)}var z_={kernelName:Ai,backendName:"webgl",kernelFunc:m5};var hb=class{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;let e=t.strideHeight,o=t.strideWidth,n=t.padInfo.top,s=t.padInfo.left,i=t.outChannels/t.inChannels;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int dm = coords.w;
        int d2 = d1 * ${i} + dm;

        float dotProd = 0.0;

        // TO DO: Vec4 over the batch size
        for (int b = 0; b < ${t.batchSize}; b++) {
          for (int yR = 0; yR < ${t.outHeight}; yR++) {
            int xR = wR + yR * ${e} - ${n};

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${t.outWidth}; yC++) {
              int xC = wC + yC * ${o} - ${s};

              if (xC < 0 || xC >= ${t.inWidth}) {
                continue;
              }

              float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);
            }
          }
        }
        setOutput(dotProd);
      }
    `}},db=class{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;let e=t.filterHeight,o=t.filterWidth,n=t.strideHeight,s=t.strideWidth,i=e-1-t.padInfo.top,a=o-1-t.padInfo.left,l=t.outChannels/t.inChannels;this.userCode=`
      const ivec2 pads = ivec2(${i}, ${a});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];
        ivec2 dyCorner = coords.yz - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        float dotProd = 0.0;

        for (int wR = 0; wR < ${e}; wR++) {
          float dyR = float(dyRCorner + wR) / ${n}.0;

          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${e} - 1 - wR;

          for (int wC = 0; wC < ${o}; wC++) {
            float dyC = float(dyCCorner + wC) / ${s}.0;

            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${o} - 1 - wC;

            // TO DO: Vec4 over the channelMul
            for (int dm = 0; dm < ${l}; dm++) {
              int d2 = d1 * ${l} + dm;
              float xValue = getDy(batch, idyR, idyC, d2);
              float wValue = getW(wRPerm, wCPerm, d1, dm);
              dotProd += xValue * wValue;
            }
          }
        }
        setOutput(dotProd);
      }
    `}};function f5(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,dy:s}=t,{strides:i,dilations:a,pad:l,dimRoundingMode:u,filterShape:c}=o,p=I.computeConv2DInfo(n.shape,c,i,a,l,u,!0),m=new hb(p);return e.runWebGLProgram(m,[n,s],"float32")}var M_={kernelName:ku,backendName:"webgl",kernelFunc:f5};function h5(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,filter:s}=t,{strides:i,dilations:a,pad:l,dimRoundingMode:u,inputShape:c}=o,p=I.computeConv2DInfo(c,s.shape,i,a,l,u,!0),m=new db(p);return e.runWebGLProgram(m,[n,s],"float32")}var B_={kernelName:Eu,backendName:"webgl",kernelFunc:h5};var gb=class{constructor(t){this.variableNames=["X"],this.outputShape=[t,t],this.userCode=`
      void main() {
          ivec2 coords = getOutputCoords();
          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;
          setOutput(val);
      }
    `}};function d5(r){let{inputs:t,backend:e}=r,{x:o}=t,n=[...o.shape,...o.shape],s=y.sizeFromShape(o.shape),i=Q({inputs:{x:o},backend:e,attrs:{shape:[s]}}),a=new gb(s),l=e.runWebGLProgram(a,[i],i.dtype),u=Q({inputs:{x:l},backend:e,attrs:{shape:n}});return e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(l),u}var V_={kernelName:$u,backendName:"webgl",kernelFunc:d5};var xb=class{constructor(t){this.variableNames=["x","W"],this.outputShape=t.outShape;let{inHeight:e,inWidth:o,padInfo:n,strideHeight:s,strideWidth:i,filterHeight:a,filterWidth:l,dilationHeight:u,dilationWidth:c}=t,{top:p,left:m}=n;this.userCode=`
      const ivec2 strides = ivec2(${s}, ${i});
      const ivec2 pads = ivec2(${p}, ${m});
      const float neg_infinity = -3.4e38;

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.w;
        ivec2 outTopLeftCorner =
            coords.yz * strides - pads;
        int hBeg = outTopLeftCorner.x;
        int wBeg = outTopLeftCorner.y;

        float curVal = neg_infinity;
        for (int h = 0; h < ${a}; h++) {
          int hIn = hBeg + h * ${u};

          if (hIn >= 0 && hIn < ${e}) {
            for (int w = 0; w < ${l}; w++) {
              int wIn = wBeg + w * ${c};

              if (wIn >= 0 && wIn < ${o}) {
                float xVal = getX(batch, hIn, wIn, d1);
                float wVal = getW(h, w, d1);

                float val = xVal + wVal;
                if (val > curVal) {
                  curVal = val;
                }
              }
            }
          }
        }

        float result = curVal;
        setOutput(result);
      }
    `}};function g5(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s}=t,{strides:i,pad:a,dilations:l}=o,u=I.computeDilation2DInfo(n.shape,s.shape,i,a,"NHWC",l),c,p=new xb(u);c=e.runWebGLProgram(p,[n,s],"float32");let m=Q({inputs:{x:c},backend:e,attrs:{shape:u.outShape}});return e.disposeIntermediateTensorInfo(c),m}var G_={kernelName:Di,backendName:"webgl",kernelFunc:g5};function x5(r){let{inputs:t,backend:e,attrs:o}=r,{equation:n}=o,s=t,{allDims:i,summedDims:a,idDims:l}=I.decodeEinsumEquation(n,s.length);I.checkEinsumDimSizes(i.length,l,s);let{path:u,steps:c}=I.getEinsumComputePath(a,l),p=c.length,m=null,f=i.length,h=[];for(let g=0;g<p;++g){for(let d of c[g]){let{permutationIndices:x,expandDims:b}=I.getEinsumPermutation(f,l[d]),S;I.isIdentityPermutation(x)?S=s[d]:(S=pe({inputs:{x:s[d]},backend:e,attrs:{perm:x}}),h.push(S));let w=S.shape.slice();for(let T=0;T<b.length;++T)w.splice(b[T],0,1);y.arraysEqual(S.shape,w)||(S=Q({inputs:{x:S},backend:e,attrs:{shape:w}}),h.push(S)),m===null?m=S:(m=Ah({inputs:{a:S,b:m},backend:e}),h.push(m))}g<p-1&&(u[g]>=0&&(m=ru({inputs:{x:m},backend:e,attrs:{axis:u[g]-(i.length-f),keepDims:!1}}),h.push(m)),f--)}for(let g of h)g!==m&&e.disposeIntermediateTensorInfo(g);return m}var W_={kernelName:Au,backendName:"webgl",kernelFunc:x5};var y5="return (x >= 0.0) ? x : (exp(x) - 1.0);",b5=`
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`,w5=ht({opSnippet:y5,packedOpSnippet:b5}),U_={kernelName:ls,backendName:"webgl",kernelFunc:w5};var C5="return (b >= 0.0) ? a : a * (b + 1.0);",S5=`
  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));
  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));
`,N5=r=>{let{inputs:t,backend:e}=r,{dy:o,y:n}=t,s=z().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new qo(S5,o.shape,n.shape):new To(C5,o.shape,n.shape);return e.runWebGLProgram(s,[o,n],o.dtype)},H_={kernelName:Du,backendName:"webgl",kernelFunc:N5};var v5=`
  return vec4(equal(a, b));
`,T5="return float(a == b);",I5=Ut({opSnippet:T5,packedOpSnippet:v5,dtype:"bool",cpuKernelImpl:IR}),K_={kernelName:Za,backendName:"webgl",kernelFunc:I5};var k5=`
  // Error function is calculated approximately with elementary function.
  // See "Handbook of Mathematical Functions with Formulas,
  // Graphs, and Mathematical Tables", Abramowitz and Stegun.
  float p = ${I.ERF_P};
  float a1 = ${I.ERF_A1};
  float a2 = ${I.ERF_A2};
  float a3 = ${I.ERF_A3};
  float a4 = ${I.ERF_A4};
  float a5 = ${I.ERF_A5};

  float sign = sign(x);
  x = abs(x);
  float t = 1.0 / (1.0 + p * x);
  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));
`,E5=ht({opSnippet:k5}),q_={kernelName:us,backendName:"webgl",kernelFunc:E5};var $5=jo+`
  return exp(x);
`,A5=`
  vec4 result = exp(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,qS=ht({opSnippet:$5,packedOpSnippet:A5,cpuKernelImpl:kR,dtype:"float32"}),j_={kernelName:cs,backendName:"webgl",kernelFunc:qS};function yb(r){let{inputs:t,attrs:e,backend:o}=r,{dim:n}=e,{input:s}=t,i=s.shape.length,a=s.shape.slice(),l=n;return n<0&&(y.assert(-(i+1)<=n,()=>`Axis must be in the interval [${-(i+1)}, ${i}]`),l=i+n+1),a.splice(l,0,1),Q({inputs:{x:s},backend:o,attrs:{shape:a}})}var X_={kernelName:Ri,backendName:"webgl",kernelFunc:yb};var Y_="return exp(x) - 1.0;",D5=ht({opSnippet:Y_,packedOpSnippet:Y_,cpuKernelImpl:ER}),Z_={kernelName:ps,backendName:"webgl",kernelFunc:D5};var Fh=class{constructor(t,e,o){this.variableNames=["real","imag"];let n=e[1];this.outputShape=e;let s=o?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,i=o?`${n}.0`:"1.0",a;if(t==="real")a="return real * expR - imag * expI;";else if(t==="imag")a="return real * expI + imag * expR;";else throw new Error(`FFT component must be either "real" or "imag", got ${t}.`);this.userCode=`
      const float exponentMultiplier = ${s};

      float unaryOpComplex(float real, float expR, float imag, float expI) {
        ${a}
      }

      float mulMatDFT(int batch, int index) {
        float indexRatio = float(index) / float(${n});
        float exponentMultiplierTimesIndexRatio =
            exponentMultiplier * indexRatio;

        float result = 0.0;

        for (int i = 0; i < ${n}; i++) {
          // x = (-2|2 * PI / N) * index * i;
          float x = exponentMultiplierTimesIndexRatio * float(i);
          float expR = cos(x);
          float expI = sin(x);
          float real = getReal(batch, i);
          float imag = getImag(batch, i);

          result +=
              unaryOpComplex(real, expR, imag, expI) / ${i};
        }

        return result;
      }

      void main() {
        ivec2 coords = getOutputCoords();
        setOutput(mulMatDFT(coords[0], coords[1]));
      }
    `}};function bb(r,t,e){let o=e.texData.get(r.dataId),n=y.sizeFromShape(r.shape),s=r.shape[r.shape.length-1],i=n/s,a=Q({inputs:{x:r},backend:e,attrs:{shape:[i,s]}}),l=a.shape,u=new Fh("real",l,t),c=new Fh("imag",l,t),p=[{dataId:o.complexTensorInfos.real.dataId,dtype:o.complexTensorInfos.real.dtype,shape:l},{dataId:o.complexTensorInfos.imag.dataId,dtype:o.complexTensorInfos.imag.dtype,shape:l}],m=e.runWebGLProgram(u,p,"float32"),f=e.runWebGLProgram(c,p,"float32"),h=Jr({inputs:{real:m,imag:f},backend:e});e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(f);let g=Q({inputs:{x:h},backend:e,attrs:{shape:r.shape}});return e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(h),g}function R5(r){let{inputs:t,backend:e}=r,{input:o}=t;return bb(o,!1,e)}var J_={kernelName:Ru,backendName:"webgl",kernelFunc:R5};var wb=class{constructor(t,e){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=t,this.userCode=`
      void main() {
        // Input can be obtained from uniform value.
        setOutput(value);
      }
    `}};function ci(r){let{backend:t,attrs:e}=r,{shape:o,value:n}=e,{dtype:s}=e;if(s=s||y.inferDtype(n),s==="string"){let i=y.getArrayFromDType(s,y.sizeFromShape(o));return i.fill(n),t.makeTensorInfo(o,s,i)}else{let i=new wb(o,n),a=[[n]];return t.runWebGLProgram(i,[],s,a)}}var Q_={kernelName:Fu,backendName:"webgl",kernelFunc:ci};var Cb=class{constructor(t){this.variableNames=["Image"],this.outputShape=[];let e=t[2];this.outputShape=t,this.userCode=`
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];

          int coordX = ${e} - x - 1;
          float outputValue;
          if(coordX >= 0 && coordX < ${e}) {
            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);
          } else {
            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);
          }
          setOutput(outputValue);
        }
    `}};var tO={kernelName:_u,backendName:"webgl",kernelFunc:({inputs:r,backend:t})=>{let{image:e}=r,o=t,n=new Cb(e.shape);return o.runWebGLProgram(n,[e],e.dtype)}};var eO="return floor(x);",F5=ht({opSnippet:eO,packedOpSnippet:eO,cpuKernelImpl:$R}),rO={kernelName:ms,backendName:"webgl",kernelFunc:F5};var _5=`
  float s = sign(a) * sign(b);
  int ia = round(a);
  int ib = round(b);
  if (ib != 0) {
    // Windows (D3D) wants guaranteed non-zero int division at compile-time.
    return float(idiv(ia, ib, s));
  } else {
    return NAN;
  }
`,O5=`
  ivec4 ia = round(a);
  ivec4 ib = round(b);
  bvec4 cond = notEqual(ib, ivec4(0));
  ivec4 result = ivec4(0);
  vec4 s = sign(a) * sign(b);

  // Windows (D3D) wants guaranteed non-zero int division at compile-time.
  if (cond[0]) {
    result[0] = idiv(ia[0], ib[0], s[0]);
  }
  if (cond[1]) {
    result[1] = idiv(ia[1], ib[1], s[1]);
  }
  if (cond[2]) {
    result[2] = idiv(ia[2], ib[2], s[2]);
  }
  if (cond[3]) {
    result[3] = idiv(ia[3], ib[3], s[3]);
  }
  return vec4(result);
`,L5=Ut({opSnippet:_5,packedOpSnippet:O5,dtype:"int32"}),oO={kernelName:fs,backendName:"webgl",kernelFunc:L5};var Sb=class{constructor(t){this.variableNames=["A"];let e=we(),[o,n]=t;this.outputShape=t,this.userCode=`
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${n}.0, ${o}.0);

        vec4 values = ${e.texture2D}(A, uv);
        float value;
        if (depth == 0) {
          value = values.r;
        } else if (depth == 1) {
          value = values.g;
        } else if (depth == 2) {
          value = values.b;
        } else if (depth == 3) {
          value = values.a;
        }

        setOutput(floor(value * 255.0 + 0.5));
      }
    `}};var Nb=class{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;let e=we(),[o,n]=t;this.outputShape=t,this.userCode=`
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];

        vec4 result = vec4(0.);

        for(int row=0; row<=1; row++) {
          for(int col=0; col<=1; col++) {
            texC = coords[1] + row;
            depth = coords[2] + col;

            vec2 uv = (vec2(texC, texR) + halfCR) /
                       vec2(${n}.0, ${o}.0);
            vec4 values = ${e.texture2D}(A, uv);
            float value;
            if (depth == 0) {
              value = values.r;
            } else if (depth == 1) {
              value = values.g;
            } else if (depth == 2) {
              value = values.b;
            } else if (depth == 3) {
              value = values.a;
            }

            result[row * 2 + col] = floor(value * 255.0 + 0.5);
          }
        }

        ${e.output} = result;
      }
    `}};var nO={kernelName:mm,backendName:"webgl",kernelFunc:P5},om,jS=z().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");function P5(r){let{inputs:t,backend:e,attrs:o}=r,{pixels:n}=t,{numChannels:s}=o,i=typeof HTMLVideoElement<"u"&&n instanceof HTMLVideoElement,a=typeof HTMLImageElement<"u"&&n instanceof HTMLImageElement,[l,u]=i?[n.videoWidth,n.videoHeight]:[n.width,n.height],c=[u,l],p=[u,l,s];if(a||i){let g=z().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");(om==null||g!==jS)&&(jS=g,om=document.createElement("canvas").getContext("2d",{willReadFrequently:jS})),om.canvas.width=l,om.canvas.height=u,om.drawImage(n,0,0,l,u),n=om.canvas}let m=e.makeTensorInfo(c,"int32");e.texData.get(m.dataId).usage=br.PIXELS,e.gpgpu.uploadPixelDataToTexture(e.getTexture(m.dataId),n);let f=z().getBool("WEBGL_PACK")?new Nb(p):new Sb(p),h=e.runWebGLProgram(f,[m],"int32");return e.disposeData(m.dataId),h}function z5(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s,bias:i,preluActivationWeights:a}=t,{strides:l,pad:u,dataFormat:c,dilations:p,dimRoundingMode:m,activation:f,leakyreluAlpha:h}=o,g=I.convertConv2DDataFormat(c),d=I.computeConv2DInfo(n.shape,s.shape,l,p,u,m,!1,g),x,b=[],S=i!=null,w=a!=null,T=f==="leakyrelu",$=()=>{let F=[n,s],O=(P,B)=>{if(B==="NCHW"&&P.shape.length===1&&P.shape[0]!==1){let V=Q({inputs:{x:P},backend:e,attrs:{shape:[P.shape[0],1,1]}});return b.push(V),V}return P};if(S&&F.push(O(i,c)),w&&F.push(O(a,c)),T){let P=e.makeTensorInfo([],"float32",y.createScalarValue(h,"float32"));F.push(P),b.push(P)}return F};if(d.filterHeight===1&&d.filterWidth===1&&d.dilationHeight===1&&d.dilationWidth===1&&d.strideHeight===1&&d.strideWidth===1&&(d.padInfo.type==="SAME"||d.padInfo.type==="VALID"))x=nb({x:n,filter:s,convInfo:d,backend:e,bias:i,activation:f,preluActivationWeights:a,leakyreluAlpha:h});else if(d.strideWidth<=2&&g==="channelsLast"&&z().getBool("WEBGL_EXP_CONV")){let F=f?li(f,!0):null,O=new tm(d,S,F,w,T),P=[[d.padInfo.top,d.padInfo.left],[d.strideHeight,d.strideWidth],[d.dilationHeight,d.dilationWidth],[d.inHeight,d.inWidth]],B=$();x=e.runWebGLProgram(O,B,"float32",P)}else if(z().getBool("WEBGL_CONV_IM2COL"))x=sb({x:n,filter:s,convInfo:d,backend:e,bias:i,activation:f,preluActivationWeights:a,leakyreluAlpha:h});else{let F=f?li(f,!1):null,O=new Qp(d,S,F,w,T),P=$();x=e.runWebGLProgram(O,P,"float32")}let R=Q({inputs:{x},backend:e,attrs:{shape:d.outShape}});return b.push(x),b.forEach(F=>e.disposeIntermediateTensorInfo(F)),R}var sO={kernelName:al,backendName:"webgl",kernelFunc:z5};function M5(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s,bias:i,preluActivationWeights:a}=t,{strides:l,pad:u,dilations:c,dimRoundingMode:p,activation:m,leakyreluAlpha:f}=o,h=[],g=c;g==null&&(g=[1,1]),y.assert(I.eitherStridesOrDilationsAreOne(l,g),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${g}'`);let d=I.computeConv2DInfo(n.shape,s.shape,l,g,u,p,!0),x=z().getBool("WEBGL_PACK_DEPTHWISECONV")&&d.strideWidth<=2&&d.outChannels/d.inChannels===1,b=m?li(m,x):null,S=[n,s],w=i!=null,T=a!=null,$=m==="leakyrelu";if(w&&S.push(i),T&&S.push(a),$){let P=e.makeTensorInfo([],"float32",y.createScalarValue(f,"float32"));S.push(P),h.push(P)}let R;x?R=new rm(d,w,b,T,$):R=new em(d,w,b,T,$);let F=[[d.padInfo.top,d.padInfo.left],[d.strideHeight,d.strideWidth],[d.dilationHeight,d.dilationWidth],[d.inHeight,d.inWidth]],O=e.runWebGLProgram(R,S,"float32",F);return h.forEach(P=>e.disposeIntermediateTensorInfo(P)),O}var iO={kernelName:ll,backendName:"webgl",kernelFunc:M5};var vb=class{constructor(t,e,o,n){this.sliceDim=t,this.strides=e,this.paramsShape=n,this.variableNames=["x","indices"],this.outputShape=o;let s=It(o.length),i=`
    int index;`;for(let a=0;a<this.sliceDim;a++)i+=`
          index = round(getIndices(coords[0], ${a}));
          out_of_bounds = out_of_bounds || index < 0;
          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[a]};
          flattenIndex += index * ${this.strides[a]};`;this.userCode=`
         void main() {
          ${s} coords = getOutputCoords();
          int flattenIndex = 0;
          bool out_of_bounds = false;

          ${i}

          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));
        }
      `}};function B5(r){let{inputs:t,backend:e}=r,{params:o,indices:n}=t,s=n.shape,i=s[s.length-1],a=y.sizeFromShape(o.shape),[l,u,c,p]=I.prepareAndValidate(o,n),m=Q({inputs:{x:n},backend:e,attrs:{shape:[u,i]}}),f=Q({inputs:{x:o},backend:e,attrs:{shape:[y.sizeFromShape(o.shape)/c,c]}});if(e.shouldExecuteOnCPU([o,n])||o.dtype==="string"){let x=e.readSync(n.dataId),b=e.bufferSync(o),S=AR(x,b,o.dtype,u,i,c,p,o.shape,a);return e.makeTensorInfo(l,o.dtype,S.values)}let h=new vb(i,p,[u,c],o.shape),g=e.runWebGLProgram(h,[f,m],f.dtype),d=Q({inputs:{x:g},backend:e,attrs:{shape:l}});return e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(g),d}var aO={kernelName:Ou,backendName:"webgl",kernelFunc:B5};var Tb=class{constructor(t,e){this.variableNames=["A","indices"],this.outputShape=e,this.rank=e.length;let o=It(this.rank),n=V5(t,2);this.userCode=`
      void main() {
        ${o} resRC = getOutputCoords();
        int index = int(getIndices(resRC.x, resRC.z));
        float inBounds = (index >= 0) && (index < ${t[2]}) ? 1.0 : 0.0;
        setOutput(inBounds * getA(${n}));
      }
    `}};function V5(r,t){let e=["resRC.x","resRC.y","resRC.z","resRC.w"],o=[];for(let n=0;n<r.length;n++)n===2?o.push("index"):o.push(`${e[n]}`);return o.join()}function XS(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,indices:s}=t,{axis:i,batchDims:a}=o,l=y.parseAxisParam(i,n.shape)[0];if(z().get("DEBUG")){let b=e.readSync(s.dataId),S=n.shape[l];for(let w=0;w<b.length;++w){let T=b[w];y.assert(T<=S-1&&T>=0,()=>`GatherV2: the index value ${T} is not in [0, ${S-1}]`)}}let u=I.segment_util.collectGatherOpShapeInfo(n,s,l,a),c=y.sizeFromShape(s.shape),p=[],m=Q({inputs:{x:n},backend:e,attrs:{shape:[u.batchSize,u.outerSize,u.dimSize,u.sliceSize]}}),f=Q({inputs:{x:s},backend:e,attrs:{shape:[u.batchSize,c/u.batchSize]}});p.push(m),p.push(f);let h=[u.batchSize,u.outerSize,c/u.batchSize,u.sliceSize];if(e.shouldExecuteOnCPU([n,s])||n.dtype==="string"){let b=e.bufferSync(f),S=e.bufferSync(m),w=DR(S,b,h);return p.forEach(T=>e.disposeIntermediateTensorInfo(T)),e.makeTensorInfo(u.outputShape,w.dtype,w.values)}let g=new Tb(m.shape,h),d=e.runWebGLProgram(g,[m,f],m.dtype);p.push(d);let x=Q({inputs:{x:d},backend:e,attrs:{shape:u.outputShape}});return p.forEach(b=>e.disposeIntermediateTensorInfo(b)),x}var lO={kernelName:_i,backendName:"webgl",kernelFunc:XS};var G5="return float(a > b);",W5=`
  return vec4(greaterThan(a, b));
`,U5=Ut({opSnippet:G5,packedOpSnippet:W5,cpuKernelImpl:RR,dtype:"bool"}),uO={kernelName:Ja,backendName:"webgl",kernelFunc:U5};var H5="return float(a >= b);",K5=`
  return vec4(greaterThanEqual(a, b));
`,q5=Ut({opSnippet:H5,packedOpSnippet:K5,dtype:"bool",cpuKernelImpl:FR}),cO={kernelName:hs,backendName:"webgl",kernelFunc:q5};function j5(r){let{inputs:t,backend:e}=r,{input:o}=t;return bb(o,!0,e)}var pO={kernelName:Lu,backendName:"webgl",kernelFunc:j5};var X5="return float(!isnan(x) && !isinf(x));",Y5=ht({opSnippet:X5,dtype:"bool"}),mO={kernelName:ds,backendName:"webgl",kernelFunc:Y5};var Z5="return float(isinf(x));",J5=ht({opSnippet:Z5,dtype:"bool"}),fO={kernelName:gs,backendName:"webgl",kernelFunc:J5};var Q5="return float(isnan(x));",t8=ht({opSnippet:Q5,dtype:"bool"}),hO={kernelName:xs,backendName:"webgl",kernelFunc:t8};var e8="return float(a < b);",r8=`
  return vec4(lessThan(a, b));
`,o8=Ut({opSnippet:e8,packedOpSnippet:r8,cpuKernelImpl:_R,dtype:"bool"}),dO={kernelName:Qa,backendName:"webgl",kernelFunc:o8};var n8="return float(a <= b);",s8=`
  return vec4(lessThanEqual(a, b));
`,i8=Ut({opSnippet:n8,packedOpSnippet:s8,cpuKernelImpl:OR,dtype:"bool"}),gO={kernelName:tl,backendName:"webgl",kernelFunc:i8};function a8(r){let{backend:t,attrs:e}=r,{start:o,stop:n,num:s}=e,i=LR(o,n,s);return t.makeTensorInfo([i.length],"float32",i)}var xO={kernelName:zu,backendName:"webgl",kernelFunc:a8};var l8=jo+`
  return x < 0.0 ? 0./0. : log(x);
`,u8=`
  vec4 result = log(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);
  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);
  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);
  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);
  return result;
`,c8=ht({opSnippet:l8,packedOpSnippet:u8,cpuKernelImpl:PR}),yO={kernelName:ys,backendName:"webgl",kernelFunc:c8};var p8=jo+`
  return log(1.0 + x);
`,m8=ht({opSnippet:p8}),bO={kernelName:bs,backendName:"webgl",kernelFunc:m8};var f8="return float(a >= 1.0 && b >= 1.0);",h8=`
  return vec4(
    vec4(greaterThanEqual(a, vec4(1.0))) *
    vec4(greaterThanEqual(b, vec4(1.0))));
`,d8=Ut({opSnippet:f8,packedOpSnippet:h8,dtype:"bool"}),wO={kernelName:el,backendName:"webgl",kernelFunc:d8};var g8="return float(!(x >= 1.0));",x8=ht({opSnippet:g8}),CO={kernelName:rl,backendName:"webgl",kernelFunc:x8};var y8="return float(a >= 1.0 || b >= 1.0);",b8=`
  return min(
    vec4(greaterThanEqual(a, vec4(1.0))) +
    vec4(greaterThanEqual(b, vec4(1.0))),
    vec4(1.0));
`,w8=Ut({opSnippet:y8,packedOpSnippet:b8,dtype:"bool"}),SO={kernelName:ol,backendName:"webgl",kernelFunc:w8};var Ib=class{constructor(t,e,o,n,s){this.variableNames=["x"],this.outputShape=[];let i=e,a=t[3]-1;this.outputShape=t;let l,u=`float(${o}) + float(${n}) * sum`;s===.5?l=`inversesqrt(${u})`:s===1?l=`1.0/(${u})`:l=`exp(log(${u}) * float(-${s}));`,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];
        int d = coords[3];
        float x = getX(b, r, c, d);
        float sum = 0.0;
        for (int j = -${i}; j <= ${i}; j++) {
          int idx = d + j;
          if (idx >= 0 && idx <=  ${a}) {
            float z = getX(b, r, c, idx);
            sum += z * z;
          }
        }
        float val = x * ${l};
        setOutput(val);
      }
    `}};var kb=class{constructor(t,e,o,n,s){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;let i=e,a=t[3]-1;this.outputShape=t;let l,u=`float(${o}) + float(${n}) * sum`;s===.5?l=`inversesqrt(${u})`:s===1?l=`1.0/(${u})`:l=`exp(log(${u}) * float(-${s}));`,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords.x;
        int r = coords.y;
        int c = coords.z;
        int d = coords.w;

        bool hasNextCol = d < ${this.outputShape[3]};
        bool hasNextRow = c < ${this.outputShape[2]};

        vec4 sum = vec4(0.);
        vec4 xFragAtOutputCoords = getX(b, r, c, d);

        vec4 xAtOutputCoords = vec4(
          getChannel(xFragAtOutputCoords, vec2(c, d)),
          hasNextCol ?
            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,
          hasNextRow ?
            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,
          (hasNextRow && hasNextCol) ?
            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0
        );

        int firstChannel = d - ${i};
        vec2 cache = vec2(0.);
        if(firstChannel >= 0){
          vec4 firstChannelFrag = getX(b, r, c, firstChannel);
          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));
            if(hasNextRow){
              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));
            }
        }

        ivec2 depth = ivec2(d, d + 1);
        for (int j = - ${i}; j <= ${i}; j++) {
          ivec2 idx = depth + j;
          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));
          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${a}));

          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;
          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;

          if(depthInRange || depthPlusOneInRange){
            vec4 z = vec4(0.);
            vec4 xFragAtCurrentDepth;
            z.xz = cache.xy;
            if(depthPlusOneInRange && hasNextCol){
              xFragAtCurrentDepth = idx.y != d ?
                getX(b, r, c, idx.y) : xFragAtOutputCoords;
              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));
              if(hasNextRow){
                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));
              }
            }
            cache.xy = z.yw;
            sum += z * z;
          }
        }
        vec4 result = xAtOutputCoords * ${l};
        setOutput(result);
      }
    `}};var C8=r=>{let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{depthRadius:s,bias:i,alpha:a,beta:l}=o,u=z().getBool("WEBGL_PACK_NORMALIZATION")?new kb(n.shape,s,i,a,l):new Ib(n.shape,s,i,a,l);return e.runWebGLProgram(u,[n],n.dtype)},NO={kernelName:Li,backendName:"webgl",kernelFunc:C8};var Eb=class{constructor(t,e,o,n,s){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=t,this.depth=t[3],this.depthRadius=e,this.bias=o,this.alpha=n,this.beta=s,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];

        float result = 0.0;
        for (int d = 0; d < ${this.depth}; ++d) {
          int depthBegin = int(max(0.0, float(d - ${e})));
          int depthEnd = int(min(float(${this.depth}),
              float(d + ${e} + 1)));

          const int MIN_DEPTH_BEGIN = 0;
          const int MAX_DEPTH_END = ${this.depth};

          float norm = 0.0;
          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd) {
              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);
            }
            else {
              break;
            }
          }

          norm = float(${n}) * norm + float(${o});

          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd){
              float dyi = -2.0 * float(${n})
                * float(${s})
                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d)
                / norm;
              if (k == d) {
                dyi += pow(norm, -1.0 * ${s});
              }
              if (k == coords[3]) {
                dyi *= getDy(b, r, c, d);
                result += dyi;
              }
            }
            else {
              break;
            }
          }
      }
      setOutput(result);
      }
    `}};var S8=r=>{let{inputs:t,backend:e,attrs:o}=r,{x:n,y:s,dy:i}=t,{depthRadius:a,bias:l,alpha:u,beta:c}=o,p=new Eb(n.shape,a,l,u,c);return e.runWebGLProgram(p,[n,s,i],n.dtype)},vO={kernelName:Mu,backendName:"webgl",kernelFunc:S8};function TO(r,t,e,o){let n=y.sizeFromShape(t),i=y.sizeFromShape(r.shape)/n,a=Q({inputs:{x:r},attrs:{shape:[i,n]},backend:o}),l=fo(a,r.dtype,"max",o),u=Q({inputs:{x:l},attrs:{shape:e},backend:o});return o.disposeIntermediateTensorInfo(a),o.disposeIntermediateTensorInfo(l),u}function YS(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{reductionIndices:s,keepDims:i}=o,a=n.shape.length,l=y.parseAxisParam(s,n.shape),u=l,c=I.getAxesPermutation(u,a),p=c!=null,m=e.shouldExecuteOnCPU([n]),f=n;if(p){if(m){let S=e.texData.get(f.dataId).values,w=new Array(a);for(let R=0;R<w.length;R++)w[R]=n.shape[c[R]];let T=tu(S,n.shape,n.dtype,c,w);f=e.makeTensorInfo(w,n.dtype);let $=e.texData.get(f.dataId);$.values=T}else f=Wa(n,c,e);u=I.getInnerMostAxes(u.length,a)}I.assertAxesAreInnerMostDims("max",u,a);let[h,g]=I.computeOutAndReduceShapes(f.shape,u),d=h;i&&(d=I.expandShapeToKeepDim(h,l));let x;if(m){let S=e.texData.get(f.dataId).values,w=zR(S,y.sizeFromShape(g),d,n.dtype);x=e.makeTensorInfo(d,n.dtype);let T=e.texData.get(x.dataId);T.values=w}else x=TO(f,g,d,e);return p&&e.disposeIntermediateTensorInfo(f),x}var IO={kernelName:Pi,backendName:"webgl",kernelFunc:YS};var N8=Yp+`
  return max(a, b);
`,v8=`
  vec4 result = vec4(max(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  `+mo+`
  return result;
`,T8=Ut({opSnippet:N8,packedOpSnippet:v8,cpuKernelImpl:MR}),kO={kernelName:ws,backendName:"webgl",kernelFunc:T8};function I8(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t;Wn(n,"maxPool");let{filterSize:s,strides:i,pad:a,dimRoundingMode:l}=o,u=1;y.assert(I.eitherStridesOrDilationsAreOne(i,u),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${u}'`);let c=I.computePool2DInfo(n.shape,s,i,u,a,l);if(c.filterWidth===1&&c.filterHeight===1&&y.arraysEqual(c.inShape,c.outShape))return De({inputs:{x:n},backend:e});let p=new hn(c,"max",!1);return e.runWebGLProgram(p,[n],n.dtype)}var EO={kernelName:zi,backendName:"webgl",kernelFunc:I8};function k8(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{filterSize:s,strides:i,pad:a,dataFormat:l,dimRoundingMode:u}=o,c=[1,1,1],p=I.computePool3DInfo(n.shape,s,i,c,a,u,l),m=new Ua(p,"max",!1);return e.runWebGLProgram(m,[n],n.dtype)}var $O={kernelName:Mi,backendName:"webgl",kernelFunc:k8};var $b=class{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;let e=t.strideHeight,o=t.strideWidth,n=t.dilationHeight,s=t.effectiveFilterHeight,i=t.effectiveFilterWidth,a=s-1-t.padInfo.top,l=i-1-t.padInfo.left,u=s*i-1;this.userCode=`
      const ivec2 pads = ivec2(${a}, ${l});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${s};
          wR += ${n}) {
          float dyR = float(dyRCorner + wR) / ${e}.0;

          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${i}; wC++) {
            float dyC = float(dyCCorner + wC) / ${o}.0;

            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);
            int maxPosValue = ${u} - int(getMaxPos(b, idyR, idyC, d));

            // Get the current value, check it against the value from the
            // position matrix.
            int curPosValue = wR * ${i} + wC;
            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

            dotProd += dyValue * mask;
          }
        }
        setOutput(dotProd);
      }
    `}},Ab=class{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;let e=t.strideDepth,o=t.strideHeight,n=t.strideWidth,s=t.dilationDepth,i=t.dilationHeight,a=t.dilationWidth,l=t.effectiveFilterDepth,u=t.effectiveFilterHeight,c=t.effectiveFilterWidth,p=l-1-t.padInfo.front,m=u-1-t.padInfo.top,f=c-1-t.padInfo.left,h=l*u*c-1;this.userCode=`
      const ivec3 pads = ivec3(${p}, ${m}, ${f});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${l};
           wD += ${s}) {
          float dyD = float(dyDCorner + wD) / ${e}.0;

          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${u};
              wR += ${i}) {
            float dyR = float(dyRCorner + wR) / ${o}.0;

            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${c};
                wC += ${a}) {
              float dyC = float(dyCCorner + wC) / ${n}.0;

              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);
              int maxPosValue = ${h} -
                  int(getMaxPos(batch, idyD, idyR, idyC, ch));

              // Get the current value, check it against the value from the
              // position matrix.
              int curPosValue =
                  wD * ${u} * ${c} +
                  wR * ${c} + wC;
              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

              dotProd += dyValue * mask;
            }
          }
        }
        setOutput(dotProd);
      }
    `}};function E8(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s}=t,i=s,{filterSize:a,strides:l,pad:u,dimRoundingMode:c}=o,p=[1,1,1],m=I.computePool3DInfo(i.shape,a,l,p,u,c),f=new Ua(m,"max",!0),h=e.runWebGLProgram(f,[i],i.dtype),g=new Ab(m),d=e.runWebGLProgram(g,[n,h],i.dtype);return e.disposeIntermediateTensorInfo(h),d}var AO={kernelName:Vu,backendName:"webgl",kernelFunc:E8};function $8(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s,output:i}=t,a=s;Wn([s,i],"maxPoolGrad");let{filterSize:l,strides:u,pad:c,dimRoundingMode:p}=o,m=I.computePool2DInfo(a.shape,l,u,1,c,p),f=!0,h=new hn(m,"max",f),g=e.runWebGLProgram(h,[a],a.dtype),d=new $b(m),x=e.runWebGLProgram(d,[n,g],a.dtype);return e.disposeIntermediateTensorInfo(g),x}var DO={kernelName:Bu,backendName:"webgl",kernelFunc:$8};function RO(r,t,e,o){let n=new hn(e,"max",!1),s=o.runWebGLProgram(n,[r],"float32");n=new hn(e,"max",!0,!0,t);let i=o.runWebGLProgram(n,[r],"float32");return[s,i]}var FO={kernelName:Gu,backendName:"webgl",kernelFunc:({inputs:r,attrs:t,backend:e})=>{let{x:o}=r,{filterSize:n,strides:s,pad:i,includeBatchInIndex:a}=t,l=e;y.assert(o.shape.length===4,()=>`Error in maxPool: input must be rank 4 but got rank ${o.shape.length}.`);let u=[1,1];y.assert(I.eitherStridesOrDilationsAreOne(s,u),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${s} and dilations '${u}'`);let c=I.computePool2DInfo(o.shape,n,s,u,i),[p,m]=RO(o,a,c,l);return[p,m]}};function _O(r,t,e,o){let n=y.sizeFromShape(t),i=y.sizeFromShape(r.shape)/n,a=Q({inputs:{x:r},attrs:{shape:[i,n]},backend:o}),l=fo(a,"float32","mean",o),u=Q({inputs:{x:l},attrs:{shape:e},backend:o});return o.disposeIntermediateTensorInfo(a),o.disposeIntermediateTensorInfo(l),u}var OO={kernelName:Bi,backendName:"webgl",kernelFunc:({inputs:r,attrs:t,backend:e})=>{let{x:o}=r,{keepDims:n,axis:s}=t,i=e,a=o.shape.length,l=y.parseAxisParam(s,o.shape),u=l,c=I.getAxesPermutation(u,a),p=c!=null,m=i.shouldExecuteOnCPU([o]),f=[],h=o;if(p){if(m){let w=i.texData.get(h.dataId).values,T=new Array(a);for(let F=0;F<T.length;F++)T[F]=o.shape[c[F]];let $=tu(w,o.shape,o.dtype,c,T);h=i.makeTensorInfo(T,o.dtype);let R=i.texData.get(h.dataId);R.values=$}else h=Wa(o,c,i);f.push(h),u=I.getInnerMostAxes(u.length,a)}I.assertAxesAreInnerMostDims("sum",u,a);let[g,d]=I.computeOutAndReduceShapes(h.shape,u),x=g;n&&(x=I.expandShapeToKeepDim(g,l));let b=_O(h,d,x,i);for(let S of f)i.disposeIntermediateTensorInfo(S);return b}};function A8(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o,a=n.shape.length,l=y.parseAxisParam(s,n.shape),u=l,c=I.getAxesPermutation(u,a),p=n;c!=null&&(p=pe({inputs:{x:n},backend:e,attrs:{perm:c}}),u=I.getInnerMostAxes(u.length,n.shape.length)),I.assertAxesAreInnerMostDims("min",u,a);let[m,f]=I.computeOutAndReduceShapes(p.shape,u),h=y.sizeFromShape(f),g=Q({inputs:{x:p},backend:e,attrs:{shape:[-1,h]}}),d=fo(g,g.dtype,"min",e),x;if(i){let b=I.expandShapeToKeepDim(m,l);x=Q({inputs:{x:d},backend:e,attrs:{shape:b}})}else x=Q({inputs:{x:d},backend:e,attrs:{shape:m}});return e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(d),c!=null&&e.disposeIntermediateTensorInfo(p),x}var LO={kernelName:Vi,backendName:"webgl",kernelFunc:A8};var D8=Yp+`
  return min(a, b);
`,R8=`
  vec4 result = vec4(min(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  `+mo+`
  return result;
`,F8=Ut({opSnippet:D8,packedOpSnippet:R8,cpuKernelImpl:BR}),PO={kernelName:Cs,backendName:"webgl",kernelFunc:F8};var Db=class{constructor(t,e,o){this.variableNames=["x"],this.outputShape=e.map((c,p)=>c[0]+t[p]+c[1]);let n=t.length,s=It(n),i=e.map(c=>c[0]).join(","),a=e.map((c,p)=>c[0]+t[p]).join(","),l=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,n),u=o==="reflect"?0:1;if(n===1){this.userCode=`
        int start = ${i};
        int end = ${a};

        void main() {
          int outC = getOutputCoords();
          if (outC < start) {
            outC = start * 2 - outC - ${u};
          } else if(outC >= end) {
            outC = (end - 1) * 2 - outC + ${u};
          }
          setOutput(getX(outC - start));
        }
      `;return}this.userCode=`
      ${s} start = ${s}(${i});
      ${s} end = ${s}(${a});

      void main() {
        ${s} outC = getOutputCoords();
        for (int i = 0; i < ${n}; i++) {
          if (outC[i] < start[i]) {
            outC[i] = start[i] * 2 - outC[i] - ${u};
          } else if(outC[i] >= end[i]) {
            outC[i] = (end[i] - 1) * 2 - outC[i] + ${u};
          }
        }
        ${s} coords = outC - start;
        setOutput(getX(${l}));
      }
    `}};var Rb=class{constructor(t,e,o){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.map((h,g)=>h[0]+t[g]+h[1]);let n=t.length,s=It(n),i=e.map(h=>h[0]).join(","),a=e.map((h,g)=>h[0]+t[g]).join(","),l=Ae("rc",n),u=Ae("source",n),c=`${l[n-1]} < ${this.outputShape[n-1]}`,p=n===1?"source":`vec2(${u.slice(-2).join()})`,m=o==="reflect"?0:1,f="";if(n===1){let h=`
        ${s} source = rc;
        if (source < start) {
          source = start * 2 - source - ${m};
        } else if (source >= end) {
          source = (end - 1) * 2 - source + ${m};
        }
        source -= start;
      `;f=`
        ${s} rc = outputLoc;
        ${h}
        result[0] = getChannel(getX(${u.join()}), ${p});
        ${l[n-1]} += 1;
        if(${c}) {
          ${h}
          result[1] = getChannel(getX(${u.join()}), ${p});
        }
      `}else{let h=`
        ${s} source = rc;
        ${s} lt = ${s}(lessThan(source, start));
        ${s} gte = ${s}(greaterThanEqual(source, end));
        ${s} orig = 1 - (lt + gte);
        source = orig * source +
                lt * (start * 2 - source - ${m}) +
                gte * ((end - 1) * 2 - source + ${m});
        source -= start;
      `;f=`
        ${s} rc = outputLoc;
        ${h}
        result[0] = getChannel(getX(${u.join()}), ${p});
        ${l[n-1]} += 1;
        if(${c}) {
          ${h}
          result[1] = getChannel(getX(${u.join()}), ${p});
        }
        rc = outputLoc;
        ${l[n-2]} += 1;
        if(${l[n-2]} < ${this.outputShape[n-2]}) {
          ${h}
          result[2] = getChannel(getX(${u.join()}), ${p});
          ${l[n-1]} += 1;
          if(${c}) {
            ${h}
            result[3] = getChannel(getX(${u.join()}), ${p});
          }
        }
      `}this.userCode=`
      const ${s} start = ${s}(${i});
      const ${s} end = ${s}(${a});

      void main() {
        ${s} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${f}
        setOutput(result);
      }
    `}};var _8=({inputs:r,backend:t,attrs:e})=>{let{x:o}=r,{paddings:n,mode:s}=e,i=z().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Rb(o.shape,n,s):new Db(o.shape,n,s);return t.runWebGLProgram(i,[o],o.dtype)},zO={kernelName:Gi,backendName:"webgl",kernelFunc:_8};var O8=`if (b == 0.0) return NAN;
  return mod(a, b);`,L8=`
  vec4 result = mod(a, b);
  bvec4 isNaN = equal(b, vec4(0.0));
  `+mo+`
  return result;
`,P8=Ut({opSnippet:O8,packedOpSnippet:L8}),MO={kernelName:Ss,backendName:"webgl",kernelFunc:P8};var Fb=class{constructor(t,e,o){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[t,o],this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];

        float r = random(seed);
        float cdf = 0.0;

        for (int i = 0; i < ${e-1}; i++) {
          cdf += getProbs(batch, i);

          if (r < cdf) {
            setOutput(float(i));
            return;
          }
        }

        // If no other event happened, last event happened.
        setOutput(float(${e-1}));
      }
    `}};var z8=`
if (a == b) {
  return 1.0;
};
return a / b;`,M8=`
  // vec4 one = vec4(equal(a, b));
  // return one + (vec4(1.0) - one) * a / b;
  vec4 result = a / b;
  if(a.x == b.x) {
    result.x = 1.;
  }
  if(a.y == b.y) {
    result.y = 1.;
  }
  if(a.z == b.z) {
    result.z = 1.;
  }
  if(a.w == b.w) {
    result.w = 1.;
  }

  return result;
`,ZS=Ut({opSnippet:z8,packedOpSnippet:M8,checkOutOfBounds:!0}),BO={kernelName:as,backendName:"webgl",kernelFunc:ZS};var VO="return a - b;",JS=Ut({opSnippet:VO,packedOpSnippet:VO,supportsComplex:!0,cpuKernelImpl:aF}),GO={kernelName:zs,backendName:"webgl",kernelFunc:JS};function QS(r){let{inputs:t,backend:e,attrs:o}=r,{logits:n}=t,{dim:s}=o,i=y.parseAxisParam([s],n.shape),a=YS({inputs:{x:n},backend:e,attrs:{reductionIndices:i,keepDims:!1}}),l=I.expandShapeToKeepDim(a.shape,i),u=Q({inputs:{x:a},backend:e,attrs:{shape:l}}),c=JS({inputs:{a:n,b:u},backend:e}),p=qS({inputs:{x:c},backend:e}),m=ru({inputs:{x:p},backend:e,attrs:{axis:i,keepDims:!1}}),f=Q({inputs:{x:m},backend:e,attrs:{shape:l}}),h=ZS({inputs:{a:p,b:f},backend:e});return e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(c),e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(f),h}var WO={kernelName:sa,backendName:"webgl",kernelFunc:QS};function B8(r){let{inputs:t,backend:e,attrs:o}=r,{logits:n}=t,{numSamples:s,seed:i,normalized:a}=o,l=a?n:QS({inputs:{logits:n},backend:e,attrs:{dim:n.shape.length-1}}),u=l.shape[0],c=l.shape[1],p=new Fb(u,c,s),m=[[i]],f=e.runWebGLProgram(p,[l],"int32",m);return a||e.disposeIntermediateTensorInfo(l),f}var UO={kernelName:Wu,backendName:"webgl",kernelFunc:B8};var V8=Ue+`
  return -x;
`,G8=`
  vec4 result = -x;
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;function W8(r){let{inputs:t,backend:e}=r,{x:o}=t;if(e.shouldExecuteOnCPU([o])){let s=e.texData.get(o.dataId),[i,a]=GR(s.values,o.shape,o.dtype);return e.makeTensorInfo(a,o.dtype,i)}let n;return z().getBool("WEBGL_PACK_UNARY_OPERATIONS")?n=new Zr(o.shape,G8):n=new ur(o.shape,V8),e.runWebGLProgram(n,[o],o.dtype)}var HO={kernelName:Wi,backendName:"webgl",kernelFunc:W8};var U8=gr.nonMaxSuppressionV3Impl;function H8(r){I.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:t,backend:e,attrs:o}=r,{boxes:n,scores:s}=t,{maxOutputSize:i,iouThreshold:a,scoreThreshold:l}=o,u=e.readSync(n.dataId),c=e.readSync(s.dataId),{selectedIndices:p}=U8(u,c,i,a,l);return e.makeTensorInfo([p.length],"int32",new Int32Array(p))}var KO={kernelName:Uu,backendName:"webgl",kernelFunc:H8};var K8=gr.nonMaxSuppressionV4Impl;function q8(r){I.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:t,backend:e,attrs:o}=r,{boxes:n,scores:s}=t,{maxOutputSize:i,iouThreshold:a,scoreThreshold:l,padToMaxOutputSize:u}=o,c=e.readSync(n.dataId),p=e.readSync(s.dataId),{selectedIndices:m,validOutputs:f}=K8(c,p,i,a,l,u);return[e.makeTensorInfo([m.length],"int32",new Int32Array(m)),e.makeTensorInfo([],"int32",new Int32Array([f]))]}var qO={kernelName:Hu,backendName:"webgl",kernelFunc:q8};var j8=gr.nonMaxSuppressionV5Impl;function X8(r){I.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:t,backend:e,attrs:o}=r,{boxes:n,scores:s}=t,{maxOutputSize:i,iouThreshold:a,scoreThreshold:l,softNmsSigma:u}=o,c=e.readSync(n.dataId),p=e.readSync(s.dataId),m=i,f=a,h=l,g=u,{selectedIndices:d,selectedScores:x}=j8(c,p,m,f,h,g);return[e.makeTensorInfo([d.length],"int32",new Int32Array(d)),e.makeTensorInfo([x.length],"float32",new Float32Array(x))]}var jO={kernelName:Ku,backendName:"webgl",kernelFunc:X8};var _b=class{constructor(t,e,o,n){this.variableNames=["indices"],this.outputShape=[t,e],this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int index = round(getIndices(coords.x));
        setOutput(mix(float(${n}), float(${o}),
                      float(index == coords.y)));
      }
    `}};var Y8=r=>{let{inputs:t,backend:e,attrs:o}=r,{indices:n}=t,{dtype:s,depth:i,onValue:a,offValue:l}=o,u=y.sizeFromShape(n.shape),c=new _b(u,i,a,l),p=Q({inputs:{x:n},backend:e,attrs:{shape:[u]}}),m=e.runWebGLProgram(c,[p],s);e.disposeIntermediateTensorInfo(p);let f=[...n.shape,i],h=Q({inputs:{x:m},backend:e,attrs:{shape:f}});return e.disposeIntermediateTensorInfo(m),h},XO={kernelName:Hi,backendName:"webgl",kernelFunc:Y8};function _h(r){let{inputs:t,backend:e}=r,{x:o}=t;if(o.dtype==="complex64"){let n=ui({inputs:{input:o},backend:e}),s=_h({inputs:{x:n},backend:e}),i=nu({inputs:{input:o},backend:e}),a=_h({inputs:{x:i},backend:e}),l=Jr({inputs:{real:s,imag:a},backend:e});return e.disposeIntermediateTensorInfo(n),e.disposeIntermediateTensorInfo(s),e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(a),l}else return ci({attrs:{shape:o.shape,dtype:o.dtype,value:o.dtype==="string"?"":0},backend:e})}var YO={kernelName:la,backendName:"webgl",kernelFunc:_h};function ZO(r){let{inputs:t,backend:e}=r,{x:o}=t;if(o.dtype==="string")throw new Error("onesLike is not supported under string dtype");if(o.dtype==="complex64"){let n=ui({inputs:{input:o},backend:e}),s=ZO({inputs:{x:n},backend:e}),i=nu({inputs:{input:o},backend:e}),a=_h({inputs:{x:i},backend:e}),l=Jr({inputs:{real:s,imag:a},backend:e});return e.disposeIntermediateTensorInfo(n),e.disposeIntermediateTensorInfo(s),e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(a),l}else return ci({attrs:{shape:o.shape,dtype:o.dtype,value:1},backend:e})}var JO={kernelName:Ui,backendName:"webgl",kernelFunc:ZO};function Z8(r){let{inputs:t,backend:e,attrs:o}=r,{axis:n}=o;if(t.length===1)return yb({inputs:{input:t[0]},backend:e,attrs:{dim:n}});let s=t[0].shape,i=t[0].dtype;t.forEach(c=>{y.assertShapesMatch(s,c.shape,"All tensors passed to stack must have matching shapes"),y.assert(i===c.dtype,()=>"All tensors passed to stack must have matching dtypes")});let a=[],l=t.map(c=>{let p=yb({inputs:{input:c},backend:e,attrs:{dim:n}});return a.push(p),p}),u=KS({inputs:l,backend:e,attrs:{axis:n}});return a.forEach(c=>e.disposeIntermediateTensorInfo(c)),u}var QO={kernelName:Ki,backendName:"webgl",kernelFunc:Z8};var Ob=class{constructor(t,e,o){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=e.map((u,c)=>u[0]+t[c]+u[1]);let n=t.length,s=It(n),i=e.map(u=>u[0]).join(","),a=e.map((u,c)=>u[0]+t[c]).join(","),l=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,n);if(n===1){this.userCode=`
        int start = ${i};
        int end = ${a};

        void main() {
          int outC = getOutputCoords();
          if (outC < start || outC >= end) {
            setOutput(value);
          } else {
            setOutput(getX(outC - start));
          }
        }
      `;return}this.userCode=`
      ${s} start = ${s}(${i});
      ${s} end = ${s}(${a});

      void main() {
        ${s} outC = getOutputCoords();
        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {
          setOutput(value);
        } else {
          ${s} coords = outC - start;
          setOutput(getX(${l}));
        }
      }
    `}};var Lb=class{constructor(t,e,o){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=e.map((g,d)=>g[0]+t[d]+g[1]);let n=t.length,s=It(n),i=e.map(g=>g[0]).join(","),a=e.map((g,d)=>g[0]+t[d]).join(","),l=Ae("rc",n),u=Ae("source",n),c=`${l[n-1]} < ${this.outputShape[n-1]}`,p=n===1?"source":`vec2(${u.slice(-2).join()})`,m=[`${s} rc = outputLoc;`,`${l[n-1]} += 1;
       if(${c}) {
      `,n===1?"":`}
       rc = outputLoc;
       ${l[n-2]} += 1;
       if(${l[n-2]} < ${this.outputShape[n-2]}) {`,n===1?"":`  ${l[n-1]} += 1;
         if(${c}) {`],f=n===1?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))",h="";for(let g=0,d=n===1?2:4;g<d;g++)h+=`
        ${m[g]}
        if (${f}) {
          result[${g}] = float(value);
        } else {
          ${s} source = rc - start;
          result[${g}] = getChannel(getX(${u.join()}), ${p});
        }
      `;h+=n===1?"} ":"}}",this.userCode=`
      const ${s} start = ${s}(${i});
      const ${s} end = ${s}(${a});

      void main() {
        ${s} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${h}
        setOutput(result);
      }
    `}};var tN=r=>{let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{paddings:s,constantValue:i}=o;if(y.sizeFromShape(n.shape)===0){let u=s.map((c,p)=>c[0]+n.shape[p]+c[1]);return ci({backend:e,attrs:{shape:u,value:i,dtype:n.dtype}})}let a=z().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Lb(n.shape,s,i):new Ob(n.shape,s,i),l=[[i]];return e.runWebGLProgram(a,[n],n.dtype,l)},tL={kernelName:qi,backendName:"webgl",kernelFunc:tN};var J8=`
  if(a < 0.0 && floor(b) < b){
    return NAN;
  }
  if (b == 0.0) {
    return 1.0;
  }
  return (round(mod(b, 2.0)) != 1) ?
      pow(abs(a), b) : sign(a) * pow(abs(a), b);
`,Q8=`
  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.
  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));
  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);
  vec4 result = multiplier * pow(abs(a), b);

  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS
  bvec4 isExpZero = equal(b, vec4(0.0));
  result.r = isExpZero.r ? 1.0 : result.r;
  result.g = isExpZero.g ? 1.0 : result.g;
  result.b = isExpZero.b ? 1.0 : result.b;
  result.a = isExpZero.a ? 1.0 : result.a;

  bvec4 isNaN1 = lessThan(a, vec4(0.0));
  bvec4 isNaN2 = lessThan(floor(b), b);
  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);
  `+mo+`
  return result;
`,tY=Ut({opSnippet:J8,packedOpSnippet:Q8}),eL={kernelName:vs,backendName:"webgl",kernelFunc:tY};function eY(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:i}=o,a=n.shape.length,l=[],u=y.parseAxisParam(s,n.shape),c=u,p=I.getAxesPermutation(c,a),m=n;p!=null&&(m=pe({inputs:{x:n},backend:e,attrs:{perm:p}}),c=I.getInnerMostAxes(c.length,a),l.push(m)),I.assertAxesAreInnerMostDims("prod",c,a);let f;if(e.shouldExecuteOnCPU([m])){let h=e.texData.get(m.dataId).values,{outVals:g,outShape:d,outDtype:x}=UR(m.shape,m.dtype,h,c);f=e.makeTensorInfo(d,x,g)}else{let[h,g]=I.computeOutAndReduceShapes(m.shape,c),d=y.sizeFromShape(g),x=Q({inputs:{x:m},backend:e,attrs:{shape:[-1,d]}}),b=hl(n.dtype),S=fo(x,b,"prod",e);f=Q({inputs:{x:S},backend:e,attrs:{shape:h}}),l.push(x),l.push(S)}if(i){l.push(f);let h=I.expandShapeToKeepDim(f.shape,u);f=Q({inputs:{x:f},backend:e,attrs:{shape:h}})}return l.forEach(h=>e.disposeIntermediateTensorInfo(h)),f}var rL={kernelName:Xi,backendName:"webgl",kernelFunc:eY};function rY(r){let{inputs:t,backend:e,attrs:o}=r,{paramsNestedSplits:n,paramsDenseValues:s,indices:i}=t,{outputRaggedRank:a}=o,l=n.map(x=>e.readSync(x.dataId)),u=n.map(x=>x.shape),c=e.readSync(s.dataId),p=e.readSync(i.dataId),[m,f,h]=HR(l,u,c,s.shape,s.dtype,p,i.shape,a),g=m.map(x=>e.makeTensorInfo([x.length],"int32",x)),d=e.makeTensorInfo(h,s.dtype,f);return g.concat([d])}var oL={kernelName:qu,backendName:"webgl",kernelFunc:rY};function oY(r){let{inputs:t,backend:e}=r,{starts:o,limits:n,deltas:s}=t,i=e.readSync(o.dataId),a=e.readSync(n.dataId),l=e.readSync(s.dataId),[u,c]=KR(i,o.shape,o.dtype,a,n.shape,l,s.shape),p=e.makeTensorInfo([u.length],"int32",u),m=e.makeTensorInfo([c.length],o.dtype,c);return[p,m]}var nL={kernelName:ju,backendName:"webgl",kernelFunc:oY};function nY(r){let{inputs:t,backend:e,attrs:o}=r,{shape:n,values:s,defaultValue:i,rowPartitionTensors:a}=t,{rowPartitionTypes:l}=o,u=e.readSync(n.dataId),c=e.readSync(s.dataId),p=e.readSync(i.dataId),m=a.map(d=>e.readSync(d.dataId)),f=a.map(d=>d.shape),[h,g]=qR(u,n.shape,c,s.shape,s.dtype,p,i.shape,m,f,l);return e.makeTensorInfo(h,s.dtype,g)}var sL={kernelName:Xu,backendName:"webgl",kernelFunc:nY};var eN=r=>{let{backend:t,attrs:e}=r,{start:o,stop:n,step:s,dtype:i}=e,a=jR(o,n,s,i);return t.makeTensorInfo([a.length],i,a)},iL={kernelName:Yu,backendName:"webgl",kernelFunc:eN};var sY="return 1.0 / x;",iY=ht({opSnippet:sY}),aL={kernelName:Ts,backendName:"webgl",kernelFunc:iY};var aY=Ue+`
  return (x < 0.0) ? 0.0 : x;
`,lY=`
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,uY=ht({opSnippet:aY,packedOpSnippet:lY}),lL={kernelName:Is,backendName:"webgl",kernelFunc:uY};var cY=Ue+`
  return (x < 0.0) ? 0.0 : min(6.0, x);
`,pY=`
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,mY=ht({opSnippet:cY,packedOpSnippet:pY}),uL={kernelName:ks,backendName:"webgl",kernelFunc:mY};var Pb=class{constructor(t,e,o,n,s){this.variableNames=["A"],this.outputShape=[];let[i,a,l,u]=t;this.outputShape=[i,e,o,u];let c=[n&&e>1?a-1:a,n&&o>1?l-1:l],p=[n&&e>1?e-1:e,n&&o>1?o-1:o],m;s?m="(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":m="vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${c[0]/p[0]},
          ${c[1]/p[1]});
      const vec2 inputShapeRC = vec2(${a}.0, ${l}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${m};

        // Compute the four integer indices.
        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));
        ivec2 sourceCeilRC = ivec2(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);
        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);
        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);
        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);

        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);

        float top = topLeft + (topRight - topLeft) * fracRC.y;
        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;
        float newValue = top + (bottom - top) * fracRC.x;

        setOutput(newValue);
      }
    `}};var zb=class{constructor(t,e,o,n,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];let[i,a,l,u]=t;this.outputShape=[i,e,o,u];let c=[n&&e>1?a-1:a,n&&o>1?l-1:l],p=[n&&e>1?e-1:e,n&&o>1?o-1:o],m;s?m="(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":m="vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${c[0]/p[0]},
          ${c[1]/p[1]},
          ${c[1]/p[1]});
      const vec3 inputShapeRC = vec3(${a}.0, ${l}.0,
                                     ${l}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${m};

        // Compute the four integer indices.
        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));
        ivec3 sourceCeilRC = ivec3(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${u-1};
        bool hasNextRow = coords.z < ${o-1};

        // In parallel, construct four corners for all four components in
        // packed 2x2 cell.
        vec4 topLeft = vec4(
          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 bottomLeft = vec4(
          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 topRight = vec4(
          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec4 bottomRight = vec4(
          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);

        vec4 top = mix(topLeft, topRight, fracRC.yyzz);
        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);
        vec4 newValue = mix(top, bottom, fracRC.x);

        setOutput(newValue);
      }
    `}};function fY(r){let{inputs:t,backend:e,attrs:o}=r,{images:n}=t,{alignCorners:s,halfPixelCenters:i,size:a}=o,[l,u]=a,c=z().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new zb(n.shape,l,u,s,i):new Pb(n.shape,l,u,s,i);return e.runWebGLProgram(c,[n],"float32")}var cL={kernelName:Ji,backendName:"webgl",kernelFunc:fY};var Mb=class{constructor(t,e,o){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e;let[,n,s]=e,[,i,a]=t,l=[o&&i>1?n-1:n,o&&a>1?s-1:s],u=[o&&i>1?i-1:i,o&&a>1?a-1:a],c=l[0]/u[0],p=l[1]/u[1],m=1/c,f=1/p,h=Math.ceil(m)*2+2,g=Math.ceil(f)*2+2;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${c});
        const float widthScale = float(${p});

        const float invHeightScale = float(${m});
        const float invWidthScale = float(${f});

        const int winHeight = int(${h});
        const int winWidth = int(${g});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(startRLerp - float(winHeight / 2));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(startCLerp - float(winWidth / 2));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${i}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${a}) {
              continue;
            }

            float dxR = float(dyR) * heightScale;
            int topDxRIndex = int(floor(dxR));
            int bottomDxRIndex = int(min(ceil(dxR), ${n-1}.0));
            float dxRLerp = dxR - float(topDxRIndex);
            float inverseDxRLerp = 1.0 - dxRLerp;

            float dxC = float(dyC) * widthScale;
            int leftDxCIndex = int(floor(dxC));
            int rightDxCIndex = int(min(ceil(dxC), ${s-1}.0));
            float dxCLerp = dxC - float(leftDxCIndex);
            float inverseDxCLerp = 1.0 - dxCLerp;

            if (r == topDxRIndex && c == leftDxCIndex) {
              // topLeft
              accumulator +=
                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;
            }

            if (r == topDxRIndex && c == rightDxCIndex) {
              // topRight
              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;
            }

            if (r == bottomDxRIndex && c == leftDxCIndex) {
              // bottomLeft
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;
            }

            if (r == bottomDxRIndex && c == rightDxCIndex) {
              // bottomRight
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `}};function hY(r){let{inputs:t,backend:e,attrs:o}=r,{images:n,dy:s}=t,{alignCorners:i}=o,a=new Mb(s.shape,n.shape,i);return e.runWebGLProgram(a,[s],s.dtype)}var pL={kernelName:Qu,backendName:"webgl",kernelFunc:hY};var Bb=class{constructor(t,e,o,n,s){this.variableNames=["A"],this.outputShape=[];let[i,a,l,u]=t;this.outputShape=[i,e,o,u];let c=[n&&e>1?a-1:a,n&&o>1?l-1:l],p=[n&&e>1?e-1:e,n&&o>1?o-1:o],m=n?"0.5":"0.0",f;s?f="max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":f="vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${c[0]/p[0]},
          ${c[1]/p[1]});
      const vec2 inputShapeRC = vec2(${a}.0, ${l}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${f};

        // Compute the coordinators of nearest neighbor point.
        ivec2 sourceNearestRC = ivec2(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${m})));
        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);

        setOutput(newValue);
      }
    `}};var Vb=class{constructor(t,e,o,n,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];let[i,a,l,u]=t;this.outputShape=[i,e,o,u];let c=[n&&e>1?a-1:a,n&&o>1?l-1:l],p=[n&&e>1?e-1:e,n&&o>1?o-1:o],m=n?"0.5":"0.0",f;s?f="max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":f="vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${c[0]/p[0]},
          ${c[1]/p[1]},
          ${c[1]/p[1]});
      const vec3 inputShapeRC = vec3(${a}.0, ${l}.0,
                                     ${l}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${f};

        // Compute the coordinators of nearest neighbor point.
        ivec3 sourceNearestRC = ivec3(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${m})));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${u-1};
        bool hasNextRow = coords.z < ${o-1};

        vec4 newValue = vec4(
          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),
          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);

        setOutput(newValue);
      }
    `}};function dY(r){let{inputs:t,backend:e,attrs:o}=r,{images:n}=t,{alignCorners:s,halfPixelCenters:i,size:a}=o,[l,u]=a,c=z().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new Vb(n.shape,l,u,s,i):new Bb(n.shape,l,u,s,i);return e.runWebGLProgram(c,[n],n.dtype)}var mL={kernelName:Zi,backendName:"webgl",kernelFunc:dY};var Gb=class{constructor(t,e,o){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e;let[,n,s]=e,[,i,a]=t,l=[o&&i>1?n-1:n,o&&a>1?s-1:s],u=[o&&i>1?i-1:i,o&&a>1?a-1:a],c=l[0]/u[0],p=l[1]/u[1],m=1/c,f=1/p,h=Math.ceil(m)*2+2,g=Math.ceil(f)*2+2;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${c});
        const float widthScale = float(${p});

        const float invHeightScale = float(${m});
        const float invWidthScale = float(${f});

        const int winHeight = int(${h});
        const int winWidth = int(${g});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(floor(startRLerp - float(winHeight / 2)));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(floor(startCLerp - float(winWidth / 2)));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${i}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${a}) {
              continue;
            }

            float sourceFracRow =
              float(${l[0]}) *
                (float(dyR) / float(${u[0]}));

            float sourceFracCol =
                float(${l[1]}) *
                  (float(dyC) / float(${u[1]}));

            int sourceNearestRow = int(min(
                float(int(${n}) - 1),
                ${o} ? float(round(sourceFracRow)) :
                                  float(floor(sourceFracRow))));

            int sourceNearestCol = int(min(
                float(int(${s}) - 1),
                ${o} ? float(round(sourceFracCol)) :
                                  float(floor(sourceFracCol))));

            if (r == sourceNearestRow && c == sourceNearestCol) {
              accumulator += getDy(b, dyR, dyC, d);
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `}};function gY(r){let{inputs:t,backend:e,attrs:o}=r,{images:n,dy:s}=t,{alignCorners:i}=o,a=new Gb(s.shape,n.shape,i);return e.runWebGLProgram(a,[s],s.dtype)}var fL={kernelName:Ju,backendName:"webgl",kernelFunc:gY};var Wb=class{constructor(t,e){this.variableNames=["x"];let o=t.length;if(o>4)throw new Error(`WebGL backend: Reverse of rank-${o} tensor is not yet supported`);if(this.outputShape=t,o===1){this.userCode=`
        void main() {
          int coord = getOutputCoords();
          setOutput(getX(${t[0]} - coord - 1));
        }
      `;return}let n=a=>e.indexOf(a)!==-1&&t[a]!==1?`${t[a]} - coords[${a}] - 1`:`coords[${a}]`,s=t.map((a,l)=>n(l)).join(","),i=It(o);this.userCode=`
      void main() {
        ${i} coords = getOutputCoords();
        setOutput(getX(${s}));
      }
    `}};var Ub=class{constructor(t,e){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;let o=t.length;if(o>4)throw new Error(`WebGL backend: Reverse of rank-${o} tensor is not yet supported`);this.outputShape=t;let n=Ae("rc",o),s=`${n[o-1]} + 1 < ${this.outputShape[o-1]}`,i=`${n[o-2]} + 1 < ${this.outputShape[o-2]}`,a=It(o);o===1?this.userCode=`
        void main(){
          int rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = getChannel(getX(${t[0]} - rc - 1),
            ${t[0]} - rc - 1);
          if(${s}){
              result.g = getChannel(getX(${t[0]} - (rc  + 1) - 1),
                ${t[0]} - (rc  + 1) - 1);
          }
          setOutput(result);
        }
      `:this.userCode=`
        void main() {
          ${a} rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = ${l(n.slice())};
          if(${s}){
            result.g = ${u(n.slice())};
          }
          if(${i}) {
            result.b = ${c(n.slice())};
            if(${s}) {
              result.a = ${p(n.slice())};
            }
          }
          setOutput(result);
        }
    `;function l(h){return m(h)}function u(h){return h[o-1]="("+h[o-1]+" + 1)",m(h)}function c(h){return h[o-2]="("+h[o-2]+" + 1)",m(h)}function p(h){return h[o-1]="("+h[o-1]+" + 1)",h[o-2]="("+h[o-2]+" + 1)",m(h)}function m(h){let g=t.map((b,S)=>f(S,h)),d=g.join(","),x=g.slice(-2).join(",");return`getChannel(getX(${d}), vec2(${x}))`}function f(h,g){return e.indexOf(h)!==-1&&t[h]!==1?`${t[h]} - ${g[h]} - 1`:`${g[h]}`}}};function xY(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{dims:s}=o,i=n.shape.length,a=y.parseAxisParam(s,n.shape);if(i===0)return De({inputs:{x:n},backend:e});let l=z().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Ub(n.shape,a):new Wb(n.shape,a);return e.runWebGLProgram(l,[n],n.dtype)}var hL={kernelName:Qi,backendName:"webgl",kernelFunc:xY};var Hb=class{constructor(t,e){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];let o=t[1],n=t[2];this.outputShape=t;let s="";typeof e=="number"?s=`float outputValue = ${e.toFixed(2)};`:s=`
        vec3 fill = vec3(${e.join(",")});
        float outputValue = fill[coords[3]];`,this.userCode=`
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];
          int y = coords[1];
          float coordXFloat = (float(x) - params[0]) * params[3] -
            (float(y) - params[1]) * params[2];
          float coordYFloat = (float(x) - params[0]) * params[2] +
            (float(y) - params[1]) * params[3];
          int coordX = int(round(coordXFloat + params[0]));
          int coordY = int(round(coordYFloat + params[1]));
          ${s}
          if(coordX >= 0 && coordX < ${n} && coordY >= 0 && coordY < ${o}) {
            outputValue = getImage(coords[0], coordY, coordX, coords[3]);
          }
          setOutput(outputValue);
        }
    `}};var dL={kernelName:gc,backendName:"webgl",kernelFunc:({inputs:r,attrs:t,backend:e})=>{let{image:o}=r,{radians:n,fillValue:s,center:i}=t,a=e,l=new Hb(o.shape,s),[u,c]=I.getImageCenter(i,o.shape[1],o.shape[2]),p=[[u,c,Math.sin(n),Math.cos(n)]];return a.runWebGLProgram(l,[o],o.dtype,p)}};var yY=`
  // OpenGL ES does not support round function.
  // The algorithm is based on banker's rounding.
  float base = floor(x);
  if ((x - base) < 0.5) {
    return floor(x);
  } else if ((x - base) > 0.5) {
    return ceil(x);
  } else {
    if (mod(base, 2.0) == 0.0) {
      return base;
    } else {
      return base + 1.0;
    }
  }
`,bY=ht({opSnippet:yY}),gL={kernelName:Es,backendName:"webgl",kernelFunc:bY};var wY="return inversesqrt(x);",CY=ht({opSnippet:wY,cpuKernelImpl:XR}),xL={kernelName:$s,backendName:"webgl",kernelFunc:CY};var Ha=class{constructor(t,e,o,n,s,i,a=!0,l=!1){this.variableNames=["updates","indices","defaultValue"],this.outputShape=i;let u=It(s.length),c=It(i.length),p="";o===1?p="i":o===2&&(p="i, j");let m=`getIndices(${p})`,f="";n===1?f="i":n===2&&(f="i, coords[1]");let h=`getUpdates(${f})`,g="";l&&(g="coords[0], coords[1]");let d=`getDefaultValue(${g})`,x=e>1?"strides[j]":"strides";this.userCode=`
        ${u} strides = ${u}(${s});

        void main() {
          ${c} coords = getOutputCoords();
          float sum = 0.0;
          bool found = false;
          for (int i = 0; i < ${t}; i++) {
            int flattenedIndex = 0;
            for (int j = 0; j < ${e}; j++) {
              int index = round(${m});
              flattenedIndex += index * ${x};
            }
            if (flattenedIndex == coords[0]) {
              sum += ${h};
              found = true;
            }
          }
          setOutput(mix(${d}, sum, float(found)));
        }
      `}};var Kb=class{constructor(t,e,o,n,s,i,a=!0,l=!1){this.variableNames=["updates","indices","defaultValue"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=i;let u=It(s.length),c=It(i.length),p="";o===1?p="i":o===2&&(p="i, j");let m=`getIndices(${p})`,f="";n===1?f="i":n===2&&(f="i, coords[1]");let h=`getUpdates(${f})`,g="";l&&(g="coords[0], coords[1]");let d=`getDefaultValue(${g})`,x=e>1?"strides[j]":"strides",b=e>1?"strides[j + 1]":"strides";this.userCode=`
        ${u} strides = ${u}(${s});

        void main() {
          ${c} coords = getOutputCoords();
          vec4 sum = vec4(0.);
          vec4 found = vec4(0.);
          for (int i = 0; i < ${t}; i+=2) {
            ivec2 flattenedIndex = ivec2(0);
            for (int j = 0; j < ${e}; j+=2) {
              ivec4 index = round(${m});
              flattenedIndex += index.xz * ${x};
              if (j + 1 < ${e}) {
                flattenedIndex += index.yw * ${b};
              }
            }
            if (flattenedIndex[0] == coords[0] || flattenedIndex[1] == coords[0] ||
                flattenedIndex[0] == coords[0] + 1 || flattenedIndex[1] == coords[0] + 1) {
              vec4 updVals = ${h};
              if (flattenedIndex[0] == coords[0]) {
                sum.xy += updVals.xy;
                found.xy = vec2(1.);
              } else if (flattenedIndex[0] == coords[0] + 1) {
                sum.zw += updVals.xy;
                found.zw = vec2(1.);
              }
              if (flattenedIndex[1] == coords[0]) {
                sum.xy += updVals.zw;
                found.xy = vec2(1.);
              } else if (flattenedIndex[1] == coords[0] + 1) {
                sum.zw += updVals.zw;
                found.zw = vec2(1.);
              }
            }
          }
          setOutput(mix(${d}, sum, found));
        }
      `}};function SY(r){let{inputs:t,backend:e,attrs:o}=r,{indices:n,updates:s}=t,{shape:i}=o,{sliceRank:a,numUpdates:l,sliceSize:u,strides:c,outputSize:p}=I.calculateShapes(s,n,i),m=[p/u,u];if(p===0)return e.makeTensorInfo(i,n.dtype);let f=Q({inputs:{x:n},backend:e,attrs:{shape:[l,a]}}),h=Q({inputs:{x:s},backend:e,attrs:{shape:[l,u]}}),g=e.makeTensorInfo([],"float32",new Float32Array([0])),d;z().getBool("WEBGL_PACK")?d=new Kb(l,a,f.shape.length,h.shape.length,c,m):d=new Ha(l,a,f.shape.length,h.shape.length,c,m);let x=e.runWebGLProgram(d,[h,f,g],h.dtype),b=Q({inputs:{x},backend:e,attrs:{shape:i}});return e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(x),e.disposeIntermediateTensorInfo(g),b}var yL={kernelName:tc,backendName:"webgl",kernelFunc:SY};var qb=class{constructor(t,e,o,n){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[t,o];let s="while (left < right) {",i=`for (int i = 0; i < ${Math.ceil(Math.log2(e+1))}; ++i) { if (left >= right) break;`,a=z().getNumber("WEBGL_VERSION")===2?s:i,l=n==="left"?"<":"<=";this.userCode=`
       int findBound(int batch, float value) {
         int left = 0;
         int right = numInputs;
         int mid;
         ${a}
           mid = (left + right) / 2;
           if (getSortedSequence(batch, mid) ${l} value) {
             left = mid + 1;
           } else {
             right = mid;
           }
         }
         return right;
       }

       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int valueIndex = coords[1];

         float value = getValues(batch, valueIndex);

         setOutput(float(findBound(batch, value)));
       }
     `}};function NY(r){let{inputs:t,backend:e,attrs:o}=r,{sortedSequence:n,values:s}=t,{side:i}=o,a=new qb(n.shape[0],n.shape[1],s.shape[1],i),l=[[n.shape[1]]];return e.runWebGLProgram(a,[n,s],"int32",l)}var bL={kernelName:rc,backendName:"webgl",kernelFunc:NY};var jb=class{constructor(t,e,o){this.variableNames=["c","a","b"],this.outputShape=e;let n,s;if(o>4)throw Error(`Where for rank ${o} is not yet supported`);if(o===1)s="resRC",n="resRC";else{let a=["resRC.x","resRC.y","resRC.z","resRC.w"],l=[],u=[];for(let c=0;c<e.length;c++)u.push(`${a[c]}`),c<t&&l.push(`${a[c]}`);n=l.join(),s=u.join()}let i=It(o);this.userCode=`
      void main() {
        ${i} resRC = getOutputCoords();
        float cVal = getC(${n});
        if (cVal >= 1.0) {
          setOutput(getA(${s}));
        } else {
          setOutput(getB(${s}));
        }
      }
    `}};function vY(r){let{inputs:t,backend:e}=r,{condition:o,t:n,e:s}=t,i=new jb(o.shape.length,n.shape,n.shape.length);return e.runWebGLProgram(i,[o,n,s],Le(n.dtype,s.dtype))}var wL={kernelName:ta,backendName:"webgl",kernelFunc:vY};var TY=`
  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.
  // see: https://arxiv.org/abs/1706.02515
  float scaleAlpha = ${I.SELU_SCALEALPHA};
  float scale = ${I.SELU_SCALE};
  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);
`,IY=ht({opSnippet:TY}),CL={kernelName:As,backendName:"webgl",kernelFunc:IY};var kY=jo+`
  return 1.0 / (1.0 + exp(-1.0 * x));
`,EY=`
  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,$Y=ht({opSnippet:kY,packedOpSnippet:EY,cpuKernelImpl:ZR}),SL={kernelName:_s,backendName:"webgl",kernelFunc:$Y};var AY=`
  if (isnan(x)) { return 0.0; }
  return sign(x);
`,DY=ht({opSnippet:AY}),NL={kernelName:Fs,backendName:"webgl",kernelFunc:DY};var RY=jo+`
  return sin(x);
`,FY=`
  vec4 result = sin(x);
  bvec4 isNaN = isnan(x);
  ${mo}
  return result;
`,_Y=ht({opSnippet:RY,packedOpSnippet:FY}),vL={kernelName:Ds,backendName:"webgl",kernelFunc:_Y};var OY=`
  float e2x = exp(x);
  return (e2x - 1.0 / e2x) / 2.0;
`,LY=ht({opSnippet:OY}),TL={kernelName:Rs,backendName:"webgl",kernelFunc:LY};var PY=`
  float epsilon = 1.1920928955078125e-7;
  float threshold = log(epsilon) + 2.0;

  bool too_large = x > -threshold;
  bool too_small = x < threshold;

  float result;
  float exp_x = exp(x);

  if (too_large){
    result = x;
  }
  else if (too_small){
    result = exp_x;
  }
  else{
    result = log(exp_x + 1.0);
  }
  return result;
`,zY=ht({opSnippet:PY}),IL={kernelName:Os,backendName:"webgl",kernelFunc:zY};var MY=r=>{let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{blockShape:s,paddings:i}=o;y.assert(n.shape.length<=4,()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");let a=s.reduce((x,b)=>x*b),l=[[0,0]];l.push(...i);for(let x=1+s.length;x<n.shape.length;++x)l.push([0,0]);let u=[],c=tN({inputs:{x:n},backend:e,attrs:{paddings:l,constantValue:0}}),p=I.getReshaped(c.shape,s,a,!1),m=I.getPermuted(p.length,s.length,!1),f=I.getReshapedPermuted(c.shape,s,a,!1),h=Q({inputs:{x:c},backend:e,attrs:{shape:p}}),g=pe({inputs:{x:h},backend:e,attrs:{perm:m}}),d=Q({inputs:{x:g},backend:e,attrs:{shape:f}});return u.push(c),u.push(h),u.push(g),u.forEach(x=>e.disposeIntermediateTensorInfo(x)),d},kL={kernelName:oa,backendName:"webgl",kernelFunc:MY};function BY(r){let{inputs:t,backend:e}=r,{indices:o,values:n,denseShape:s,defaultValue:i}=t;if(s.shape.length!==1)throw new Error(`Dense shape must be a vector, saw:
         ${s.shape}`);if(o.shape.length!==2)throw new Error(`Indices must be a matrix, saw:
         ${o.shape}`);if(n.shape.length!==1)throw new Error(`Values must be a vector, saw:
         ${n.shape}`);if(i.shape.length!==0)throw new Error(`Default value must be a scalar, saw:
        ${i.shape}`);let a=e.readSync(o.dataId),l=e.readSync(n.dataId),u=e.readSync(s.dataId),c=e.readSync(i.dataId)[0],[p,m,f,h,g]=QR(a,o.shape,o.dtype,l,n.dtype,u,c);return[e.makeTensorInfo(m,o.dtype,p),e.makeTensorInfo([m[0]],n.dtype,f),e.makeTensorInfo([h.length],"bool",new Uint8Array(h.map(d=>Number(d)))),e.makeTensorInfo([g.length],o.dtype,new Int32Array(g))]}var EL={kernelName:oc,backendName:"webgl",kernelFunc:BY};function VY(r){let{inputs:t,backend:e}=r,{inputIndices:o,inputShape:n,newShape:s}=t;if(o.shape.length!==2)throw new Error(`Input indices should be a matrix but received shape ${o.shape}`);if(n.shape.length!==1)throw new Error(`Input shape should be a vector but received shape ${n.shape}`);if(s.shape.length!==1)throw new Error(`Target shape should be a vector but received shape ${s.shape}`);let i=Array.from(e.readSync(n.dataId)),a=e.readSync(o.dataId),l=Array.from(e.readSync(s.dataId)),[u,c,p]=tF(a,o.shape,o.dtype,i,l);return[e.makeTensorInfo(c,o.dtype,u),e.makeTensorInfo([p.length],s.dtype,new Int32Array(p))]}var $L={kernelName:nc,backendName:"webgl",kernelFunc:VY};function GY(r){let{inputs:t,backend:e}=r,{data:o,indices:n,segmentIds:s}=t;if(o.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(n.shape.length!==1)throw new Error(`Indices should be a vector but received shape
              ${n.shape}`);if(s.shape.length!==1)throw new Error(`Segment ids should be a vector but received shape
              ${s.shape}`);let i=e.readSync(o.dataId),a=e.readSync(n.dataId),l=e.readSync(s.dataId),[u,c]=$y(i,o.shape,o.dtype,a,l,!0);return e.makeTensorInfo(c,o.dtype,u)}var AL={kernelName:sc,backendName:"webgl",kernelFunc:GY};function WY(r){let{inputs:t,backend:e}=r,{data:o,indices:n,segmentIds:s}=t;if(o.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(n.shape.length!==1)throw new Error(`Indices should be a vector but received shape
             ${n.shape}`);if(s.shape.length!==1)throw new Error(`Segment ids should be a vector but received shape
             ${s.shape}`);let i=e.readSync(o.dataId),a=e.readSync(n.dataId),l=e.readSync(s.dataId),[u,c]=$y(i,o.shape,o.dtype,a,l);return e.makeTensorInfo(c,o.dtype,u)}var DL={kernelName:ic,backendName:"webgl",kernelFunc:WY};function UY(r){let{inputs:t,backend:e,attrs:o}=r,{sparseIndices:n,sparseValues:s,defaultValue:i}=t,{outputShape:a}=o,{sliceRank:l,numUpdates:u,sliceSize:c,strides:p,outputSize:m}=I.calculateShapes(s,n,a),f=!1;if(s.dtype==="string"){let x=e.bufferSync(n),b=e.bufferSync(s),S=y.decodeString(e.readSync(i.dataId)[0]),w=YR(x,b,a,m,c,u,l,p,S,f);return e.makeTensorInfo(a,w.dtype,w.values)}let h=new Ha(u,l,n.shape.length,s.shape.length,p,[m,1],f),g=e.runWebGLProgram(h,[s,n,i],s.dtype),d=Q({inputs:{x:g},backend:e,attrs:{shape:a}});return e.disposeIntermediateTensorInfo(g),d}var RL={kernelName:ac,backendName:"webgl",kernelFunc:UY};function HY(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{numOrSizeSplits:s,axis:i}=o,a=y.parseAxisParam(i,n.shape)[0],l=I.prepareSplitSize(n,s,a),u=n.shape.length,c=new Array(u).fill(0),p=n.shape.slice();return l.map(m=>{let f=[...p];f[a]=m;let h=dn({inputs:{x:n},backend:e,attrs:{begin:c,size:f}});return c[a]+=m,h})}var FL={kernelName:na,backendName:"webgl",kernelFunc:HY};var _L="return sqrt(x);",KY=ht({opSnippet:_L,packedOpSnippet:_L,cpuKernelImpl:eF}),OL={kernelName:Ls,backendName:"webgl",kernelFunc:KY};var qY="return x * x;",jY=ht({opSnippet:qY}),LL={kernelName:lc,backendName:"webgl",kernelFunc:jY};var PL="return (a - b) * (a - b);",XY=Ut({opSnippet:PL,packedOpSnippet:PL}),zL={kernelName:Ps,backendName:"webgl",kernelFunc:XY};function YY(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t;if(n.dtype!=="string")throw new Error("Input must be of datatype string");let s=e.readSync(n.dataId),i=I.fromUint8ToStringArray(s),a=rF(i,"string",o);return e.makeTensorInfo(n.shape,"string",a)}var ML={kernelName:sl,backendName:"webgl",kernelFunc:YY};function ZY({inputs:r,attrs:t,backend:e}){let{x:o}=r,n=Ue+`
    return x > 0.0 ? 1.0 : float(${t.alpha});
  `,s=new ur(o.shape,n);return e.runWebGLProgram(s,[o],o.dtype)}var BL={kernelName:Vs,backendName:"webgl",kernelFunc:ZY};var Xb=class{constructor(t,e,o){this.variableNames=["x"],this.outputShape=o;let n=o.length,s=It(o.length),i=It(o.length),a="";if(n===1)a="coords * strides + begin";else{let l=0;a=o.map((u,c)=>(l++,o.length===1?`coords * strides[${c}] + begin[${c}]`:`coords[${l-1}] * strides[${c}] + begin[${c}]`)).join(",")}this.userCode=`
      ${s} begin = ${s}(${t});
      ${s} strides = ${s}(${e});

      void main() {
        ${i} coords = getOutputCoords();
        setOutput(getX(${a}));
      }
    `}};function JY(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{begin:s,end:i,strides:a,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:p,shrinkAxisMask:m}=o,{finalShapeSparse:f,finalShape:h,isIdentity:g,sliceDim0:d,isSimpleSlice:x,begin:b,end:S,strides:w}=Ze.sliceInfo(n.shape,s,i,a,l,u,c,p,m),T;if(g)T=Q({inputs:{x:n},backend:e,attrs:{shape:h}});else if(d||x){y.assert(n.shape.length>=1,()=>`Input must have rank at least 1, got: ${n.shape.length}`);let R=Ze.computeOutShape(b,S,w),F=dn({inputs:{x:n},backend:e,attrs:{begin:b,size:R}});T=Q({inputs:{x:F},backend:e,attrs:{shape:h}}),e.disposeIntermediateTensorInfo(F)}else if(e.shouldExecuteOnCPU([n])){let F=e.readSync(n.dataId),O=mt(n.shape,n.dtype,F),P=oF(f,O,w,b);T=e.makeTensorInfo(h,n.dtype,P.values)}else{let F=new Xb(b,w,f);T=e.runWebGLProgram(F,[n],n.dtype)}let $=Q({inputs:{x:T},backend:e,attrs:{shape:h}});return e.disposeIntermediateTensorInfo(T),$}var VL={kernelName:uc,backendName:"webgl",kernelFunc:JY};function QY(r){let{inputs:t,backend:e,attrs:o}=r,{separator:n,nGramWidths:s,leftPad:i,rightPad:a,padWidth:l,preserveShortSequences:u}=o,{data:c,dataSplits:p}=t,m=e.readSync(c.dataId),f=e.readSync(p.dataId),[h,g]=nF(m,f,n,s,i,a,l,u);return[e.makeTensorInfo([h.length],"string",h),e.makeTensorInfo(p.shape,"int32",g)]}var GL={kernelName:cc,backendName:"webgl",kernelFunc:QY};function tZ(r){let{inputs:t,backend:e,attrs:o}=r,{skipEmpty:n}=o,{input:s,delimiter:i}=t;if(s.dtype!=="string")throw new Error("Input must be of datatype string");if(s.shape.length!==1)throw new Error(`Input must be a vector, got shape: ${s.shape}`);if(i.shape.length!==0)throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);let a=e.readSync(s.dataId),l=e.readSync(i.dataId)[0],[u,c,p]=sF(a,l,n),m=c.length;return[e.makeTensorInfo([m,2],"int32",u),e.makeTensorInfo([m],"string",c),e.makeTensorInfo([2],"int32",new Int32Array(p))]}var WL={kernelName:pc,backendName:"webgl",kernelFunc:tZ};function eZ(r){let{inputs:t,backend:e,attrs:o}=r,{numBuckets:n}=o,{input:s}=t;if(s.dtype!=="string")throw new Error("Input must be of datatype string");if(n<=0)throw new Error("Number of buckets must be at least 1");let i=e.readSync(s.dataId),a=iF(i,n);return e.makeTensorInfo(s.shape,"int32",a)}var UL={kernelName:mc,backendName:"webgl",kernelFunc:eZ};var rZ="return tan(x);",oZ=ht({opSnippet:rZ}),HL={kernelName:Ms,backendName:"webgl",kernelFunc:oZ};var nZ=`
  float e2x = exp(-2.0 * abs(x));
  return sign(x) * (1.0 - e2x) / (1.0 + e2x);
`,sZ=ht({opSnippet:nZ}),KL={kernelName:Bs,backendName:"webgl",kernelFunc:sZ};function iZ(r){let{inputs:t,backend:e,attrs:o}=r,{tensor:n,indices:s,updates:i}=t,{}=o,{sliceRank:a,numUpdates:l,sliceSize:u,strides:c,outputSize:p}=I.calculateShapes(i,s,n.shape),m=[p/u,u];if(p===0)return e.makeTensorInfo(n.shape,s.dtype);let f=Q({inputs:{x:s},backend:e,attrs:{shape:[l,a]}}),h=Q({inputs:{x:i},backend:e,attrs:{shape:[l,u]}}),g=Q({inputs:{x:n},backend:e,attrs:{shape:m}}),d=new Ha(l,a,f.shape.length,h.shape.length,c,m,!1,!0),x=e.runWebGLProgram(d,[h,f,g],g.dtype),b=Q({inputs:{x},backend:e,attrs:{shape:n.shape}});return e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(x),b}var qL={kernelName:ec,backendName:"webgl",kernelFunc:iZ};var Yb=class{constructor(t,e){this.variableNames=["A"];let o=new Array(t.length);for(let i=0;i<o.length;i++)o[i]=t[i]*e[i];this.outputShape=o,this.rank=o.length;let n=It(this.rank),s=aZ(t);this.userCode=`
      void main() {
        ${n} resRC = getOutputCoords();
        setOutput(getA(${s}));
      }
    `}};function aZ(r){let t=r.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(t===1)return`imod(resRC, ${r[0]})`;let e=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],o=[];for(let n=0;n<r.length;n++)o.push(`imod(${e[n]}, ${r[n]})`);return o.join()}function rN(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{reps:s}=o;if(n.dtype==="string"||n.shape.length>5){let l=e.readSync(n.dataId),u=n.dtype==="string"?l.map(m=>y.decodeString(m)):l,c=mt(n.shape,n.dtype,u),p=lF(c,s);return e.makeTensorInfo(p.shape,p.dtype,p.values)}let i=new Yb(n.shape,s);return e.runWebGLProgram(i,[n],n.dtype)}var jL={kernelName:bn,backendName:"webgl",kernelFunc:rN};var Zb=class{constructor(t){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=t,this.userCode=`
       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // We compare elements pair-wise within a group of size 2 * inc.
         // The comparing rule for each group alternates between ascending
         // and descending. Within each group, we compare each pair at
         // positions i and i+inc. To decide whether an element at position i
         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than
         // inc, it is in the first half of the group, we denote it as x0,
         // otherwise we denote it as x1.
         // For example, as shown in the Bitonic top K paper referenced above,
         // Figure5(a) shows that element[1] is in the
         // second half of the group when group size is 2, but it is in the
         // first half of the group when group size is 4.

         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;
         int i = isFirstInPair ? elemIdx : elemIdx - inc;

         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));
         float x0 = i0 < n ? getX(batch, i0) : negativeInf;
         float x1 = i1 < n ? getX(batch, i1) : negativeInf;

         // Denotes which direction indices are in (ascending or descending).
         bool reverse = imod(elemIdx, 2 * dir) >= dir;
         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);
         if (reverse == isGreater) { // Elements in opposite order of direction
           int iTemp = i0;
           i0 = i1;
           i1 = iTemp;
         }
         if (isFirstInPair) {
            setOutput(float(i0));
         } else {
            setOutput(float(i1));
         }
       }
     `}},Jb=class{constructor(t){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=t,this.userCode=`
    void main() {
         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // The output size is half of the previous size.
         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),
         // we only need to output the indices at positions |, the indices at
         // positions _ can be thrown away, see Figure5(b) After Phase 2
         // (Merge phase) in the Bitonic Top K paper referenced above.
         // For example, the paper shows we only need to output the orange bars.
         // The output sequence should look like this | | | | | | | |.
         // Because the sequence is halved, to map the output index back
         // to the previous sequence to find the corresponding value,
         // we need to double the index. When we double the index,
         // we basically interpolate a position, so 2i looks like
         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position
         // of each 2k positions by - elemIdx % k. E.g. for output at
         // index 4,5,6,7, we want to get the corresponding element at
         // original index 8,9,10,11, for output at index 8,9,10,11,
         // we want to get the corresponding element at original index
         // 16,17,18,19, so on and so forth.

         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));
         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));

         float x0 = getX(batch, i0);
         float x1 = i1 < n ? getX(batch, i1) : x0;

         setOutput(x0 >= x1 ? float(i0) : float(i1));
       }
     `}};function iu(r,t){t!==null&&r.disposeIntermediateTensorInfo(t)}function XL(r){let t=1;for(;t<r;)t*=2;return t}function lZ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{k:s,sorted:i}=o,a=z().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),l=z().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),u=n.shape,c=u[u.length-1];if(e.shouldExecuteOnCPU([n])||c<a||s>l){let P=e.readSync(n.dataId),[B,V]=uF(P,u,n.dtype,s,i);return[e.makeTensorInfo(B.shape,B.dtype,B.values),e.makeTensorInfo(V.shape,V.dtype,V.values)]}if(s===0)return u[u.length-1]=0,[e.makeTensorInfo(u,n.dtype,[]),e.makeTensorInfo(u,"int32",[])];if(c===1)return[n,ci({attrs:{shape:u,dtype:"int32",value:0},backend:e})];let p=e.texData.get(n.dataId),m=p!==null&&p.isPacked,f=m?e.unpackTensor(n):n,g=y.sizeFromShape(u)/c,d=Q({inputs:{x:f},attrs:{shape:[g,c]},backend:e});m&&iu(e,f);let x=XL(s),b=XL(c),S=null,w=()=>S===null?[d,d]:[d,S],T=(P,B,V)=>{let G=w(),H=new Zb(V),j=[[c],[S===null?1:0],[Number.NEGATIVE_INFINITY],[P],[B]],Z=S;S=e.runWebGLProgram(H,G,"int32",j),iu(e,Z)};for(let P=1;P<x;P*=2){let B=P*2;for(let V=P;V>=1;V/=2)T(B,V,[g,b])}for(let P=b;P>x;P/=2){let B=w(),V=new Jb([g,P/2]),H=[[c],[S===null?1:0],[x]],W=S;S=e.runWebGLProgram(V,B,"int32",H),iu(e,W);let j=x/2,Z=j*2;for(let q=j;q>=1;q/=2)T(Z,q,S.shape)}let $=S;S=dn({inputs:{x:S},backend:e,attrs:{begin:0,size:[g,s]}}),iu(e,$);let R=XS({inputs:{x:d,indices:S},backend:e,attrs:{axis:1,batchDims:1}});iu(e,d);let F=u.slice(0,-1);F.push(s),$=S,S=Q({inputs:{x:S},attrs:{shape:F},backend:e}),iu(e,$);let O=R;return R=Q({inputs:{x:R},attrs:{shape:F},backend:e}),iu(e,O),[R,S]}var YL={kernelName:fc,backendName:"webgl",kernelFunc:lZ};var Qb=class{constructor(t,e,o,n,s,i){this.variableNames=["Image","Transforms"],this.outputShape=i;let a=o==="nearest"?1:2,l;switch(n){case"constant":l=1;break;case"reflect":l=2;break;case"wrap":l=3;break;case"nearest":l=4;break;default:l=1;break}this.userCode=`
            float mapCoord(float outCoord, float len) {
              float inCoord = outCoord;
              if(${l} == 2) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    if (inCoord < sz2) {
                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +
                      inCoord;
                    }
                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    inCoord -= sz2 * float(int(float(inCoord / sz2)));
                    if (inCoord >= len) {
                      inCoord = sz2 - inCoord - 1.0;
                    }
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${l} == 3) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord -= len * float(int(float(inCoord / sz)));
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${l} == 4) {
                return clamp(outCoord, 0.0, len - 1.0);
              } else {
                return outCoord;
              }
            }

            float readWithFillValue(int batch, int coordY, int coordX,
              int channel) {
              float outputValue;
              if (0 <= coordY && coordY < ${t} && 0 <= coordX && coordX < ${e}) {
                  outputValue = getImage(batch, coordY, coordX, channel);
              } else {
                outputValue = float(${s});
              }
              return outputValue;
            }

            void main() {
              ivec4 coords = getOutputCoords();
              float outputValue;
              int batch = coords[0];
              int x = coords[2];
              int y = coords[1];
              int channel = coords[3];
              float xf = float(x);
              float yf = float(y);
              float a1 = getTransforms(batch, 0);
              float a2 = getTransforms(batch, 1);
              float a3 = getTransforms(batch, 2);
              float b1 = getTransforms(batch, 3);
              float b2 = getTransforms(batch, 4);
              float b3 = getTransforms(batch, 5);
              float c1 = getTransforms(batch, 6);
              float c2 = getTransforms(batch, 7);
              float projection = c1 * xf + c2 * yf + 1.0;
              if (projection == 0.0) {
                outputValue = float(${s});
              } else {
                float inX = (a1 * xf + a2 * yf + a3) / projection;
                float inY = (b1 * xf + b2 * yf + b3) / projection;
                float mapX = mapCoord(inX, float(${e}));
                float mapY = mapCoord(inY, float(${t}));

                if (${a} == 1) {
                  int coordY = int(round(mapY));
                  int coordX = int(round(mapX));
                  outputValue = readWithFillValue(batch, coordY, coordX,
                    channel);
                } else {
                  float yFloor = floor(mapY);
                  float xFloor = floor(mapX);
                  float yCeil = yFloor + 1.0;
                  float xCeil = xFloor + 1.0;
                  float valueYFloor = (xCeil - mapX) *
                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);
                  float valueYCeil = (xCeil - mapX) *
                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);
                  outputValue = (yCeil - mapY) * valueYFloor +
                  (mapY - yFloor) * valueYCeil;
                }
              }
              setOutput(outputValue);
            }
        `}};function uZ(r){let{inputs:t,backend:e,attrs:o}=r,{image:n,transforms:s}=t,{interpolation:i,fillMode:a,fillValue:l,outputShape:u}=o,[c,p,m,f]=n.shape,[h,g]=u??[p,m],d=[c,h,g,f],x=new Qb(p,m,i,a,l,d);return e.runWebGLProgram(x,[n,s],"float32")}var ZL={kernelName:hc,backendName:"webgl",kernelFunc:uZ};function cZ(r){let{inputs:t,attrs:e,backend:o}=r,{axis:n}=e,{x:s}=t;Wn(s,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");let i=o.readSync(s.dataId),{outputValues:a,outputShape:l,indices:u}=cF(i,n,s.shape,s.dtype);return[o.makeTensorInfo(l,s.dtype,a),o.makeTensorInfo([u.length],"int32",u)]}var JL={kernelName:dc,backendName:"webgl",kernelFunc:cZ};function pZ(r){let{inputs:t,backend:e,attrs:o}=r,{value:n}=t,{axis:s}=o;s<0&&(s+=n.shape.length);let i=n,a=i.shape.length,l=n.shape[s],u=new Array(a-1),c=0;for(let g=0;g<a;g++)g!==s&&(u[c++]=i.shape[g]);let p=[],m=new Array(a).fill(0),f=i.shape.slice();f[s]=1;let h=new Array(l);for(let g=0;g<h.length;g++){m[s]=g;let d=dn({inputs:{x:i},backend:e,attrs:{begin:m,size:f}}),x=Q({inputs:{x:d},backend:e,attrs:{shape:u}});h[g]=x,p.push(d)}return p.forEach(g=>e.disposeIntermediateTensorInfo(g)),h}var QL={kernelName:ia,backendName:"webgl",kernelFunc:pZ};var tw=class{constructor(t,e){this.variableNames=["x","segmentIds"];let o=t.windowSize,n=t.batchSize,s=t.inSize,i=t.numSegments,a=i*Math.ceil(s/o);this.outputShape=[n,a];let l="0.0",u="sumValue",c=Math.floor(o/4)*4,p=o%4,m=`
        sumValue += dot(values, segFilter);
    `,f="";s%o>0&&(f=`
        if (inIdx < 0 || inIdx >= ${s}) {
          return initializationValue;
        }
      `);let h="";s%o>0&&(h=`
        if (inIdx < 0 || inIdx >= ${s}) {
          return -1.0;
        }
      `),this.userCode=`
      const float initializationValue = ${l};

      float getValue(int batch, int inIdx) {
        ${f}
        return getX(batch, inIdx);
      }

      float getSegmentIdAtIndex(int inIdx) {
        ${h}
        return getSegmentIds(inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = int(floor(float(outIdx) / float(
          ${i})) * float(${o}));
        int currentSeg = int(mod(float(outIdx), float(${i})));

        float sumValue = 0.0;

        for (int i = 0; i < ${c}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0
          );

          ${m}
        }

        int inIdx = inOffset + ${c};
        if (${p===1}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            0,
            0,
            0
          );

          ${m}
        } else if (${p===2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
              0,
              0
          );

          ${m}
        } else if (${p===3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            0
          );

          ${m}
        }
        setOutput(${u});
      }
    `}};function mZ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,segmentIds:s}=t,{numSegments:i}=o,a=n.shape.length,l=[],u=0,c=I.getAxesPermutation([u],a),p=n;c!=null&&(p=pe({inputs:{x:n},backend:e,attrs:{perm:c}}),l.push(p),u=I.getInnerMostAxes(1,a)[0]);let m=I.segment_util.computeOutShape(p.shape,u,i),f=y.sizeFromShape([p.shape[u]]),h=Q({inputs:{x:p},backend:e,attrs:{shape:[-1,f]}});l.push(h);let g=hl(n.dtype),d=(w,T,$,R,F)=>{let O=w.shape[0],P=w.shape[1],B=I.segment_util.segOpComputeOptimalWindowSize(P,F),V={windowSize:B,inSize:P,batchSize:O,numSegments:F},G=new tw(V,T),H=e.compileAndRun(G,[w,$],R);if(l.push(H),H.shape[1]===F)return H;let W=eN({backend:e,attrs:{start:0,stop:F,step:1,dtype:"float32"}}),j=rN({inputs:{x:W},backend:e,attrs:{reps:[P/B]}});return l.push(W),l.push(j),d(H,T,j,R,F)},x=d(h,"unsortedSegmentSum",s,g,i),b=Q({inputs:{x},backend:e,attrs:{shape:m}}),S=b;if(c!=null){l.push(b);let w=I.getUndoAxesPermutation(c);S=pe({inputs:{x:S},backend:e,attrs:{perm:w}})}return l.forEach(w=>e.disposeIntermediateTensorInfo(w)),S}var tP={kernelName:aa,backendName:"webgl",kernelFunc:mZ};var fZ=[PF,MF,BF,VF,WF,UF,HF,KF,XF,YF,ZF,JF,QF,t_,e_,r_,o_,n_,s_,i_,a_,u_,c_,p_,d_,x_,y_,kF,w_,S_,N_,v_,T_,I_,k_,E_,$_,A_,D_,__,O_,L_,P_,z_,M_,B_,V_,G_,W_,U_,H_,K_,q_,j_,X_,Z_,J_,Q_,tO,rO,oO,nO,sO,iO,aO,lO,uO,cO,IF,pO,C_,mO,fO,hO,EF,dO,gO,xO,yO,bO,wO,CO,SO,NO,vO,IO,kO,EO,$O,AO,DO,FO,OO,LO,PO,zO,MO,UO,DF,HO,KO,qO,jO,m_,XO,JO,QO,tL,eL,$F,rL,oL,nL,sL,iL,f_,BO,aL,lL,uL,FF,cL,pL,mL,fL,hL,dL,gL,xL,yL,bL,wL,CL,SL,NL,vL,TL,l_,WO,IL,kL,EL,$L,AL,DL,RL,FL,OL,LL,zL,ML,BL,VL,GL,WL,UL,GO,OF,HL,KL,qL,jL,YL,ZL,LF,JL,QL,tP,YO];for(let r of fZ)Bh(r);var Qr=document.getElementById("video"),Hn=document.getElementById("canvas"),ew=document.createElement("canvas"),eP=ew.getContext("2d"),dZ=document.getElementById("markregions"),gZ=document.getElementById("blurnude"),xZ=document.getElementById("blursexy"),cr=Hn.getContext("2d"),er={},ow,rw=r=>console.log(r),Mr={modelPath:"../models/default-f16/model.json",videoPath:"../samples/video.webm",minScore:.38,maxResults:50,iouThreshold:.5,outputNodes:["output1","output2","output3"],blurRadius:25,resolution:[1280,720]},yZ=["exposed anus","exposed armpits","belly","exposed belly","buttocks","exposed buttocks","female face","male face","feet","exposed feet","breast","exposed breast","vagina","exposed vagina","male breast","exposed male breast"],Oh={person:[6,7],sexy:[1,2,3,4,8,9,10,15],nude:[0,5,11,12,13]};async function bZ(r,t,e,o){let n=await r.array(),s=await t.data(),i=await e.data(),a=await hr.nonMaxSuppressionAsync(n[0],s,Mr.maxResults,Mr.iouThreshold,Mr.minScore),l=await a.data();xt(a);let u=[];for(let p in l){let m=parseInt(p);u.push({score:s[p],id:i[m],class:yZ[i[m]],box:[Math.trunc(n[0][m][0]),Math.trunc(n[0][m][1]),Math.trunc(n[0][m][3]-n[0][m][1]),Math.trunc(n[0][m][2]-n[0][m][0])]})}return{input:{width:o.shape[2],height:o.shape[1]},person:u.filter(p=>Oh.person.includes(p.id)).length>0,sexy:u.filter(p=>Oh.sexy.includes(p.id)).length>0,nude:u.filter(p=>Oh.nude.includes(p.id)).length>0,parts:u}}function rP({left:r=0,top:t=0,width:e=0,height:o=0}){e===0||o===0||Hn.width===0||Hn.height===0||(ew.width=e/Mr.blurRadius+1,ew.height=o/Mr.blurRadius+1,eP.imageSmoothingEnabled=!0,eP.drawImage(Hn,r,t,e,o,0,0,e/Mr.blurRadius,o/Mr.blurRadius),cr.drawImage(ew,r,t,e,o))}function wZ({x:r=0,y:t=0,width:e=0,height:o=0,radius:n=8,lineWidth:s=2,color:i="white",title:a="",font:l='16px "Segoe UI"'}){cr.lineWidth=s,cr.beginPath(),cr.moveTo(r+n,t),cr.lineTo(r+e-n,t),cr.quadraticCurveTo(r+e,t,r+e,t+n),cr.lineTo(r+e,t+o-n),cr.quadraticCurveTo(r+e,t+o,r+e-n,t+o),cr.lineTo(r+n,t+o),cr.quadraticCurveTo(r,t+o,r,t+o-n),cr.lineTo(r,t+n),cr.quadraticCurveTo(r,t,r+n,t),cr.closePath(),cr.strokeStyle=i,cr.stroke(),cr.lineWidth=2,cr.fillStyle=i,cr.font=l,cr.fillText(a,r+4,t-4)}function CZ(r){for(let t of r.parts)Oh.nude.includes(t.id)&&gZ.checked&&rP({left:t.box[0],top:t.box[1],width:t.box[2],height:t.box[3]}),Oh.sexy.includes(t.id)&&xZ.checked&&rP({left:t.box[0],top:t.box[1],width:t.box[2],height:t.box[3]}),dZ.checked&&wZ({x:t.box[0],y:t.box[1],width:t.box[2],height:t.box[3],title:`${Math.round(100*t.score)}% ${t.class}`})}var oN=0;async function oP(){if(Hn.width!==Qr.videoWidth&&(Hn.width=Qr.videoWidth),Hn.height!==Qr.videoHeight&&(Hn.height=Qr.videoHeight),Qr.currentTime!==oN&&Hn.width>0&&ow&&Qr.readyState>=2){oN=Qr.currentTime,er.buffer=await np.fromPixelsAsync(Qr),er.resize=Mr.resolution[0]>0&&Mr.resolution[1]>0&&(Mr.resolution[0]!==Qr.videoWidth||Mr.resolution[1]!==Qr.videoHeight)?hr.resizeNearestNeighbor(er.buffer,[Mr.resolution[1],Mr.resolution[0]]):er.buffer,er.cast=X(er.resize,"float32"),er.batch=Ie(er.cast,0);let r=Date.now();[er.boxes,er.scores,er.classes]=await ow.executeAsync(er.batch,Mr.outputNodes);let t=Date.now(),e=await bZ(er.boxes,er.scores,er.classes,er.cast);await np.toPixels(er.resize,Hn),CZ(e),Object.keys(er).forEach(o=>xt(er[o])),rw({ts:oN,time:t-r,res:e,t:er,tensors:xl().numTensors})}requestAnimationFrame(oP)}async function SZ(){Wr().registryFactory.webgpu&&navigator?.gpu?await od("webgpu"):await od("webgl"),z().set("WEBGL_USE_SHAPES_UNIFORMS",!0),await av(),rw({tf:yg,backend:lv(),available:Wr().registryFactory,flags:z().getFlags()}),ow=await yC(Mr.modelPath),rw({model:ow}),Qr.oncanplay=()=>rw({video:Qr.src,width:Qr.videoWidth,height:Qr.videoHeight}),Qr.src=Mr.videoPath,await oP()}window.onload=SZ;
//# sourceMappingURL=index.js.map
